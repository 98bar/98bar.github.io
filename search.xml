<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于ABAQUS/RITSS大变形有限元分析方法相关的一些论文</title>
      <link href="/post/share-2-paper-ritss-1/"/>
      <url>/post/share-2-paper-ritss-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>备份并分享一些关于ABAQUS/RITSS大变形有限元分析方法的一些论文。</p><h1 id="RITSS提出"><a href="#RITSS提出" class="headerlink" title="RITSS提出"></a>RITSS提出</h1><ul><li>Hu-1998-A PRACTICAL NUMERICAL APPROACH FOR LARGE DEFORMATION PROBLEMS IN SOIL</li><li>Hu-1998-H-adaptive FE analysis of elasto-plastic nonhomogeneous soil with large deformation</li></ul><h1 id="综述类"><a href="#综述类" class="headerlink" title="综述类"></a>综述类</h1><ul><li>Augarde-2021-Numerical modelling of large deformation problems in geotechnical engineering: A state-of-the-art review</li><li>Wang-2015-Large deformation finite element analyses in geotechnical engineering</li><li>闫澍旺-2016-岩土工程下沉贯入数值模拟方法研究进展</li></ul><h1 id="ABAQUS-RITSS"><a href="#ABAQUS-RITSS" class="headerlink" title="ABAQUS-RITSS"></a>ABAQUS-RITSS</h1><ul><li>Dong-2021-Large deformation coupled analysis of embedded pipeline – Soil lateral interaction</li><li>Dong-2021-The influence of pipeline-backfill-trench interaction on the lateral soil resistance</li><li>Satchithananthan-2021-Axial sliding resistance of partially embedded offshore pipelines</li><li>Tian-2014-A simple implementation of RITSS and its application in large deformation analysis</li><li>Wang-2008-Large Deformation Finite Element Analysis for Offshore Applications</li><li>Wang-2010-Large-deformation finite element analysis of pipe penetration and large-amplitude lateral displacement</li><li>Wang-2013-A dynamic large deformation finite element method based on mesh regeneration</li><li>王栋-2008-方形平板锚抗拉承载力的大变形有限元分析</li><li>赵燕兵-2015-条形基础嵌入问题的大变形有限元对比分析</li></ul><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><ul><li>Singh-2022-UNLOCKING THE CHANGING STRENGTH OF FINE-GRAINED SOILS IN NUMERICAL ANALYSES</li><li>Zhou-2008-NUMERICAL STUDY OF GEOTECHNICAL PENETRATION PROBLEMS FOR OFFSHORE APPLICATIONS</li><li>于龙-2008-三维RITSS大变形有限元方法及其在基础刺入破坏和锚板承载力问题中的应用</li></ul><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p>下载地址：<a href="https://github.com/smiler666/ABAQUS-RITSS" target="_blank" rel="noopener">https://github.com/smiler666/ABAQUS-RITSS</a></p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABAQUS </tag>
            
            <tag> RITSS </tag>
            
            <tag> 资源分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ABAQUS的大变形有限元RITSS方法教程（四）例子：管道从土体表面连续贯入</title>
      <link href="/post/abaqus-1-ritss-04/"/>
      <url>/post/abaqus-1-ritss-04/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a6ce4147dba22bde9034daf7fb730262a2bd3c4e90afc8228600c2d5eaa10faa">fddf53f1f05333f1e166df83c1b1df9fe3de9b970c0c6296a3c246ad1eb2ddf7c1646de7a3b72b0137bb97f35ffec7925e47c64133c0f84c44ad8420115d399779b7e7a5700443850dfcdfcad62321ae</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章已被加密，请在此输入密码查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数值计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABAQUS </tag>
            
            <tag> RITSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ABAQUS的大变形有限元RITSS方法教程（三）例子：贯入仪在土中深埋贯入</title>
      <link href="/post/abaqus-1-ritss-03/"/>
      <url>/post/abaqus-1-ritss-03/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a6ce4147dba22bde9034daf7fb730262a2bd3c4e90afc8228600c2d5eaa10faa">fddf53f1f05333f1e166df83c1b1df9fe3de9b970c0c6296a3c246ad1eb2ddf7c1646de7a3b72b0137bb97f35ffec7925e47c64133c0f84c44ad8420115d399779b7e7a5700443850dfcdfcad62321ae</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章已被加密，请在此输入密码查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数值计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABAQUS </tag>
            
            <tag> RITSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ABAQUS的大变形有限元RITSS方法教程（二）自动化建模及RITSS实现</title>
      <link href="/post/abaqus-1-ritss-02/"/>
      <url>/post/abaqus-1-ritss-02/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="d0a208014d85f64d543679f1d6ea192a74a7f53dc5699a268f3def1b91b33c5d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章已被加密，请在此输入密码查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数值计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABAQUS </tag>
            
            <tag> RITSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ABAQUS的大变形有限元RITSS方法教程（一）基础知识</title>
      <link href="/post/abaqus-1-ritss-01/"/>
      <url>/post/abaqus-1-ritss-01/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="63570fc5d79b90acf9edf9d5e0a46372c083bec205c039281205cb8f7f5ecf42"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章已被加密，请在此输入密码查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数值计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABAQUS </tag>
            
            <tag> RITSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一些常用的在线小工具（常用在线工具汇总）</title>
      <link href="/post/share-1/"/>
      <url>/post/share-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h1><ul><li>😀New Bing（需要魔法）：<a href="https://www.bing.com/new" target="_blank" rel="noopener">https://www.bing.com/new</a></li><li>😀百度文心一言：<a href="https://yiyan.baidu.com/" target="_blank" rel="noopener">https://yiyan.baidu.com/</a></li><li>😀ChatGPT（官网，需要魔法）：<a href="https://chat.openai.com/" target="_blank" rel="noopener">https://chat.openai.com/</a></li><li>😀Open Assistant：<a href="https://open-assistant.io/" target="_blank" rel="noopener">https://open-assistant.io/</a></li><li>😀ChatGPT3.5镜像：<a href="https://chat3.aichatos.com/" target="_blank" rel="noopener">https://chat3.aichatos.com/</a></li><li>😀ChatGPT3.5镜像：<a href="https://dev.yqcloud.top/" target="_blank" rel="noopener">https://dev.yqcloud.top/</a></li><li>😀ChatGPT3.5镜像：<a href="https://chat1.binjie.site:7777/" target="_blank" rel="noopener">https://chat1.binjie.site:7777/</a></li><li>😀ChatGPT3.5镜像：<a href="http://choiajsd.aichatos.com/" target="_blank" rel="noopener">http://choiajsd.aichatos.com/</a></li><li>😀ChatGPT3.5镜像（不支持连续对话）：<a href="https://chat.aidutu.cn/" target="_blank" rel="noopener">https://chat.aidutu.cn/</a></li><li>😀Poe镜像（需要魔法）：<a href="https://poe.com/" target="_blank" rel="noopener">https://poe.com/</a></li><li>😀阿里通义千问：<a href="https://tongyi.aliyun.com/" target="_blank" rel="noopener">https://tongyi.aliyun.com/</a></li><li>😀chatPDF文献总结（需要魔法）：<a href="https://www.chatpdf.com/" target="_blank" rel="noopener">https://www.chatpdf.com/</a></li><li>😀生成卡通头像：<a href="https://getavataaars.com/" target="_blank" rel="noopener">https://getavataaars.com/</a></li><li>😀封面在线制作：<a href="https://figen.cc/" target="_blank" rel="noopener">https://figen.cc/</a></li><li>😀视频/图片转换为漫画风格：<a href="https://huggingface.co/spaces/akhaliq/AnimeGANv2" target="_blank" rel="noopener">https://huggingface.co/spaces/akhaliq/AnimeGANv2</a></li><li>😀自动从图上扣去不需要的元素：<a href="https://magicstudio.com/magiceraser" target="_blank" rel="noopener">https://magicstudio.com/magiceraser</a></li><li>😀周报通，自动生成周报：<a href="https://zhoubaotong.com/zh" target="_blank" rel="noopener">https://zhoubaotong.com/zh</a></li></ul><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><ul><li>💻m1907云加速播放器：<a href="https://im1907.top/" target="_blank" rel="noopener">https://im1907.top/</a></li><li>💻视频解析下载：<a href="https://bilibili.iiilab.com/" target="_blank" rel="noopener">https://bilibili.iiilab.com/</a></li></ul><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><ul><li>📕谷歌学术：<a href="https://scholar.google.com/" target="_blank" rel="noopener">https://scholar.google.com/</a></li><li>📕鸠摩搜索：<a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">https://www.jiumodiary.com/</a></li><li>📕SCI-HUB：<a href="https://www.sci-hub.ren/" target="_blank" rel="noopener">https://www.sci-hub.ren/</a></li><li>📕淘链客 (资源聚合搜索)：<a href="https://www.toplinks.cc/s/" target="_blank" rel="noopener">https://www.toplinks.cc/s/</a></li><li>📕学搜搜网盘搜索：<a href="https://www.xuesousou.com/" target="_blank" rel="noopener">https://www.xuesousou.com/</a> 备用：<a href="https://www.xuesousou.net/" target="_blank" rel="noopener">www.xuesousou.net</a></li></ul><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul><li>📸GIF动态图片生成：<a href="https://ezgif.com/" target="_blank" rel="noopener">https://ezgif.com/</a></li><li>📸生成简洁有艺术的二维码：<a href="https://qrbtf.com/" target="_blank" rel="noopener">https://qrbtf.com/</a></li><li>📸图片在线压缩：<a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></li><li>📸视频在线压缩：<a href="https://compress-video-online.com/zh" target="_blank" rel="noopener">https://compress-video-online.com/zh</a></li><li>📸PDF文档压缩：<a href="https://tools.pdf24.org/" target="_blank" rel="noopener">https://tools.pdf24.org/</a></li></ul><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><ul><li>📓匿名文件上传：<a href="https://ufile.io/" target="_blank" rel="noopener">https://ufile.io/</a></li><li>📓临时教育邮箱：<a href="https://mail.mjj.edu.ge/?btwaf=87560988" target="_blank" rel="noopener">https://mail.mjj.edu.ge/?btwaf=87560988</a></li><li>📓免费高清无版权图库：<a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></li><li>📓游戏动漫图库：<a href="https://www.ggac.com/" target="_blank" rel="noopener">https://www.ggac.com/</a></li><li>📓谷歌数据搜索：<a href="https://datasetsearch.research.google.com/" target="_blank" rel="noopener">https://datasetsearch.research.google.com/</a></li><li>📓默沙东诊疗手册：<a href="https://www.msdmanuals.cn/home" target="_blank" rel="noopener">https://www.msdmanuals.cn/home</a></li><li>📓Github代码全文搜索：<a href="https://grep.app/" target="_blank" rel="noopener">https://grep.app/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT vs 文心一言 vs 新必应（2023年4月4日）</title>
      <link href="/post/ramble-1/"/>
      <url>/post/ramble-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>截止2023-04-04，从提问的两个问题来看，微软新必应完胜，百度文心一言有待加强。</p><p>不过百度文心一言AI绘图功能不错。</p><h1 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h1><blockquote><p>假如你是一名大厨，非常擅长蒸包子，蒸1个包子需要5分钟，而你的客人现在想吃10个包子，那么你需要多久呢？</p></blockquote><p>ChatGPT回答错误，百度文心一言完全胡说八道，微软新必应完胜！</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ramble-1/1.jpg" alt="ChatGPT"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ramble-1/2.jpg" alt="文心一言"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ramble-1/3.jpg" alt="新必应"></p><h1 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h1><blockquote><p>如何评价宋代著名大型水利工程一峡小坝和二峡大坝？</p></blockquote><p>ChatGPT和百度文心一言胡说八道，微软新必应完胜！</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ramble-1/4.jpg" alt="ChatGPT"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ramble-1/5.jpg" alt="文心一言"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ramble-1/6.jpg" alt="新必应"></p><h1 id="AI绘图"><a href="#AI绘图" class="headerlink" title="AI绘图"></a>AI绘图</h1><p>百度文心一言AI绘图的确不错，但仅能绘漫画图像，且也存在胡说八道的情况。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ramble-1/7.jpg" alt="文心一言AI绘图"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ramble-1/8.jpg" alt="文心一言AI绘图"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ramble-1/9.jpg" alt="文心一言AI绘图"></p>]]></content>
      
      
      <categories>
          
          <category> 闲谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>山东水设青岛分公司小记</title>
      <link href="/post/experience-2/"/>
      <url>/post/experience-2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/experience-2/1.jpg" alt="1"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/experience-2/2.jpg" alt="2"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/experience-2/3.jpg" alt="3"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/experience-2/4.jpg" alt="4"></p>]]></content>
      
      
      <categories>
          
          <category> 经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享几款开源的在线放松小游戏</title>
      <link href="/post/ent-2-game-1/"/>
      <url>/post/ent-2-game-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>分享Github上几款开源的在线放松小游戏：</p><ul><li><a href="/game/runner/" style="color:black;">病毒快跑</a></li><li><a href="/game/snake/" style="color:black;">贪吃蛇</a></li><li><a href="/game/pappu-pakia/" style="color:black;">Pappu Pakia</a></li><li><a href="/game/maze/" style="color:black;">走迷宫</a></li></ul><p><strong>开源代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">病毒快跑：https:&#x2F;&#x2F;github.com&#x2F;wayou&#x2F;t-rex-runner</span><br><span class="line">贪吃蛇：https:&#x2F;&#x2F;github.com&#x2F;xurxodiz&#x2F;snake</span><br><span class="line">Pappu Pakia：https:&#x2F;&#x2F;github.com&#x2F;udacity&#x2F;pappu-pakia</span><br><span class="line">走迷宫：https:&#x2F;&#x2F;github.com&#x2F;knightyun&#x2F;maze-game</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ABAQUS的大变形有限元RITSS方法之贯入结果</title>
      <link href="/post/abaqus-1-ritss-1/"/>
      <url>/post/abaqus-1-ritss-1/</url>
      
        <content type="html"><![CDATA[<div style="display: flex; justify-content: center;"><video width="640" height="360" controls controlslist="nodownload">  <source src="/post/abaqus-1-ritss-1/1.mp4" type="video/mp4">  Your browser does not support the video tag.</video></div><p>大变形有限元分析网格重剖分和插值技术（Remeshing and Interpolation Technique with Small Strain，简称RITSS）是基于传统小变形有限元发展起来的，可用于二维和三维分析。</p><p>基于ABAQUS大变形有限元RITSS分析的球型贯入仪从土体表面连续贯入：</p><div style="display: flex; justify-content: center;"><video width="640" height="360" controls controlslist="nodownload">  <source src="/post/abaqus-1-ritss-1/2.mp4" type="video/mp4">  Your browser does not support the video tag.</video></div><p>ABAQUS/RITSS系列教程：</p><ul><li><a href="/post/abaqus-1-ritss-01/">基于ABAQUS的大变形有限元RITSS方法教程（一）基础知识</a></li><li><a href="/post/abaqus-1-ritss-02/">基于ABAQUS的大变形有限元RITSS方法教程（二）自动化建模及RITSS实现</a></li><li><a href="/post/abaqus-1-ritss-03/">基于ABAQUS的大变形有限元RITSS方法教程（三）例子：贯入仪在土中深埋贯入</a></li><li><a href="/post/abaqus-1-ritss-04/">基于ABAQUS的大变形有限元RITSS方法教程（四）例子：管道从土体表面连续贯入</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数值计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABAQUS </tag>
            
            <tag> RITSS </tag>
            
            <tag> 探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022珠江口-南海西部海洋地质和水文科考任务</title>
      <link href="/post/experience-1/"/>
      <url>/post/experience-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>搭乘中科院南海所“实验3”科考船在珠江口-南海西部进行了为期约一个月的地质和水文科考任务，主要包括地质采样（重力式柱状取样器、重力式箱式取样器）、地质勘探（球型贯入仪、十字板等）、CTD采水等</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/experience-1/0.jpg" alt="0"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/experience-1/1.jpg" alt="1"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/experience-1/2.png" alt="2"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/experience-1/3.jpg" alt="3"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/experience-1/4.jpg" alt="4"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/experience-1/5.jpg" alt="5"></p>]]></content>
      
      
      <categories>
          
          <category> 经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B哥音乐存档</title>
      <link href="/post/ent-1-lizhi-5/"/>
      <url>/post/ent-1-lizhi-5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>歌曲地址（复制下载即可）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;108个关键词&#x2F;倒影.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;108个关键词&#x2F;尽头.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;108个关键词&#x2F;山阴路的夏天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;108个关键词&#x2F;忽然.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;108个关键词&#x2F;董卓瑶.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;108个关键词&#x2F;阿兰.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;108个关键词&#x2F;青春.flac</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;1701&#x2F;不多.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;1701&#x2F;大象.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;1701&#x2F;好威武支持有希望.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;1701&#x2F;定西.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;1701&#x2F;方式.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;1701&#x2F;热河.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;1701&#x2F;看见.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;1701&#x2F;鼠说.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;8&#x2F;Hey Jude.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;8&#x2F;兰花草.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;8&#x2F;小螺号.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;8&#x2F;数鸭子.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;8&#x2F;朋友越多越快乐.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;8&#x2F;歌声与微笑.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;8&#x2F;蜗牛与黄鹂鸟.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;8&#x2F;送别.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;8&#x2F;采蘑菇的小姑娘.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;F&#x2F;下雨.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;F&#x2F;你的早晨.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;F&#x2F;女神.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;F&#x2F;寻找.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;F&#x2F;尽头.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;F&#x2F;山阴路的夏天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;F&#x2F;日.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;F&#x2F;杭州.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;F&#x2F;门.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;1990的春天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;Z结尾.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;关于郑州的记忆.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;和你在一起.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;喀纳斯.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;天空之城.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;女神.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;她.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;家乡.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;寻找.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;尽头.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;我们不能失去信仰.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;斜.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;杭州.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;海的女儿.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;离婚.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;秋天的老狼.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;红色气球.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;结婚.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;翁庆年的六英镑.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;苍井空.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;被禁忌的游戏.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;门.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;Imagine-2011&#x2F;青春.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;io&#x2F;墙上的向日葵.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;io&#x2F;妈妈.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;io&#x2F;定西.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;io&#x2F;山阴路的夏天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;io&#x2F;方式.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;io&#x2F;来了.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;io&#x2F;杭州.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;io&#x2F;这个世界会好吗.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;io&#x2F;铅笔.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;他们.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;倒影.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;冬妮娅.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;听妈妈讲过去的事情.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;天空之城.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;妈妈.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;家乡.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;广场.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;恋恋风尘.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;意味.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;春末的南方城市.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;来了.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;来自我心.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;狐狸.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;结婚.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;苍井空.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;董卓瑶.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;虎口脱险.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;被禁忌的游戏.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;达摩流浪者.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;这个世界会好吗.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;陀螺.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;青春.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;鸟语.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;鸵鸟.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;二零零九年十月十六日事件&#x2F;黑色信封.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;你好，郑州&#x2F;关于郑州的记忆.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;你好，郑州&#x2F;墙上的向日葵.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;你好，郑州&#x2F;夜.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;你好，郑州&#x2F;她.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;你好，郑州&#x2F;带亲.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;你好，郑州&#x2F;忽然.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;你好，郑州&#x2F;秋天的老狼.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;你好，郑州&#x2F;路.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;你好，郑州&#x2F;铅笔.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;你好，郑州&#x2F;铅笔(吉松浩版).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;动静&#x2F;你的早晨.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;动静&#x2F;卡夫卡.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;动静&#x2F;和你在一起.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;动静&#x2F;墙上的向日葵.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;动静&#x2F;定西.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;动静&#x2F;尽头.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;动静&#x2F;忽然.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;动静&#x2F;普希金.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;动静&#x2F;这个世界会好吗.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;1990年的春天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;下雨.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;和你在一起.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;墙上的向日葵.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;妈妈.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;山阴路的夏天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;意味.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;斜.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;春末的南方城市.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;来了.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;离婚.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;秋天的老狼.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;翁庆年的六英镑.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;董卓瑶.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;被禁忌的游戏.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;这个世界会好吗.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;铅笔.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;门.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;勾三搭四&#x2F;黑色信封.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;关于郑州的记忆.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;大象.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;定西.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;山阴路的夏天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;春末的南方城市.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;杭州.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;热河.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;结婚.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;这个世界会好吗.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;鸵鸟.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;黑色信封.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;北京不插电&#x2F;鼠说.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;在每一条伤心的应天大街上&#x2F;一个夜晚.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;在每一条伤心的应天大街上&#x2F;一头偶像.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;在每一条伤心的应天大街上&#x2F;你好明天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;在每一条伤心的应天大街上&#x2F;克兰河.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;在每一条伤心的应天大街上&#x2F;哦吼.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;在每一条伤心的应天大街上&#x2F;在每一条伤心的应天大街上.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;在每一条伤心的应天大街上&#x2F;彩色派对.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;在每一条伤心的应天大街上&#x2F;死人.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;和你在一起.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;回答.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;墙上的向日葵.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;大象.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;定西.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;尽头.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;序曲.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;春末的南方城市.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;杭州.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;铅笔.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;门.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;家&#x2F;黑色信封.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;九月.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;他们.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;卡夫卡.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;和你在一起.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;想起了他.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;春末的南方城市.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;暧昧.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;月亮代表我的心.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;来了.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;红色气球.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;董卓瑶.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;被禁忌的游戏.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;这个世界会好吗.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;阿兰.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;青春.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;工体东路没有人&#x2F;黑色信封.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;地方 (2015动静版).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;广场.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;广场（108关键词）.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;广场（2009 我们也爱南京）.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;广场（2011 Imagine）.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;广场（2013 108关键词）.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;广场（2014 io）.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;广场（B&amp;B专辑）.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;广场（原版）.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;广场（工体东路没有人）.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;广场（热门华语271）.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;广场（疆进酒）.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;时光飘散成烟 - 广场-在新疆和张玮玮.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;广场合集&#x2F;时光飘散成烟 - 广场（原版）(2).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我们也爱南京&#x2F;1990年的春天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我们也爱南京&#x2F;他们、新年好.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我们也爱南京&#x2F;关于郑州的记忆.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我们也爱南京&#x2F;她、鹿港小镇.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我们也爱南京&#x2F;开场.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我们也爱南京&#x2F;春末的南方城市.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我们也爱南京&#x2F;翁庆年的六英镑.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;1990年的春天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;倒影.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;再见.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;冬妮娅.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;听妈妈讲那过去的事情.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;在那遥远的地方.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;天空之城.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;家乡.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;思念观世音.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;意味.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;爱.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;米店.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;结婚.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;美丽的梭罗河.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;苍井空.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;我爱南京&#x2F;鸵鸟.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;梵高先生&#x2F;你离开了南京，从此没有人和我说话.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;梵高先生&#x2F;广场.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;梵高先生&#x2F;想起了她.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;梵高先生&#x2F;斜.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;梵高先生&#x2F;春末的南方城市.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;梵高先生&#x2F;暧昧.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;梵高先生&#x2F;来了.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;梵高先生&#x2F;梵高先生.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;梵高先生&#x2F;董卓瑶.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;和你在一起.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;回答.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;墙上的向日葵.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;大象.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;定西.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;尽头.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;序曲.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;春末的南方城市.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;杭州.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;铅笔.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;门.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐&#x2F;黑色信封.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐II&#x2F;一头偶像 (相信未来版).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐II&#x2F;你好明天 (相信未来版).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐II&#x2F;哦吼 (相信未来版).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐II&#x2F;天空之城 (相信未来版).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐II&#x2F;家乡 (相信未来版).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐II&#x2F;寻找 (相信未来版).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐II&#x2F;山阴路的夏天 (相信未来版).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐II&#x2F;相信未来序曲 (乐曲).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;电声与管弦乐II&#x2F;这个世界会好吗 (相信未来版).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;看见&#x2F;下雨.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;看见&#x2F;你离开了南京，从此没有人和我说话.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;看见&#x2F;春末的南方城市.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;看见&#x2F;梵高先生.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;看见&#x2F;热河.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;看见&#x2F;看见.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;看见&#x2F;离婚.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;看见&#x2F;苍井空.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;看见&#x2F;董卓瑶.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;看见&#x2F;黑色信封.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;被禁忌的游戏&#x2F;卡夫卡.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;被禁忌的游戏&#x2F;欢愉.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;被禁忌的游戏&#x2F;离婚.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;被禁忌的游戏&#x2F;红色气球.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;被禁忌的游戏&#x2F;罗庄的冬天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;被禁忌的游戏&#x2F;被禁忌的游戏.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;被禁忌的游戏&#x2F;阿兰.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;被禁忌的游戏&#x2F;黑色信封.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;这个世界会好吗&#x2F;交河.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;这个世界会好吗&#x2F;人民不需要自由.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;这个世界会好吗&#x2F;他们.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;这个世界会好吗&#x2F;和你在一起.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;这个世界会好吗&#x2F;喀纳斯.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;这个世界会好吗&#x2F;妈妈.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;这个世界会好吗&#x2F;我们不能失去信仰—献给刘艺.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;这个世界会好吗&#x2F;李志- 这个世界会好吗.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;这个世界会好吗&#x2F;海的女儿.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;这个世界会好吗&#x2F;翁庆年的六英镑.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;一个夜晚---李志.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;两只HipHop山羊织毛衣.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;妈妈.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;帐号被人注销了 - 《一起摇摆》 李志团队.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;撒娇 - 在劫难逃.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;撒娇 - 虎口脱险.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;李志-红色气球 (2009现场版).mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;李志,卡列宁 - 突如其来的夏天.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;李志,梁颖 - 虎口脱险.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;痛并快乐着.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;老钟 我和你在一起.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;肖晨,陈小二 - 酒吧叙事体.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;英俊的海 - 《公路之光》丨李志.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;谁他妈没织过毛衣.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;这个世界会好吗2015.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;邵夷贝,黄昏.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;阿兰 2012.12.31.mp3</span><br><span class="line">https:&#x2F;&#x2F;testingcf.jsdelivr.net&#x2F;gh&#x2F;nj-lizhi&#x2F;song@main&#x2F;audio&#x2F;零碎&#x2F;鹿港小镇 (Live).mp3</span><br></pre></td></tr></table></figure><p>B哥演唱会视频：</p><ul><li><a href="/post/ent-1-lizhi-1/">B哥2009我爱南京跨年演唱会</a></li><li><a href="/post/ent-1-lizhi-2/">B哥2014 IO跨年演唱会</a></li><li><a href="/post/ent-1-lizhi-3/">B哥2015看见北京站直播实录</a></li><li><a href="/post/ent-1-lizhi-4/">B哥2018洗心革面跨年演唱会</a></li></ul><p>歌曲存档：<a href="https://github.com/nj-lizhi" target="_blank" rel="noopener">https://github.com/nj-lizhi</a></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 歌曲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B哥2018洗心革面跨年演唱会</title>
      <link href="/post/ent-1-lizhi-4/"/>
      <url>/post/ent-1-lizhi-4/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><div class="video-container">  <!-- 引入 hls.js 库 -->  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>  <!-- 创建一个 video 元素 -->  <video id="video4" controls></video>  <script>    // 获取 video 元素    var video = document.getElementById("video4");    // 创建一个 hls 实例    var hls = new Hls();    // 加载视频源    hls.loadSource(      "https://testingcf.jsdelivr.net/gh/nj-lizhi/kn-2018-xxgm@main/video/roadmap.js"    );    // 绑定视频元素    hls.attachMedia(video);  </script>  <p>B哥2018洗心革面跨年演唱会</p></div><style>  /* 选择所有的 video 元素 */  video {    /* 设置宽度为 100% */    width: 100%;  }</style><p>目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">0:10 意味</span><br><span class="line">6:01 鸵鸟</span><br><span class="line">12:24 墙上的向日葵</span><br><span class="line">1:37:23 关于郑州的记忆</span><br><span class="line">1:43:37 董卓瑶</span><br><span class="line">1:48:01 春季末的南方城市</span><br><span class="line">1:57:38 一个夜晚</span><br><span class="line">2:04:44 死人</span><br><span class="line">2:10:41 路</span><br><span class="line">2:14:30 方式</span><br><span class="line">2:51:23 你好明天</span><br><span class="line">2:56:40 不多</span><br><span class="line">3:00:22 杭州</span><br><span class="line">3:04:00 被禁忌的游戏</span><br><span class="line">3:09:31 哦吼</span><br><span class="line">3:19:00 黑色信封</span><br><span class="line">3:26:11 寻找</span><br><span class="line">3:29:50 忽然</span><br><span class="line">3:33:11 热河</span><br><span class="line">4:56:40 大象</span><br><span class="line">5:02:52 门</span><br></pre></td></tr></table></figure></p><p>B哥演唱会视频：</p><ul><li><a href="/post/ent-1-lizhi-1/">B哥2009我爱南京跨年演唱会</a></li><li><a href="/post/ent-1-lizhi-2/">B哥2014 IO跨年演唱会</a></li><li><a href="/post/ent-1-lizhi-3/">B哥2015看见北京站直播实录</a></li><li><a href="/post/ent-1-lizhi-4/">B哥2018洗心革面跨年演唱会</a></li></ul><p>视频来源：<a href="https://github.com/nj-lizhi" target="_blank" rel="noopener">https://github.com/nj-lizhi</a></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 歌曲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B哥2015看见北京站直播实录</title>
      <link href="/post/ent-1-lizhi-3/"/>
      <url>/post/ent-1-lizhi-3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><div class="video-container">  <!-- 引入 hls.js 库 -->  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>  <!-- 创建一个 video 元素 -->  <video id="video3" controls></video>  <script>    // 获取 video 元素    var video = document.getElementById("video3");    // 创建一个 hls 实例    var hls = new Hls();    // 加载视频源    hls.loadSource(      "https://testingcf.jsdelivr.net/gh/nj-lizhi/kn-2015-kj@main/video/roadmap.js"    );    // 绑定视频元素    hls.attachMedia(video);  </script>  <p>B哥2015看见北京站直播实录</p></div><style>  /* 选择所有的 video 元素 */  video {    /* 设置宽度为 100% */    width: 100%;  }</style><p>目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">00:00  开场 Intro</span><br><span class="line">00:48  墙上的向日葵 Sunflower On The Wall</span><br><span class="line">07:21  黑色信封 Black Envelop</span><br><span class="line">12:10  定西 Dingxi</span><br><span class="line">17:21  被禁忌的游戏 The Forbidden Game</span><br><span class="line">23:06  这个世界会好吗 Has Man A Future?</span><br><span class="line">28:19  董卓瑤 Ms Dong</span><br><span class="line">33:04  妈妈 Mama</span><br><span class="line">41:54  爱的箴言 - 老狼</span><br><span class="line">44:14  Wish You Were Here - 老狼</span><br><span class="line">49:41  在劫难逃 - 老狼</span><br><span class="line">01:06:51  老狼闲谈</span><br><span class="line">01:09:44  和你在一起 To Be With You</span><br><span class="line">01:14:16  离婚 Divorce</span><br><span class="line">01:19:04  春末的南方城市 A Southern City In A Late Spring Day</span><br><span class="line">01:23:27  关于郑州的记忆 Memory About Zhengzhou</span><br><span class="line">01:27:50  热河 Re He Road</span><br><span class="line">01:36:04  下雨 Raining</span><br><span class="line">01:41:45  杭州 Hangzhou</span><br><span class="line">01:46:09  鸵鸟 Ostrich</span><br><span class="line">01:49:27  天空之城 Sky City</span><br><span class="line">01:53:06  来了 It Has Come</span><br><span class="line">01:57:47  山阴路的夏天 Nanjing Summer Day</span><br><span class="line">02:03:17  看见 Seen</span><br><span class="line">02:07:43  结尾 成员介绍 End</span><br></pre></td></tr></table></figure></p><p>B哥演唱会视频：</p><ul><li><a href="/post/ent-1-lizhi-1/">B哥2009我爱南京跨年演唱会</a></li><li><a href="/post/ent-1-lizhi-2/">B哥2014 IO跨年演唱会</a></li><li><a href="/post/ent-1-lizhi-3/">B哥2015看见北京站直播实录</a></li><li><a href="/post/ent-1-lizhi-4/">B哥2018洗心革面跨年演唱会</a></li></ul><p>视频来源：<a href="https://github.com/nj-lizhi" target="_blank" rel="noopener">https://github.com/nj-lizhi</a></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 歌曲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B哥2014 IO跨年演唱会</title>
      <link href="/post/ent-1-lizhi-2/"/>
      <url>/post/ent-1-lizhi-2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><div class="video-container">  <!-- 引入 hls.js 库 -->  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>  <!-- 创建一个 video 元素 -->  <video id="video2" controls></video>  <script>    // 获取 video 元素    var video = document.getElementById("video2");    // 创建一个 hls 实例    var hls = new Hls();    // 加载视频源    hls.loadSource(      "https://testingcf.jsdelivr.net/gh/nj-lizhi/kn-2014-io@main/video/roadmap.js"    );    // 绑定视频元素    hls.attachMedia(video);  </script>  <p>B哥2014 IO跨年演唱会</p></div><style>  /* 选择所有的 video 元素 */  video {    /* 设置宽度为 100% */    width: 100%;  }</style><p>目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">0:47      杭州</span><br><span class="line">4:14      关于郑州的记忆</span><br><span class="line">8:48      墙上的向日葵</span><br><span class="line">16:27    黑色信封</span><br><span class="line">21:31    春末的南方城市</span><br><span class="line">25:44    被禁忌的游戏 </span><br><span class="line">31:53    铅笔</span><br><span class="line">38:05    来了</span><br><span class="line">44:37    下雨</span><br><span class="line">49:13    董卓瑶</span><br><span class="line">53:33    忽然</span><br><span class="line">56:39    这个世界会好吗</span><br><span class="line">1:01:15 妈妈</span><br><span class="line">1:09:34 大象</span><br><span class="line">1:14:56 鼠说</span><br><span class="line">1:20:11 定西</span><br><span class="line">1:25:25 看见</span><br><span class="line">1:29:42 不多</span><br><span class="line">1:33:51 方式</span><br><span class="line">1:38:06 热河</span><br><span class="line">1:52:14 和你在一起</span><br><span class="line">1:56:12 离婚</span><br><span class="line">2:01:25 秋天的老狼</span><br><span class="line">2:08:19 鸵鸟</span><br><span class="line">2:11:48 天空之城</span><br><span class="line">2:15:19 我们不能失去信仰</span><br><span class="line">2:18:35 山阴路的夏天</span><br><span class="line">2:23:49 你离开了南京从此没人和我说话</span><br></pre></td></tr></table></figure></p><p>B哥演唱会视频：</p><ul><li><a href="/post/ent-1-lizhi-1/">B哥2009我爱南京跨年演唱会</a></li><li><a href="/post/ent-1-lizhi-2/">B哥2014 IO跨年演唱会</a></li><li><a href="/post/ent-1-lizhi-3/">B哥2015看见北京站直播实录</a></li><li><a href="/post/ent-1-lizhi-4/">B哥2018洗心革面跨年演唱会</a></li></ul><p>视频来源：<a href="https://github.com/nj-lizhi" target="_blank" rel="noopener">https://github.com/nj-lizhi</a></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 歌曲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B哥2009我爱南京跨年演唱会</title>
      <link href="/post/ent-1-lizhi-1/"/>
      <url>/post/ent-1-lizhi-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><div class="video-container">  <!-- 引入 hls.js 库 -->  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>  <!-- 创建一个 video 元素 -->  <video id="video1" controls></video>  <script>    // 获取 video 元素    var video = document.getElementById("video1");    // 创建一个 hls 实例    var hls = new Hls();    // 加载视频源    hls.loadSource(      "https://testingcf.jsdelivr.net/gh/nj-lizhi/kn-2009-wanj@main/video/roadmap.js"    );    // 绑定视频元素    hls.attachMedia(video);  </script>  <p> B哥2009我爱南京跨年演唱会</p></div><style>  /* 选择所有的 video 元素 */  video {    /* 设置宽度为 100% */    width: 100%;  }</style><p>目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1:54 黑色信封</span><br><span class="line">7:14 董卓瑶</span><br><span class="line">10:05 春末的南方城市</span><br><span class="line">14:40 来了</span><br><span class="line">21:36 青春</span><br><span class="line">24:16 他们</span><br><span class="line">29:03 被禁忌的游戏</span><br><span class="line">33:42 这个世界会好吗</span><br><span class="line">38:14 妈妈</span><br><span class="line">42:08 (讲话)</span><br><span class="line">44:57 听妈妈讲那过去的故事 - 李志 汤臣</span><br><span class="line">47:40 陀螺 - 万晓利</span><br><span class="line">53:35 鸟语 - 万晓利</span><br><span class="line">1:00:47 狐狸 - 万晓利</span><br><span class="line">1:06:11 达摩流浪者 - 万晓利</span><br><span class="line">1:10:52 结婚 - 李志 万晓利 老狼</span><br><span class="line">1:16:48 来自我心 - 老狼 万晓利</span><br><span class="line">1:21:06 弄错的车站 - 老狼</span><br><span class="line">1:25:13 虎口脱险 - 老狼</span><br><span class="line">1:30:55 恋恋风尘 - 老狼</span><br><span class="line">1:35:41 (感谢)</span><br><span class="line">1:38:28 倒影</span><br><span class="line">1:41:45 鸵鸟</span><br><span class="line">1:46:22 天空之城</span><br><span class="line">1:50:12 意味(不知道为什么直接跳转了)</span><br><span class="line">1:52:41 家乡</span><br><span class="line">1:57:46 1990年的春天</span><br><span class="line">1:02:49 冬妮娅</span><br><span class="line">2:06:26 (回忆)</span><br></pre></td></tr></table></figure></p><p>B哥演唱会视频：</p><ul><li><a href="/post/ent-1-lizhi-1/">B哥2009我爱南京跨年演唱会</a></li><li><a href="/post/ent-1-lizhi-2/">B哥2014 IO跨年演唱会</a></li><li><a href="/post/ent-1-lizhi-3/">B哥2015看见北京站直播实录</a></li><li><a href="/post/ent-1-lizhi-4/">B哥2018洗心革面跨年演唱会</a></li></ul><p>视频来源：<a href="https://github.com/nj-lizhi" target="_blank" rel="noopener">https://github.com/nj-lizhi</a></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 歌曲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python系列文档</title>
      <link href="/post/py-1/"/>
      <url>/post/py-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><a href="/post/ai-0-ml-2/#2-1-Python基础语法">（一）Python基础语法</a></p><ul><li><a href="/post/ai-0-ml-2/#2-1-1-变量和数据类型">变量和数据类型</a></li><li><a href="/post/ai-0-ml-2/#2-1-2-运算符和表达式">运算符和表达式</a></li><li><a href="/post/ai-0-ml-2/#2-1-3-控制流">控制流</a></li><li><a href="/post/ai-0-ml-2/#2-1-4-函数和模块">函数和模块</a></li></ul><p><a href="/post/ai-0-ml-2/#2-2-Numpy工具包简介及基础">（二）Numpy</a></p><ul><li><a href="/post/ai-0-ml-2/#2-2-1-导入Numpy">导入Numpy</a></li><li><a href="/post/ai-0-ml-2/#2-2-2-创建数组">创建数组</a></li><li><a href="/post/ai-0-ml-2/#2-2-3-数组的索引和切片">数组的索引和切片</a></li></ul><p><a href="/post/ai-0-ml-2/#2-3-Pandas工具包简介及基础">（三）Pandas</a></p><ul><li><a href="/post/ai-0-ml-2/#2-3-1-导入Pandas">导入Pandas</a></li><li><a href="/post/ai-0-ml-2/#2-3-2-创建Series">创建Series</a></li><li><a href="/post/ai-0-ml-2/#2-3-3-创建DataFrame">创建DataFrame</a></li></ul><p><a href="/post/ai-0-ml-2/#2-4-Scipy工具包简介及基础">（四）Scipy</a></p><ul><li><a href="/post/ai-0-ml-2/#2-6-1-导入Sklearn">导入Scipy</a></li><li><a href="/post/ai-0-ml-2/#2-4-2-数值积分">数值积分</a></li><li><a href="/post/ai-0-ml-2/#2-4-3-最优化">最优化</a></li></ul><p><a href="/post/ai-0-ml-2/#2-5-Matplotlib工具包简介及基础">（五）Matplotlib</a></p><ul><li><a href="/post/ai-0-ml-2/#2-5-1-导入Matplotlib">导入Matplotlib</a></li><li><a href="/post/ai-0-ml-2/#2-5-2-绘制折线图">绘制折线图</a></li><li><a href="/post/ai-0-ml-2/#2-5-3-绘制散点图">绘制散点图</a></li></ul><p><a href="/post/ai-0-ml-2/#2-6-Sklearn工具包简介及基础">（六）Sklearn</a></p><ul><li><a href="/post/ai-0-ml-2/#2-6-1-导入Sklearn">导入Sklearn</a></li><li><a href="/post/ai-0-ml-2/#2-6-2-加载数据集">加载数据集</a></li><li><a href="/post/ai-0-ml-2/#2-6-3-训练和测试模型">训练和测试模型</a></li></ul><p><a href="/post/ai-0-ml-2/#2-7-Keras工具包简介及基础">（七）Keras</a></p><ul><li><a href="/post/ai-0-ml-2/#2-7-Keras工具包简介及基础">导入keras</a></li><li><a href="/post/ai-0-ml-2/#2-7-Keras工具包简介及基础">创建神经网络</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABAQUS/UINTER子程序定义结构与粘土的粘性接触</title>
      <link href="/post/abaqus-2-nim/"/>
      <url>/post/abaqus-2-nim/</url>
      
        <content type="html"><![CDATA[<p>使用ABAQUSS/UINTER子程序定义的结构（如桩、管道、锚、贯入仪等）与粘土的<strong>粘性接触</strong>，可以模拟结构与粘土之间的粘性接触行为。</p><h2 id="（1）法向粘性"><a href="#（1）法向粘性" class="headerlink" title="（1）法向粘性"></a>（1）法向粘性</h2><p>如下图所示，当结构与粘土接触时受到压力；当接触面受拉时，受到拉力；当结构与土完全分离时，不受力。可用于结构物在海洋粘土的模拟。</p><div style="display: flex; justify-content: center;"><video width="640" height="360" controls controlslist="nodownload">  <source src="/post/abaqus-2-nim/1.mp4" type="video/mp4">  Your browser does not support the video tag.</video></div><h2 id="（2）切向粘性"><a href="#（2）切向粘性" class="headerlink" title="（2）切向粘性"></a>（2）切向粘性</h2><p><strong>参考论文：</strong><a href="https://www.sciencedirect.com/science/article/abs/pii/S0266352X21003256" target="_blank" rel="noopener">Liu W, Tian Y, Cassidy M J. An interface to numerically model undrained soil-structure interactions[J]. Computers and Geotechnics, 2021, 138: 104327.</a>  </p><p>关于切向行为，参考文献使用<code>FRIC</code>子程序实现，本文采用<code>UINTER</code>子程序实现。</p><p>切向粘性行为的验证对比如下图，可以看到与参考文献的结果基本一致。</p><h3 id="案例1：刚体滑动"><a href="#案例1：刚体滑动" class="headerlink" title="案例1：刚体滑动"></a>案例1：刚体滑动</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/abaqus-2-nim/2.png" alt="abaqus刚体滑动"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/abaqus-2-nim/3.png" alt="UINTER子程序定义结构与粘土粘性接触"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/abaqus-2-nim/4.png" alt="UINTER子程序定义结构与粘土粘性接触"></p><h3 id="案例2：T-bar深埋贯入"><a href="#案例2：T-bar深埋贯入" class="headerlink" title="案例2：T-bar深埋贯入"></a>案例2：T-bar深埋贯入</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/abaqus-2-nim/6.png" alt="T-bar大变形贯入"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/abaqus-2-nim/5.png" alt="T-bar大变形贯入"></p>]]></content>
      
      
      <categories>
          
          <category> 数值计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABAQUS </tag>
            
            <tag> 探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一本余海岁的《岩土塑性理论》英文原版和中译本</title>
      <link href="/post/share-0-geobook-2/"/>
      <url>/post/share-0-geobook-2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>最近读过的一本比较好的岩土工程方面的书籍，推荐阅读英文原版，比较容易理解。同时也提供周国庆、刘恩龙和商翔宇的中译本，便于对照学习。  </p><blockquote><p>本书对从早期经典到新近发展的岩土介质塑性理论及相应分析方法进行了全面、深入的总结。首先，介绍了连续介质力学与经典弹塑性理论的基础知识;其次，论述了理想塑性、硬化塑性与临界状态塑性、多重屈服面与边界面塑性、非共轴塑性以及无屈服面塑性等系列非线性岩土材料塑性理论模型:最后，呈现了岩土工程边值问题的系列求解方法，包括弹塑性严格解析、滑移线场极限分析和有限元数值分析等方法及实现要点。</p><p>本书是土木、岩土、机械、采矿、连续介质力学以及关汪规粒材科的化学工程领域内的工程技术人员、研究人员关于塑性理论及分析的一本有益的参考书，也可作为相关领域内研究生和高年级本科生塑性理论课程的教材。</p></blockquote><p>英文原版预览：</p><iframe src="https://cdn.jsdelivr.net/gh/smiler666/Geotechnic-Books/EN/Plasticity%20and%20Geotechnics-2006-Haisui%20Yu.pdf" width="100%" height="888px"></iframe><p>下载地址：</p><ul><li>英文原版：<a href="https://cdn.jsdelivr.net/gh/smiler666/Geotechnic-Books/EN/Plasticity%20and%20Geotechnics-2006-Haisui%20Yu.pdf" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/smiler666/Geotechnic-Books/EN/Plasticity%20and%20Geotechnics-2006-Haisui%20Yu.pdf</a></li><li>中译本（非压缩）：<a href="https://github.com/smiler666/Geotechnic-Books/blob/main/CN/%E5%B2%A9%E5%9C%9F%E5%A1%91%E6%80%A7%E7%90%86%E8%AE%BA-%E4%BD%99%E6%B5%B7%E5%B2%81-%E4%B8%AD%E8%AF%91%E6%9C%AC.pdf" target="_blank" rel="noopener">https://github.com/smiler666/Geotechnic-Books/blob/main/CN/岩土塑性理论-余海岁-中译本.pdf</a></li><li>中译本（压缩）：<a href="https://github.com/smiler666/Geotechnic-Books/blob/main/CN/%E5%B2%A9%E5%9C%9F%E5%A1%91%E6%80%A7%E7%90%86%E8%AE%BA-%E4%BD%99%E6%B5%B7%E5%B2%81-%E4%B8%AD%E8%AF%91%E6%9C%AC(%E5%8E%8B%E7%BC%A9%E7%89%88).pdf" target="_blank" rel="noopener">https://github.com/smiler666/Geotechnic-Books/blob/main/CN/%E5%B2%A9%E5%9C%9F%E5%A1%91%E6%80%A7%E7%90%86%E8%AE%BA-%E4%BD%99%E6%B5%B7%E5%B2%81-%E4%B8%AD%E8%AF%91%E6%9C%AC(%E5%8E%8B%E7%BC%A9%E7%89%88).pdf</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一本郑颖人、龚晓南的 《岩土塑性力学基础》</title>
      <link href="/post/share-0-geobook-1/"/>
      <url>/post/share-0-geobook-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>读过的一本比较好的岩土工程方面的书籍，郑颖人、龚晓南编写的《岩土塑性力学基础》，是比较基础的一本书。</p><blockquote><p>本书系统地介绍和综述了岩土塑性力学基本理论。根据岩土材料的力学特性和变形机理，创建了岩土塑性力学体系。本书内容新，收集了国内外近年来资料和作者的研究成果，反映了当代水平。此外，本书还对应变空间塑性理论，三维空间模型，多重屈服面理论等新的理论课题作了详尽的叙述和研究。<br>全书内容共分九章，前五章介绍了岩土塑性力学基本原理及其预备知识，第六章介绍了国内外一些有影响的岩土实用本构模型，最后三章叙述了针对岩土材料的极限承载力的计算方法。<br>本书可供岩士土建，采矿、铁道、水电及力学等专业科研，设计和教学人员参考，也可作为研究生教材。</p></blockquote><p>书籍预览：</p><iframe src="https://cdn.jsdelivr.net/gh/smiler666/Geotechnic-Books/CN/岩土塑性力学基础--郑颖人%20龚晓南.pdf" width="100%" height="888px"></iframe><p>下载地址：<a href="https://cdn.jsdelivr.net/gh/smiler666/Geotechnic-Books/CN/岩土塑性力学基础--郑颖人%20龚晓南.pdf" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/smiler666/Geotechnic-Books/CN/岩土塑性力学基础—郑颖人%20龚晓南.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（十三）循环神经网路</title>
      <link href="/post/ai-0-ml-13/"/>
      <url>/post/ai-0-ml-13/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第13章：循环神经网路"><a href="#第13章：循环神经网路" class="headerlink" title="第13章：循环神经网路"></a>第13章：循环神经网路</h1><p>循环神经网络（Recurrent Neural Network，RNN）是一类具有短期记忆能力的神经网络，适合用于处理视频、语音、文本等与时序相关的问题。在循环神经网络中，神经元不但可以接收其他神经元的信息，还可以接收自身的信息，形成具有环路的网络结构。循环神经网络的参数学习可以通过随时间反向传播算法来学习，即按照时间的逆序把误差一步步往前传递。而当输入序列比较长时，会产生梯度爆炸或梯度消失问题，这也叫做长期依赖问题。为了解决这个问题，门控机制被引入来改进循环神经网络，也就是长短期记忆网络（LSTM）和门控循环单元（GRU）。</p><h2 id="13-1-基本结构"><a href="#13-1-基本结构" class="headerlink" title="13.1 基本结构"></a>13.1 基本结构</h2><p>循环神经网络可以描述动态时间行为，因为和前馈神经网络（feedforward neural network）接受较特定结构的输入不同，RNN将状态在自身网络中循环传递，因此可以接受更广泛的时间序列结构输入。循环神经网络由输入层、隐藏层和输出层组成，其中隐藏层是循环层，每个隐藏单元都有一个自连接，并且所有隐藏单元共享相同的权重矩阵。</p><p>假设输入序列为 ${\vec x}=(x_1,x_2,…,x_T)$ ，输出序列为 ${\vec y}=(y_1,y_2,…,y_T)$ ，则循环神经网络的运算过程如下：</p><ul><li>对于每个时刻 $t=1,2,…,T$ ，首先计算隐藏状态 ${\vec h}_t$ ，它由当前时刻的输入 $x_t$ 和上一时刻的隐藏状态 ${\vec h}_{t-1}$ 共同决定：</li></ul><script type="math/tex; mode=display">{\vec h}_t=f(U{\vec x}_t+W{\vec h}_{t-1})</script><p>其中 $U$ 和 $W$ 是输入到隐藏和隐藏到隐藏的权重矩阵， $f$ 是一个非线性激活函数，如 $\tanh$ 或 $\mathrm{ReLU}$ 。</p><ul><li>然后根据隐藏状态 ${\vec h}_t$ 计算当前时刻的输出 ${\vec y}_t$ ，它由一个线性变换和一个可选的激活函数或归一化函数组成：</li></ul><script type="math/tex; mode=display">{\vec y}_t=g(V{\vec h}_t)</script><p>其中 $V$ 是隐藏到输出的权重矩阵， $g$ 是一个可选的函数，如 $\mathrm{softmax}$ 或 $\mathrm{sigmoid}$ 。</p><ul><li>最后，根据输出 ${\vec y}_t$ 和真实标签 ${\vec d}_t$ 计算损失函数 $L_t$ ，它可以是交叉熵、均方误差或其他形式：</li></ul><script type="math/tex; mode=display">L_t=L({\vec y}_t,{\vec d}_t)</script><p>循环神经网络的总损失函数是所有时刻的损失函数之和：</p><script type="math/tex; mode=display">L=\sum_{t=1}^T L_t</script><p>循环神经网络的训练目标是通过梯度下降或其他优化算法，找到一组最优的权重矩阵 $U,W,V$ ，使得总损失函数 $L$ 最小化。</p><h2 id="13-2-梯度计算"><a href="#13-2-梯度计算" class="headerlink" title="13.2 梯度计算"></a>13.2 梯度计算</h2><p>循环神经网络的梯度计算需要使用随时间反向传播（Backpropagation Through Time，BPTT）算法，它是一种基于动态规划的方法，可以高效地计算循环神经网络中每个权重矩阵的梯度。BPTT算法的基本思想是，首先按照时间的正序计算每个时刻的隐藏状态和输出，然后按照时间的逆序计算每个时刻的误差和梯度，并将相同权重矩阵的梯度累加起来。</p><p>具体来说，BPTT算法的步骤如下：</p><ul><li>初始化权重矩阵 $U,W,V$ 的梯度为零矩阵： $\Delta U=\Delta W=\Delta V=0$ 。</li><li>对于每个时刻 $t=1,2,…,T$ ，正向传播计算隐藏状态 ${\vec h}_t$ 和输出 ${\vec y}_t$ ：</li></ul><script type="math/tex; mode=display">{\vec h}_t=f(U{\vec x}_t+W{\vec h}_{t-1})</script><script type="math/tex; mode=display">{\vec y}_t=g(V{\vec h}_t)</script><ul><li>对于每个时刻 $t=T,T-1,…,1$ ，反向传播计算误差 $\delta_t$ 和权重矩阵的梯度 $\frac{\partial L}{\partial U},\frac{\partial L}{\partial W},\frac{\partial L}{\partial V}$ ：</li></ul><script type="math/tex; mode=display">\delta_t=\frac{\partial L_t}{\partial {\vec y}_t}g'(V{\vec h}_t)</script><script type="math/tex; mode=display">\frac{\partial L}{\partial V}=\frac{\partial L}{\partial V}+\delta_t{\vec h}_t^T</script><script type="math/tex; mode=display">\Delta V=\Delta V+\frac{\partial L}{\partial V}</script><script type="math/tex; mode=display">\frac{\partial L}{\partial {\vec h}_t}=\delta_tV^T+\frac{\partial L}{\partial {\vec h}_{t+1}}W^T</script><script type="math/tex; mode=display">\frac{\partial L}{\partial U}=\frac{\partial L}{\partial U}+\frac{\partial L}{\partial {\vec h}_t}f'(U{\vec x}_t+W{\vec h}_{t-1}){\vec x}_t^T</script><script type="math/tex; mode=display">\Delta U=\Delta U+\frac{\partial L}{\partial U}</script><script type="math/tex; mode=display">\frac{\partial L}{\partial W}=\frac{\partial L}{\partial W}+\frac{\partial L}{\partial {\vec h}_t}f'(U{\vec x}_t+W{\vec h}_{t-1}){\vec h}_{t-1}^T</script><script type="math/tex; mode=display">\Delta W=\Delta W+\frac{\partial L}{\partial W}</script><ul><li>根据权重矩阵的梯度 $\Delta U,\Delta W,\Delta V$ ，更新权重矩阵 $U,W,V$ ：</li></ul><script type="math/tex; mode=display">U=U-\alpha \Delta U</script><script type="math/tex; mode=display">W=W-\alpha \Delta W</script><script type="math/tex; mode=display">V=V-\alpha \Delta V</script><p>其中 $\alpha$ 是学习率，控制更新的步长。</p><h2 id="13-3-应用实例"><a href="#13-3-应用实例" class="headerlink" title="13.3 应用实例"></a>13.3 应用实例</h2><p>循环神经网络可以应用于多种与时序相关的任务，例如语言模型、机器翻译、语音识别、文本生成等。在这里，以一个简单的文本生成任务为例，介绍如何使用Keras搭建一个循环神经网络，并用它来生成一些有趣的文本。</p><h3 id="13-3-1-数据准备"><a href="#13-3-1-数据准备" class="headerlink" title="13.3.1 数据准备"></a>13.3.1 数据准备</h3><p>文本生成的数据可以是任何有意义的文本，例如小说、新闻、歌词等。在这里，使用《爱丽丝梦游仙境》（Alice’s Adventures in Wonderland）这本经典的童话作为数据源，它由英国作家刘易斯·卡罗尔（Lewis Carroll）于1865年出版，讲述了一个名叫爱丽丝的小女孩跟随一只白兔进入了一个奇幻的世界，并遇到了各种奇怪的人和事的故事。可以从网上下载这本书的英文版文本文件，并用Python读取它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, LSTM</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> RMSprop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文本文件</span></span><br><span class="line">filename = <span class="string">"alice.txt"</span></span><br><span class="line"><span class="keyword">with</span> open(filename, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read().lower()</span><br><span class="line">print(<span class="string">"Corpus length:"</span>, len(text))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Corpus length: 144395</span><br></pre></td></tr></table></figure><p>可以看到，这本书的文本长度大约有14万多个字符。为了训练循环神经网络，需要将文本切分为固定长度的序列，并将每个字符转换为一个整数索引。可以用Keras提供的一个工具类来实现这个功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置序列长度和滑动步长</span></span><br><span class="line">maxlen = <span class="number">40</span> <span class="comment"># 每个序列包含40个字符</span></span><br><span class="line">step = <span class="number">3</span> <span class="comment"># 每隔3个字符取一个序列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建字符到索引的映射字典</span></span><br><span class="line">chars = sorted(list(set(text))) <span class="comment"># 对文本中出现的所有字符去重并排序</span></span><br><span class="line">print(<span class="string">"Total chars:"</span>, len(chars)) <span class="comment"># 统计字符的种类数</span></span><br><span class="line">char_indices = dict((char, chars.index(char)) <span class="keyword">for</span> char <span class="keyword">in</span> chars) <span class="comment"># 生成字符到索引的映射</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分文本并转换为索引</span></span><br><span class="line">sentences = [] <span class="comment"># 存储切分后的序列</span></span><br><span class="line">next_chars = [] <span class="comment"># 存储每个序列之后的下一个字符</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(text) - maxlen, step): <span class="comment"># 从文本的第一个字符开始，每隔step个字符，取长度为maxlen的序列，直到文本结束</span></span><br><span class="line">    sentences.append(text[i: i + maxlen]) <span class="comment"># 取出一个序列并存入sentences列表</span></span><br><span class="line">    next_chars.append(text[i + maxlen]) <span class="comment"># 取出序列后的下一个字符并存入next_chars列表</span></span><br><span class="line">print(<span class="string">"Number of sequences:"</span>, len(sentences)) <span class="comment"># 打印切分后的序列数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符转换为one-hot编码的向量</span></span><br><span class="line">x = np.zeros((len(sentences), maxlen, len(chars)), dtype=np.bool) <span class="comment"># 创建一个形状为(序列数量, 序列长度, 字符种类数)的全零张量，用于存储输入数据</span></span><br><span class="line">y = np.zeros((len(sentences), len(chars)), dtype=np.bool) <span class="comment"># 创建一个形状为(序列数量, 字符种类数)的全零张量，用于存储目标数据（下一个字符）</span></span><br><span class="line"><span class="keyword">for</span> i, sentence <span class="keyword">in</span> enumerate(sentences): <span class="comment">#</span></span><br><span class="line">    <span class="keyword">for</span> t, char <span class="keyword">in</span> enumerate(sentence): <span class="comment"># 遍历每个序列中的每个字符</span></span><br><span class="line">        x[i, t, char_indices[char]] = <span class="number">1</span> <span class="comment"># 将对应位置的元素设为1，表示该字符在该位置出现</span></span><br><span class="line">    y[i, char_indices[next_chars[i]]] = <span class="number">1</span> <span class="comment"># 将对应位置的元素设为1，表示下一个字符是该字符</span></span><br></pre></td></tr></table></figure><h3 id="13-3-2-模型构建"><a href="#13-3-2-模型构建" class="headerlink" title="13.3.2 模型构建"></a>13.3.2 模型构建</h3><p>接下来，使用Keras搭建一个简单的循环神经网络，它由一个LSTM层和一个全连接层组成。LSTM层的作用是学习输入序列中的长期依赖关系，并输出一个固定长度的向量。全连接层的作用是根据LSTM层的输出，预测下一个字符的概率分布。使用softmax激活函数和交叉熵损失函数，以及RMSprop优化器来训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">model = Sequential() <span class="comment"># 创建一个Sequential模型</span></span><br><span class="line">model.add(LSTM(<span class="number">128</span>, input_shape=(maxlen, len(chars)))) <span class="comment"># 添加一个LSTM层，有128个隐藏单元，输入形状为(序列长度, 字符种类数)</span></span><br><span class="line">model.add(Dense(len(chars), activation=<span class="string">"softmax"</span>)) <span class="comment"># 添加一个全连接层，有字符种类数个输出单元，激活函数为softmax</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.compile(loss=<span class="string">"categorical_crossentropy"</span>, optimizer=RMSprop(lr=<span class="number">0.01</span>)) <span class="comment"># 使用交叉熵损失函数和RMSprop优化器，学习率为0.01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看模型结构</span></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Model: &quot;sequential&quot;</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #   </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">lstm (LSTM)                  (None, 128)               98816     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense (Dense)                (None, 57)                7353      </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 106,169</span><br><span class="line">Trainable params: 106,169</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure><p>可以看到，模型有两层，共有10万多个可训练参数。</p><h2 id="13-4-总结"><a href="#13-4-总结" class="headerlink" title="13.4 总结"></a>13.4 总结</h2><ul><li>循环神经网络是一类具有短期记忆能力的神经网络，适合用于处理视频、语音、文本等与时序相关的问题。</li><li>循环神经网络的基本结构由输入层、隐藏层和输出层组成，其中隐藏层是循环层，每个隐藏单元都有一个自连接，并且所有隐藏单元共享相同的权重矩阵。</li><li>循环神经网络的梯度计算需要使用随时间反向传播算法，它是一种基于动态规划的方法，可以高效地计算循环神经网络中每个权重矩阵的梯度。</li><li>循环神经网络可以应用于多种与时序相关的任务，例如语言模型、机器翻译、语音识别、文本生成等。我们以一个简单的文本生成任务为例，介绍了如何使用Keras搭建一个循环神经网络，并用它来生成一些有趣的文本。</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（十二）卷积神经网路</title>
      <link href="/post/ai-0-ml-12/"/>
      <url>/post/ai-0-ml-12/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第12章：卷积神经网路"><a href="#第12章：卷积神经网路" class="headerlink" title="第12章：卷积神经网路"></a>第12章：卷积神经网路</h1><p>卷积神经网络（Convolutional Neural Network, CNN）是一种特殊类型的神经网络，主要用于处理图像和视频等二维数据。相比于传统的人工神经网络，卷积神经网络引入了卷积层和池化层，这使得它能够有效地处理输入数据的局部特征，具有很强的图像处理能力。</p><h2 id="12-1-简介"><a href="#12-1-简介" class="headerlink" title="12.1 简介"></a>12.1 简介</h2><p>卷积神经网络主要包含三个关键的层：卷积层、激活函数和池化层。 </p><ul><li><strong>卷积层（Convolutional Layer）</strong> ：卷积层通过在输入数据上滑动一个或多个卷积核（也称为滤波器或特征检测器），对输入数据进行卷积操作，提取输入数据的局部特征。卷积操作通过对输入数据中的局部区域进行加权求和，得到一个输出值，从而构成了卷积层的输出。卷积层可以通过调整卷积核的大小、步长和填充方式来控制输出特征图的大小和复杂度。 </li><li><strong>激活函数（Activation Function）</strong> ：激活函数在卷积层的输出上引入非线性，使得卷积神经网络能够对复杂的非线性模式进行建模。常用的激活函数有ReLU（Rectified Linear Unit）、sigmoid和tanh等。 </li><li><strong>池化层（Pooling Layer）</strong> ：池化层用于对卷积层的输出进行下采样，减少特征图的尺寸，并保留关键的特征信息。常用的池化方式有最大池化（Max Pooling）和平均池化（Average Pooling）。<h2 id="12-2-例子：图像分类"><a href="#12-2-例子：图像分类" class="headerlink" title="12.2 例子：图像分类"></a>12.2 例子：图像分类</h2></li></ul><p>以图像分类为例，以下是一个简单的卷积神经网络的实现示例，使用Python和Keras库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D, MaxPooling2D, Flatten, Dense</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建卷积神经网络模型</span></span><br><span class="line">model = Sequential()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加第一个卷积层</span></span><br><span class="line">model.add(Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>, input_shape=(<span class="number">64</span>, <span class="number">64</span>, <span class="number">3</span>))) <span class="comment"># 使用32个3x3的卷积核，ReLU激活函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加第一个池化层</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))) <span class="comment"># 使用2x2的最大池化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加第二个卷积层</span></span><br><span class="line">model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>)) <span class="comment"># 使用64个3x3的卷积核，ReLU激活函数</span></span><br><span class="line"><span class="comment"># 添加第二个池化层</span></span><br><span class="line"></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))) <span class="comment"># 使用2x2的最大池化</span></span><br><span class="line"><span class="comment"># 将多维输入转换为一维向量</span></span><br><span class="line"></span><br><span class="line">model.add(Flatten())</span><br><span class="line"><span class="comment"># 添加全连接层</span></span><br><span class="line"></span><br><span class="line">model.add(Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>)) <span class="comment"># 使用128个神经元，ReLU激活函数</span></span><br><span class="line"><span class="comment"># 添加输出层</span></span><br><span class="line"></span><br><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)) <span class="comment"># 使用10个神经元作为输出，使用Softmax激活函数进行分类</span></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line"></span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>, loss=<span class="string">'categorical_crossentropy'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"><span class="comment"># 输出模型结构</span></span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p>以上示例代码中，创建了一个简单的卷积神经网络模型，包含了两个卷积层、两个池化层、一个全连接层和一个输出层。模型使用了ReLU作为激活函数，并通过编译模型指定了优化器、损失函数和评估指标。</p><p>这只是一个简单的例子，实际上卷积神经网络的结构可以根据任务需求和数据特性进行灵活调整，例如调整卷积核的数量、大小和步长，选择不同的激活函数和池化方式，添加或删除层等，以获得更好的性能和准确性。</p><p>请注意，以上示例代码仅供参考，实际应用中还需要根据具体情况进行数据的预处理、模型的训练和验证等步骤。</p><h2 id="12-3-人脸识别"><a href="#12-3-人脸识别" class="headerlink" title="12.3 人脸识别"></a>12.3 人脸识别</h2><ul><li><a href="/post/ai-1-dl-yolov3-mask/">基于Yolo V3+keras实现的口罩识别小demo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（十一）人工神经网络基础</title>
      <link href="/post/ai-0-ml-11/"/>
      <url>/post/ai-0-ml-11/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第11章：人工神经网络基础"><a href="#第11章：人工神经网络基础" class="headerlink" title="第11章：人工神经网络基础"></a>第11章：人工神经网络基础</h1><p>人工神经网络（Artificial Neural Networks，ANN）是一种模仿生物神经网络结构和功能的数学模型，是深度学习的基础。ANN 由输入层、隐藏层和输出层构成，其中隐藏层可以有多层，也就是所谓的深度学习。</p><p>ANN 的基本单元是神经元（Neuron），也称为感知器（Perceptron）。每个神经元接收多个输入信号，然后通过权重调整和激活函数计算，将结果输出给下一层。</p><p>人工神经网络从以下几个方面描述了生物神经系统的基本特征：</p><ul><li>神经元是信息处理的基本单元，它接收来自其他神经元或外部输入的信号，并根据激活函数（activation function）产生输出信号。</li><li>神经元之间通过突触连接，突触具有不同的强度（权重），反映了信号传递的效率。</li><li>神经网络具有层次结构，通常分为输入层、输出层和若干隐藏层，每一层包含若干个神经元，每个神经元只与上一层和下一层的部分或全部神经元相连。</li><li>神经网络具有自适应性，可以通过学习算法（learning algorithm）根据数据或反馈来调整突触权重，从而改善网络的性能。</li></ul><p>激活函数是用于描述神经元如何根据输入信号产生输出信号的函数。常用的激活函数有以下几种：</p><ul><li>S型函数（Sigmoid function），形式为$f(x)=\frac{1}{1+e^{-x}}$，取值范围为$(0,1)$，具有平滑、单调、可微等性质，可以用于表示概率或逻辑值。</li><li>双曲正切函数（Hyperbolic tangent function），形式为$f(x)=\frac{ex-e{-x}}{ex+e{-x}}$，取值范围为$(-1,1)$，也具有平滑、单调、可微等性质，可以用于表示对称或双极性的值。</li><li>线性整流函数（Rectified linear unit function），形式为$f(x)=\max(0,x)$，取值范围为$[0,\infty)$，具有非线性、稀疏、易计算等性质，可以用于表示正值或零值。</li><li>Softmax函数（Softmax function），形式为$f(x_i)=\frac{e{x_i}}{\sum_{j=1}n e^{x_j}}$，其中$x_i$是输入向量中的第$i$个分量，$n$是输入向量的维度，取值范围为$(0,1)$</li></ul><p>神经网络的学习过程主要包括前向传播和反向传播两个步骤。</p><ul><li><strong>前向传播</strong>指的是将输入数据输入到神经网络中，通过多次计算得到最终输出结果的过程。</li><li><strong>反向传播</strong>则是通过最小化损失函数来更新神经网络中的权重，使得输出结果与真实结果更加接近。</li></ul><p>下面是一个简单的例子，用于演示神经网络的基本结构和实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 用于生成随机数 from keras.models import Sequential # 导入顺序模型 from keras.layers import Dense # 导入密集连接层</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一些随机数据，X为100行5列的随机矩阵，y为100行1列的二元随机向量</span></span><br><span class="line">X = np.random.rand(<span class="number">100</span>, <span class="number">5</span>) y = np.random.randint(<span class="number">2</span>, size=(<span class="number">100</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 创建神经网络，使用顺序模型</span></span><br><span class="line">model = Sequential()</span><br><span class="line"><span class="comment"># 添加第一个密集连接层，有10个节点，输入维度为5，激活函数为ReLU</span></span><br><span class="line">model.add(Dense(<span class="number">10</span>, input_dim=<span class="number">5</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line"><span class="comment"># 添加第二个密集连接层，有1个节点，激活函数为sigmoid</span></span><br><span class="line">model.add(Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>))</span><br><span class="line"><span class="comment"># 编译模型，选择二元交叉熵作为损失函数，Adam优化器作为优化器，accuracy作为评价指标</span></span><br><span class="line">model.compile(loss=<span class="string">'binary_crossentropy'</span>, optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"><span class="comment"># 训练模型，将随机数据X,y放入模型中进行训练，迭代10次，每次迭代处理10个样本</span></span><br><span class="line">model.fit(X, y, epochs=<span class="number">10</span>, batch_size=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 评估模型，输出模型在随机数据上的准确率</span></span><br><span class="line">scores = model.evaluate(X, y) <span class="comment"># 返回的scores是一个长度为2的列表，第一个元素为loss，第二个元素为accuracy print("\n%s: %.2f%%" % (model.metrics_names[1], scores[1]*100)) # 输出准确率</span></span><br></pre></td></tr></table></figure><p>在这个例子中，生成了一些随机数据，并用 Keras 来创建了一个包含一个隐藏层和一个输出层的神经网络。其中隐藏层包含 10 个神经元，输入数据有 5 个特征。我们使用了 ReLU 激活函数和 sigmoid 输出函数。接着编译模型，指定损失函数和优化器，然后训练模型，并使用评估函数来评估模型的准确性。</p>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（十）无监督学习之降维</title>
      <link href="/post/ai-0-ml-10/"/>
      <url>/post/ai-0-ml-10/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第10章：无监督学习之降维"><a href="#第10章：无监督学习之降维" class="headerlink" title="第10章：无监督学习之降维"></a>第10章：无监督学习之降维</h1><p>当涉及到机器学习中的无监督学习降维时，常用的方法有主成分分析（PCA）、独立成分分析（ICA）、 t-分布随机近邻嵌入（t-SNE）和自编码器（Autoencoder）等。下面将分别对这些方法进行简单介绍，并给出相应的 Python 代码示例。</p><h2 id="10-1-主成分分析（PCA）"><a href="#10-1-主成分分析（PCA）" class="headerlink" title="10.1 主成分分析（PCA）"></a>10.1 主成分分析（PCA）</h2><h3 id="10-1-1-简介"><a href="#10-1-1-简介" class="headerlink" title="10.1.1 简介"></a>10.1.1 简介</h3><p>主成分分析（Principal Component Analysis，简称 PCA）是一种常用的无监督学习降维方法，通过线性变换将原始高维数据映射到低维空间，使得映射后的数据保留了原始数据中的主要信息。PCA 的核心思想是找到数据中的主成分（即数据中方差最大的方向），然后将数据投影到这些主成分上，从而实现降维。</p><h3 id="10-1-2-算法"><a href="#10-1-2-算法" class="headerlink" title="10.1.2 算法"></a>10.1.2 算法</h3><ol><li>对所有样本进行中心化处理。</li><li>计算样本协方差矩阵。</li><li>对协方差矩阵进行特征值分解。</li><li>选取前k个最大特征值所对应的特征向量作为新的坐标系。</li><li>将原始数据投影到新坐标系中。</li></ol><h3 id="10-1-3-公式"><a href="#10-1-3-公式" class="headerlink" title="10.1.3 公式"></a>10.1.3 公式</h3><ol><li>样本协方差矩阵：$S=\frac{1}{n-1}\sum_{i=1}{n}(x_i-\bar{x})(x_i-\bar{x})T$</li><li>特征值和特征向量：$Sv=\lambda v$</li></ol><h3 id="10-1-4-代码"><a href="#10-1-4-代码" class="headerlink" title="10.1.4 代码"></a>10.1.4 代码</h3><p>假设有一个二维数据集，其中每个样本有两个特征：$x_1$和$x_2$。想要将这个数据集降到一维。下面是Python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成二维数据集</span></span><br><span class="line">X = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中心化处理</span></span><br><span class="line">X_mean = np.mean(X, axis=<span class="number">0</span>)</span><br><span class="line">X_centered = X - X_mean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算协方差矩阵</span></span><br><span class="line">S = np.cov(X_centered.T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征值分解</span></span><br><span class="line">eigenvalues, eigenvectors = np.linalg.eig(S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取最大特征值对应的特征向量作为新坐标系</span></span><br><span class="line">w = eigenvectors[:, np.argmax(eigenvalues)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 投影到新坐标系中</span></span><br><span class="line">X_pca = X_centered.dot(w)</span><br></pre></td></tr></table></figure><p>以下是使用 Scikit-learn 库中的 PCA 类进行 PCA 降维的示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成示例数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">X = np.random.randn(<span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 PCA 模型</span></span><br><span class="line">pca = PCA(n_components=<span class="number">1</span>)  <span class="comment"># 设置降维后的维度为1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数据进行降维</span></span><br><span class="line">X_pca = pca.fit_transform(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制降维后的数据</span></span><br><span class="line">plt.scatter(X_pca, np.zeros_like(X_pca), alpha=<span class="number">0.7</span>)</span><br><span class="line">plt.xlabel(<span class="string">'PC1'</span>)</span><br><span class="line">plt.ylabel(<span class="string">''</span>)</span><br><span class="line">plt.title(<span class="string">'PCA降维示例'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="10-2-独立成分分析（ICA）"><a href="#10-2-独立成分分析（ICA）" class="headerlink" title="10.2 独立成分分析（ICA）"></a>10.2 独立成分分析（ICA）</h2><h3 id="10-2-1-简介"><a href="#10-2-1-简介" class="headerlink" title="10.2.1 简介"></a>10.2.1 简介</h3><p>独立成分分析（Independent Component Analysis，简称 ICA）是一种基于概率统计的无监督学习降维方法，它通过寻找数据中的独立成分（即在概率分布上相互独立的成分）来实现降维。ICA 在信号处理、图像处理等领域中有广泛的应用。</p><h3 id="10-2-2-算法"><a href="#10-2-2-算法" class="headerlink" title="10.2.2 算法"></a>10.2.2 算法</h3><ol><li>对所有样本进行中心化处理。</li><li>随机初始化权重向量。</li><li>对权重向量进行更新，使得输出信号的熵最大化。</li><li>重复步骤3直到收敛。</li></ol><h3 id="10-2-3-公式"><a href="#10-2-3-公式" class="headerlink" title="10.2.3 公式"></a>10.2.3 公式</h3><ol><li>输出信号：$y=As$</li><li>目标函数：$J(w)=\sum_{i=1}{n}(log(cosh(wTx_i)))$</li><li>权重向量更新规则：$w=w+\alpha E[wTx_i*tanh(wTx_i)-g(w)]$</li></ol><h3 id="10-2-4-代码"><a href="#10-2-4-代码" class="headerlink" title="10.2.4 代码"></a>10.2.4 代码</h3><p>假设我有一个二维数据集，其中每个样本有两个特征：$x_1$和$x_2$。想要将这个数据集分离成两个独立的信号源。下面是Python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成二维数据集</span></span><br><span class="line">X = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中心化处理</span></span><br><span class="line">X_mean = np.mean(X, axis=<span class="number">0</span>)</span><br><span class="line">X_centered = X - X_mean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机初始化权重向量</span></span><br><span class="line">w = np.random.rand(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新权重向量</span></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    y = X_centered.dot(w)</span><br><span class="line">    g = np.tanh(y)</span><br><span class="line">    w += alpha * (X_centered.T.dot(g) - np.mean(<span class="number">1</span> - g**<span class="number">2</span>) * w)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离信号源</span></span><br><span class="line">S = X_centered.dot(w)</span><br></pre></td></tr></table></figure><p>以下是使用 Scikit-learn 库中的 FastICA 类进行 ICA 降维的示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> FastICA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成示例数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">X = np.random.randn(<span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 ICA 模型</span></span><br><span class="line">ica = FastICA(n_components=<span class="number">1</span>)  <span class="comment"># 设置降维后的维度为1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数据进行降维</span></span><br><span class="line">X_ica = ica.fit_transform(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制降维后的数据</span></span><br><span class="line">plt.scatter(X_ica, np.zeros_like(X_ica), alpha=<span class="number">0.7</span>)</span><br><span class="line">plt.xlabel(<span class="string">'IC1'</span>)</span><br><span class="line">plt.ylabel(<span class="string">''</span>)</span><br><span class="line">plt.title(<span class="string">'ICA降维示例'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="10-3-t-分布随机近邻嵌入（t-SNE）"><a href="#10-3-t-分布随机近邻嵌入（t-SNE）" class="headerlink" title="10.3 t-分布随机近邻嵌入（t-SNE）"></a>10.3 t-分布随机近邻嵌入（t-SNE）</h2><h3 id="10-3-1-简介"><a href="#10-3-1-简介" class="headerlink" title="10.3.1 简介"></a>10.3.1 简介</h3><p>t-分布随机近邻嵌入（t-Distributed Stochastic Neighbor Embedding，简称t-SNE）是一种非线性的无监督学习降维方法，用于可视化高维数据。t-SNE 通过在高维空间中找到数据点之间的相似性，并将其映射到低维空间中，从而实现降维。t-SNE 通常在数据可视化和聚类等领域中被广泛应用。</p><h3 id="10-3-2-算法"><a href="#10-3-2-算法" class="headerlink" title="10.3.2 算法"></a>10.3.2 算法</h3><ol><li>计算高维空间中每个点之间的相似度。</li><li>随机初始化低维空间中每个点的位置。</li><li>计算低维空间中每个点之间的相似度。</li><li>计算高维空间和低维空间之间的相似度。</li><li>最小化高维空间和低维空间之间相似度的KL散度。</li></ol><h3 id="10-3-3-公式"><a href="#10-3-3-公式" class="headerlink" title="10.3.3 公式"></a>10.3.3 公式</h3><ol><li>高维空间中两个点$i$和$j$之间的相似度：$p_{j|i}=\frac{exp(-||x_i-x_j||2/2\sigma_i2)}{\sum_{k\neq i}exp(-||x_i-x_k||2/2\sigma_i2)}$</li><li>低维空间中两个点$i$和$j$之间的相似度：$q_{j|i}=\frac{(1+||y_i-y_j||2){-1}}{\sum_{k\neq i}(1+||y_i-y_k||2){-1}}$</li><li>KL散度：$KL(P||Q)=\sum_{i,j}p_{j|i}log\frac{p_{j|i}}{q_{j|i}}$</li></ol><h3 id="10-3-4-代码"><a href="#10-3-4-代码" class="headerlink" title="10.3.4 代码"></a>10.3.4 代码</h3><p>假设有一个二维数据集，其中每个样本有两个特征：$x_1$和$x_2$。想要将这个数据集降到二维并进行可视化。下面是Python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="keyword">from</span> sklearn.manifold <span class="keyword">import</span> TSNE</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成二维数据集</span></span><br><span class="line">X, y = make_blobs(n_samples=<span class="number">1000</span>, centers=<span class="number">3</span>, n_features=<span class="number">2</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># t-SNE降维</span></span><br><span class="line">tsne = TSNE(n_components=<span class="number">2</span>, perplexity=<span class="number">30</span>, learning_rate=<span class="number">200</span>)</span><br><span class="line">X_tsne = tsne.fit_transform(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化结果</span></span><br><span class="line">plt.scatter(X_tsne[:, <span class="number">0</span>], X_tsne[:, <span class="number">1</span>], c=y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>以下是使用 Scikit-learn 库中的 TSNE 类进行 t-SNE 降维的示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.manifold <span class="keyword">import</span> TSNE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成示例数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">X = np.random.randn(<span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 t-SNE 模型</span></span><br><span class="line">tsne = TSNE(n_components=<span class="number">2</span>)  <span class="comment"># 设置降维后的维度为2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对数据进行降维</span></span><br><span class="line">X_tsne = tsne.fit_transform(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制降维后的数据</span></span><br><span class="line">plt.scatter(X_tsne[:, <span class="number">0</span>], X_tsne[:, <span class="number">1</span>], alpha=<span class="number">0.7</span>)</span><br><span class="line">plt.xlabel(<span class="string">'t-SNE1'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'t-SNE2'</span>)</span><br><span class="line">plt.title(<span class="string">'t-SNE降维示例'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="10-4-自编码器（Autoencoder）"><a href="#10-4-自编码器（Autoencoder）" class="headerlink" title="10.4 自编码器（Autoencoder）"></a>10.4 自编码器（Autoencoder）</h2><h3 id="10-4-1-简介"><a href="#10-4-1-简介" class="headerlink" title="10.4.1 简介"></a>10.4.1 简介</h3><p>自编码器（Autoencoder）是一种神经网络模型，通过编码器将输入数据映射到低维表示，并通过解码器将低维表示映射回原始输入数据，从而实现降维。自编码器在无监督学习中具有很大的灵活性，可以用于多种降维任务。</p><h3 id="10-4-2-算法"><a href="#10-4-2-算法" class="headerlink" title="10.4.2 算法"></a>10.4.2 算法</h3><ol><li>编码器：将输入数据压缩成潜在空间表征。</li><li>解码器：将潜在空间表征还原为原始数据。</li><li>损失函数：衡量重构输出与原始输入之间的误差。</li></ol><h3 id="10-4-3-公式"><a href="#10-4-3-公式" class="headerlink" title="10.4.3 公式"></a>10.4.3 公式</h3><ol><li>编码器：$h=f(x)$</li><li>解码器：$r=g(h)$</li><li>损失函数：$L(x,r)=||x-r||^2$</li></ol><p>10.4.4 代码</p><p>假设有一个二维数据集，其中每个样本有两个特征：$x_1$和$x_2$。想要使用自编码器将这个数据集降到一维并进行可视化。下面是Python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input, Dense</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成二维数据集</span></span><br><span class="line">X = np.random.rand(<span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义自编码器模型</span></span><br><span class="line">input_layer = Input(shape=(<span class="number">2</span>,))</span><br><span class="line">encoded = Dense(<span class="number">1</span>, activation=<span class="string">'relu'</span>)(input_layer)</span><br><span class="line">decoded = Dense(<span class="number">2</span>, activation=<span class="string">'sigmoid'</span>)(encoded)</span><br><span class="line">autoencoder = Model(input_layer, decoded)</span><br><span class="line">autoencoder.compile(optimizer=<span class="string">'adam'</span>, loss=<span class="string">'mse'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练自编码器模型</span></span><br><span class="line">autoencoder.fit(X, X, epochs=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化结果</span></span><br><span class="line">encoder = Model(input_layer, encoded)</span><br><span class="line">X_encoded = encoder.predict(X)</span><br><span class="line">plt.scatter(X_encoded[:, <span class="number">0</span>], np.zeros_like(X_encoded[:, <span class="number">0</span>]))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="10-5-总结"><a href="#10-5-总结" class="headerlink" title="10.5 总结"></a>10.5 总结</h3><p>PCA、ICA、t-SNE和Autoencoder都是降维算法：</p><ul><li>PCA是一种线性降维算法，它通过正交变换将一组可能存在相关性的变量转换为一组线性不相关的变量，即把多指标转化为少数几个综合指标，转换后的这组变量就叫做主成分，其中每个主成分都能够反映原始变量的大部分信息，且所含信息互不重叠。</li><li>ICA是一种非线性降维算法，它是基于独立性原理的一种盲源分离算法。</li><li>t-SNE是一种非线性降维算法，它是基于概率分布的一种方法，可以用于高维数据的可视化。</li><li>Autoencoder是一种神经网络模型，它可以将高维数据压缩到低维空间中，并且可以通过解码器将低维数据还原到高维空间中</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（九）无监督学习之聚类</title>
      <link href="/post/ai-0-ml-9/"/>
      <url>/post/ai-0-ml-9/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第9章：无监督学习之聚类"><a href="#第9章：无监督学习之聚类" class="headerlink" title="第9章：无监督学习之聚类"></a>第9章：无监督学习之聚类</h1><p>在机器学习中，无监督学习是一种从未标记的数据中提取模式的方法。聚类是无监督学习中的一种常见任务，用于将数据分为具有相似特征的组或类别，从而识别数据中的隐藏模式和结构。通俗的讲，它可以将数据集中相似的样本归为一类，从而帮助理解数据的内在结构。</p><h2 id="9-1-K-means-聚类算法"><a href="#9-1-K-means-聚类算法" class="headerlink" title="9.1 K-means 聚类算法"></a>9.1 K-means 聚类算法</h2><p>K-means 算法是一种常用且简单的聚类算法。它通过迭代地更新聚类中心，将数据划分为 K 个簇，其中 K 是预先指定的聚类数。K-means 算法的步骤如下：</p><ol><li><strong>初始化聚类中心</strong>：随机选择 K 个样本作为初始聚类中心。</li><li><strong>计算样本到聚类中心的距离</strong>：计算每个样本到 K 个聚类中心的距离，选择距离最近的聚类中心作为该样本的类别。</li><li><strong>更新聚类中心</strong>：根据当前的聚类划分，更新每个簇的聚类中心为簇内样本的平均值。</li><li><strong>重复步骤2和步骤3</strong>：迭代地计算样本到聚类中心的距离，更新聚类中心，直到满足停止条件（例如，聚类中心不再改变或达到最大迭代次数）。</li></ol><p>K-means 算法的核心思想是将样本分配到距离最近的聚类中心，并通过聚类中心的更新来优化聚类结果。</p><p>K-means 算法的公式如下：</p><ul><li>初始化聚类中心：$c^{(0)} = [c_1^{(0)}, c_2^{(0)}, …, c_k^{(0)}]$</li><li>分配数据点到聚类中心：$c^{(t)} = \arg\min_{c} \sum_{i=1}^{n} ||x_i - c_j^{(t-1)}||^2$</li><li>更新聚类中心：$c_j^{(t)} = \frac{1}{|S_j|} \sum_{x_i \in S_j} x_i$</li></ul><p>其中，$c^{(t)}$ 是第 t 次迭代的聚类中心，$x_i$ 是第 i 个数据点，$S_j$ 是属于第 j 个聚类的数据点集合。</p><h2 id="9-2-Python例子"><a href="#9-2-Python例子" class="headerlink" title="9.2 Python例子"></a>9.2 Python例子</h2><p>假设有一个二维数据集，包含了 200 个样本，希望使用 K-means 算法将这些样本分为 3 个簇。</p><p>首先，需要导入必要的库并生成一个简单的二维数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成示例数据集</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">X = np.concatenate([np.random.normal(loc=i, scale=<span class="number">1</span>, size=(<span class="number">50</span>, <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)], axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>接下来，可以使用 Scikit-learn 库中的 KMeans 类来实现 K-means 算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 K-means 聚类算法</span></span><br><span class="line">kmeans = KMeans(n_clusters=<span class="number">3</span>, init=<span class="string">'random'</span>, max_iter=<span class="number">100</span>, random_state=<span class="number">0</span>)</span><br><span class="line">kmeans.fit(X)</span><br></pre></td></tr></table></figure><p>在上面的代码中，指定了聚类数为 3，初始化方法为随机选择，最大迭代次数为 100，随机种子为 0。</p><p>可以通过 <code>kmeans.labels_</code> 属性获取每个样本的聚类标签，通过 <code>kmeans.cluster_centers_</code> 属性获取每个聚类的中心坐标。然后，可以使用 Matplotlib 库来将聚类结果可视化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取聚类标签和聚类中心</span></span><br><span class="line">labels = kmeans.labels_</span><br><span class="line">centers = kmeans.cluster_centers_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制聚类结果</span></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=labels, cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.scatter(centers[:, <span class="number">0</span>], centers[:, <span class="number">1</span>], c=<span class="string">'red'</span>, marker=<span class="string">'x'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'特征1'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'特征2'</span>)</span><br><span class="line">plt.title(<span class="string">'K-means 聚类结果'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>在上面的代码中，使用散点图来显示数据集中的样本点，每个样本点的颜色表示其所属的聚类，聚类中心则用红色的 “x” 符号表示。</p><p>这样，就可以看到 K-means 算法将数据集中的样本点分为了 3 个簇，并通过红色的 “x” 符号表示了每个簇的聚类中心。</p><h2 id="9-3-总结"><a href="#9-3-总结" class="headerlink" title="9.3 总结"></a>9.3 总结</h2><p>K-means 算法是一种常用且简单的聚类算法，通过迭代地更新聚类中心，将数据集中相似的样本归为一类。在 Python 中，可以使用 Scikit-learn 库中的 KMeans 类来实现 K-means 算法。通过聚类结果的可视化，可以更好地理解数据的内在结构和模式。</p>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（八）决策树算法</title>
      <link href="/post/ai-0-ml-8/"/>
      <url>/post/ai-0-ml-8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第8章：机器学习决策树"><a href="#第8章：机器学习决策树" class="headerlink" title="第8章：机器学习决策树"></a>第8章：机器学习决策树</h1><p>决策树是一种常用的机器学习算法，用于解决分类和回归问题。它是一种基于树状结构的模型，通过对特征的划分和决策节点的选择来进行预测。</p><h2 id="8-1-算法简介"><a href="#8-1-算法简介" class="headerlink" title="8.1 算法简介"></a>8.1 算法简介</h2><p>决策树算法的基本思想是从根节点开始，根据特征值对数据集进行划分，形成子节点。划分依据通常是通过计算信息增益或者基尼系数来选择最优的特征。信息增益表示在划分前后，分类的不确定性减少的程度；基尼系数则表示在划分前后，数据集中样本被错误分类的概率。</p><p>决策树的生成过程可以通过递归的方式进行，直到满足停止条件，如节点中的样本全部属于同一类别或者特征用尽。生成的决策树可以用于对新样本进行分类或者回归预测。</p><p>决策树算法的优点包括易于理解和解释，可以处理离散和连续特征，具有较好的可解释性。然而，决策树也有一些缺点，如容易过拟合、对噪声敏感等。</p><h2 id="8-2-算法公式"><a href="#8-2-算法公式" class="headerlink" title="8.2 算法公式"></a>8.2 算法公式</h2><h3 id="8-2-1-信息增益"><a href="#8-2-1-信息增益" class="headerlink" title="8.2.1 信息增益"></a>8.2.1 信息增益</h3><p>信息增益用于选择最优的特征进行划分，可以通过以下公式计算：</p><script type="math/tex; mode=display">Information\_Gain(D, A) = Entropy(D) - \sum_{v \in Values(A)} \frac{|D_v|}{|D|}Entropy(D_v)</script><p>其中，$D$是当前节点的数据集，$A$是待选择的特征，<code>Values(A)</code>是特征$A$的所有取值，$D_v$是特征$A$取值为$v$时的子数据集，$|D|$是数据集$D$中的样本数量，$|D_v|$是子数据集$D_v$中的样本数量，<code>Entropy(D)</code>表示数据集$D$的熵，可以通过以下公式计算：</p><script type="math/tex; mode=display">Entropy(D) = - \sum_{i=1}^{|C|} p_i * log_2(p_i)</script><p>其中，$C$是数据集$D$中的所有类别，$p_i$是类别$i$在数据集$D$中的占比。</p><h3 id="8-2-2-基尼系数"><a href="#8-2-2-基尼系数" class="headerlink" title="8.2.2 基尼系数"></a>8.2.2 基尼系数</h3><p>基尼系数用于选择最优的特征进行划分，可以通过以下公式计算：</p><script type="math/tex; mode=display">Gini_Index(D, A) = \sum_{v in Values(A)} \frac{|D_v|}{|D|} Gini(D_v)</script><p>其中，$D$是当前节点的数据集，$A$是待选择的特征，<code>Values(A)</code>是特征$A$的所有取值，$D_v$是特征$A$取值为$v$时的子数据集，$|D|$是数据集$D$中的样本数量，$|D_v|$是子数据集$D_v$中的样本数量，<code>Gini(D_v)</code>表示子数据集$D_v$的基尼指数，可以通过以下公式计算：</p><script type="math/tex; mode=display">Gini(D_v) = 1 - \sum_{i=1}^{|C|} (p_i)^2</script><p>其中，$C$是子数据集$D_v$中的所有类别，$p_i$是类别$i$在子数据集$D_v$中的占比。</p><h2 id="8-3-Python代码"><a href="#8-3-Python代码" class="headerlink" title="8.3 Python代码"></a>8.3 Python代码</h2><p>下面是一个使用Python的示例代码，展示如何使用sklearn库构建决策树模型：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建决策树分类器</span></span><br><span class="line">clf = DecisionTreeClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用训练数据拟合模型</span></span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用模型进行预测</span></span><br><span class="line">y_pred = clf.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算模型的准确率</span></span><br><span class="line">accuracy = accuracy_score(y_test, y_pred)</span><br><span class="line">print(<span class="string">"模型准确率："</span>, accuracy)</span><br></pre></td></tr></table></figure></p><h2 id="8-4-例子"><a href="#8-4-例子" class="headerlink" title="8.4 例子"></a>8.4 例子</h2><p>下面以一个简单的二分类问题为例，使用Python代码演示如何使用决策树算法进行分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建示例数据集</span></span><br><span class="line">data = &#123;<span class="string">'年龄'</span>: [<span class="number">18</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>],</span><br><span class="line">        <span class="string">'收入'</span>: [<span class="string">'低'</span>, <span class="string">'低'</span>, <span class="string">'中'</span>, <span class="string">'中'</span>, <span class="string">'高'</span>, <span class="string">'高'</span>],</span><br><span class="line">        <span class="string">'性别'</span>: [<span class="string">'男'</span>, <span class="string">'女'</span>, <span class="string">'男'</span>, <span class="string">'女'</span>, <span class="string">'男'</span>, <span class="string">'女'</span>],</span><br><span class="line">        <span class="string">'是否购车'</span>: [<span class="string">'否'</span>, <span class="string">'否'</span>, <span class="string">'是'</span>, <span class="string">'是'</span>, <span class="string">'是'</span>, <span class="string">'否'</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将特征进行数值化</span></span><br><span class="line">df[<span class="string">'收入'</span>] = df[<span class="string">'收入'</span>].map(&#123;<span class="string">'低'</span>: <span class="number">0</span>, <span class="string">'中'</span>: <span class="number">1</span>, <span class="string">'高'</span>: <span class="number">2</span>&#125;)</span><br><span class="line">df[<span class="string">'性别'</span>] = df[<span class="string">'性别'</span>].map(&#123;<span class="string">'男'</span>: <span class="number">0</span>, <span class="string">'女'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">df[<span class="string">'是否购车'</span>] = df[<span class="string">'是否购车'</span>].map(&#123;<span class="string">'否'</span>: <span class="number">0</span>, <span class="string">'是'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离特征和标签</span></span><br><span class="line">X_train = df[[<span class="string">'年龄'</span>, <span class="string">'收入'</span>, <span class="string">'性别'</span>]]</span><br><span class="line">y_train = df[<span class="string">'是否购车'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建决策树分类器</span></span><br><span class="line">clf = DecisionTreeClassifier(criterion=<span class="string">'gini'</span>)</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测</span></span><br><span class="line">new_data = [[<span class="number">28</span>, <span class="number">1</span>, <span class="number">0</span>]]  <span class="comment"># 新样本特征</span></span><br><span class="line">y_pred = clf.predict(new_data)</span><br><span class="line">print(<span class="string">'是否购车:'</span>, y_pred)  <span class="comment"># 输出预测结果</span></span><br></pre></td></tr></table></figure><p>以上代码首先创建了一个包含年龄、收入、性别和是否购车标签的数据集。然后使用<code>DecisionTreeClassifier</code>类创建了一个基于基尼系数的决策树分类器，并用训练数据进行了拟合。最后，通过<code>predict</code>方法对新样本进行预测，并输出了预测结果。</p><h2 id="8-5-总结"><a href="#8-5-总结" class="headerlink" title="8.5 总结"></a>8.5 总结</h2><p>决策树是一种常用的机器学习算法，通过对特征的划分和决策节点的选择来进行预测。其基本思想是从根节点开始，通过信息增益或基尼系数等指标选择最优的特征进行划分，形成子节点，直到满足停止条件。决策树具有易于理解和解释的优点，可以处理离散和连续特征，但也存在过拟合和对噪声敏感的缺点。</p><p>在实际应用中，可以根据具体问题选择合适的特征选择方法、停止条件和参数调优，以获取更好的模型性能。</p>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（七）支持向量机</title>
      <link href="/post/ai-0-ml-7/"/>
      <url>/post/ai-0-ml-7/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第7章：支持向量机"><a href="#第7章：支持向量机" class="headerlink" title="第7章：支持向量机"></a>第7章：支持向量机</h1><p>支持向量机（SVM）是一种常用于分类和回归问题的监督学习算法。SVM 的基本思想是通过找到一个能够最好地将不同类别的样本分隔开的超平面，从而实现分类。SVM 在解决二分类问题中非常有效，并且在处理高维数据和样本量较小的情况下表现出色。</p><h2 id="7-1-SVM算法简介"><a href="#7-1-SVM算法简介" class="headerlink" title="7.1 SVM算法简介"></a>7.1 SVM算法简介</h2><p>SVM 的目标是找到一个超平面（或者说一个决策边界），将不同类别的样本分开。超平面被定义为具有最大间隔（margin）的平面，即离支持向量（位于两个类别之间的样本）最远的距离最大。支持向量是离超平面最近的样本点，它们对于定义超平面至关重要。</p><p>SVM 的数学公式可以用如下形式表示：</p><p>对于二分类问题，给定一组输入样本 ${x_i, y_i}_{i=1}^n$，其中 $x_i$ 是输入特征向量，$y_i$ 是类别标签，$y_i \in {(-1, 1)}$。SVM 的目标是找到一个超平面 $\omega \cdot x - b = 0$，其中 $\omega$ 是法向量，$b$ 是偏置，满足以下条件：</p><script type="math/tex; mode=display">Maximize: ( \lVert \omega \rVert_1)\\Subject\ to:( y_i (\omega \cdot x_i - b) \geq 1, \forall i )</script><p>其中 $\omega \cdot x_i$ 表示 $\omega$ 和 $x_i$ 的点积，$| \omega |$ 表示 $\omega$ 的范数。</p><p>这个优化问题的目标是要最大化超平面的间隔，即最小化 $| \omega |$，同时保证所有样本点都位于超平面两侧，并且满足一定的间隔条件。这样的超平面就是最优超平面，可以用于进行新样本的分类。</p><h2 id="7-2-一个简单的例子"><a href="#7-2-一个简单的例子" class="headerlink" title="7.2 一个简单的例子"></a>7.2 一个简单的例子</h2><p>假设我们有一个二维的数据集，其中包含两类数据点，我们希望用 SVM 进行分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">X = np.r_[np.random.randn(<span class="number">20</span>, <span class="number">2</span>) - [<span class="number">2</span>, <span class="number">2</span>], np.random.randn(<span class="number">20</span>, <span class="number">2</span>) + [<span class="number">2</span>, <span class="number">2</span>]]</span><br><span class="line">y = np.array([<span class="number">-1</span>] * <span class="number">20</span> + [<span class="number">1</span>] * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练SVM模型</span></span><br><span class="line">clf = svm.SVC(kernel=<span class="string">'linear'</span>, C=<span class="number">1</span>)</span><br><span class="line">clf.fit(X, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制决策边界和支持向量</span></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>],c=y, cmap=<span class="string">'bwr'</span>, edgecolors=<span class="string">'k'</span>)</span><br><span class="line">ax = plt.gca()</span><br><span class="line">xlim = ax.get_xlim()</span><br><span class="line">ylim = ax.get_ylim()</span><br><span class="line"><span class="comment"># 生成网格点，用于绘制决策边界</span></span><br><span class="line"></span><br><span class="line">xx = np.linspace(xlim[<span class="number">0</span>], xlim[<span class="number">1</span>], <span class="number">30</span>)</span><br><span class="line">yy = np.linspace(ylim[<span class="number">0</span>], ylim[<span class="number">1</span>], <span class="number">30</span>)</span><br><span class="line">YY, XX = np.meshgrid(yy, xx)</span><br><span class="line">xy = np.vstack([XX.ravel(), YY.ravel()]).T</span><br><span class="line">Z = clf.decision_function(xy).reshape(XX.shape)</span><br><span class="line"><span class="comment"># 绘制决策边界和支持向量</span></span><br><span class="line"></span><br><span class="line">ax.contour(XX, YY, Z, colors=<span class="string">'k'</span>, levels=[<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>], alpha=<span class="number">0.5</span>, linestyles=[<span class="string">'--'</span>, <span class="string">'-'</span>, <span class="string">'--'</span>])</span><br><span class="line">ax.scatter(clf.support_vectors_[:, <span class="number">0</span>], clf.support_vectors_[:, <span class="number">1</span>], s=<span class="number">100</span>, facecolors=<span class="string">'none'</span>, edgecolors=<span class="string">'k'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'X1'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'X2'</span>)</span><br><span class="line">plt.title(<span class="string">'Support Vector Machine Example'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>上述代码通过使用Scikit-learn库中的SVM实现，生成了一个随机的二维数据集，并使用线性核函数进行训练。然后，通过绘制决策边界和支持向量，展示了SVM的分类效果。</p><p>在这个例子中，数据集包含两类数据点，分别位于左下和右上两个象限。SVM通过找到一个最大间隔的超平面，将两类数据点成功分隔开。支持向量则是离超平面最近的样本点，它们对于定义超平面起到了关键作用。</p><p>这只是一个简单的例子，实际应用中，SVM还可以使用不同的核函数，如高斯核、多项式核等，来处理非线性问题。同时，还可以通过调整参数C来控制分类器的容错性和间隔大小。SVM是一种强大且灵活的机器学习算法，常常在实际应用中表现出色。</p><h2 id="7-3-总结"><a href="#7-3-总结" class="headerlink" title="7.3 总结"></a>7.3 总结</h2><p>支持向量机（SVM）是一种强大且灵活的机器学习算法，用于二分类和多分类问题。SVM的目标是找到一个最大间隔的超平面，将不同类别的数据点分隔开。SVM通过支持向量（位于最大间隔边界上的样本点）来定义决策边界，并在训练过程中优化超平面的位置。</p><p>SVM的优点包括：</p><ul><li>对于高维数据和小样本数据集表现出色，具有较强的泛化能力。</li><li>能够处理线性可分和线性不可分的数据，通过使用不同的核函数来处理非线性问题。</li><li>可以通过调整参数C来控制分类器的容错性和间隔大小，从而灵活地适应不同的数据分布。</li></ul><p>SVM的主要步骤包括：</p><ol><li>收集和准备数据集。</li><li>选择合适的核函数和参数C，创建SVM分类器。</li><li>进行模型训练，找到最大间隔的超平面。</li><li>进行模型评估和调优，通过交叉验证等方法选择最佳参数。</li><li>使用训练好的模型进行预测。</li></ol><p>在实际应用中，SVM广泛应用于图像分类、文本分类、生物医学等领域，并且有很多变种和扩展，如支持向量回归、多类别SVM等。同时，也有一些优化技术，如序列最小优化（SMO）、核技巧等，用于提升SVM的计算效率和性能。</p>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（六）K近邻算法</title>
      <link href="/post/ai-0-ml-6/"/>
      <url>/post/ai-0-ml-6/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第6章：K近邻算法简介"><a href="#第6章：K近邻算法简介" class="headerlink" title="第6章：K近邻算法简介"></a>第6章：K近邻算法简介</h1><p>K近邻（K-nearest neighbors）是一种简单而强大的监督学习算法，常用于分类和回归问题。K近邻算法的基本思想是根据已有的数据集，通过计算新样本与邻近样本之间的距离，从而确定新样本的类别或数值。</p><h2 id="6-1-算法简介"><a href="#6-1-算法简介" class="headerlink" title="6.1 算法简介"></a>6.1 算法简介</h2><p>K近邻算法的基本步骤如下： </p><ol><li><strong>数据准备</strong> ：收集和整理用于训练和测试的数据集，包括特征（输入）和标签（输出）。 </li><li><strong>距离度量</strong> ：选择适合的距离度量方法，例如欧氏距离、曼哈顿距离等，用于计算样本之间的相似度。 </li><li><strong>K值选择</strong> ：选择一个合适的K值，表示要考虑的邻近样本的数量。 </li><li><strong>邻近样本选择</strong> ：根据选定的距离度量方法，计算新样本与训练集中所有样本之间的距离，并选择距离最近的K个样本作为邻近样本。 </li><li><strong>投票决策</strong> ：对于分类问题，根据邻近样本的标签，通过投票的方式决定新样本的类别；对于回归问题，根据邻近样本的数值，通过平均或加权平均的方式估计新样本的数值。</li></ol><p>K近邻算法中常用的距离度量公式如下： </p><ul><li><p>欧氏距离：</p><script type="math/tex; mode=display">d(x,y) = ∑_{i=1}^{n} (x_i - y_i)^2</script></li><li><p>曼哈顿距离：</p><script type="math/tex; mode=display">d(x,y) = ∑_{i=1}^{n} |x_i - y_i|</script></li></ul><p>其中，$x$和$y$分别表示两个样本的特征向量，$n$表示特征的维度。</p><h2 id="6-2-例子"><a href="#6-2-例子" class="headerlink" title="6.2 例子"></a>6.2 例子</h2><p>下面以一个简单的分类问题为例，使用K近邻算法进行分类。</p><h3 id="6-2-1-导入数据集"><a href="#6-2-1-导入数据集" class="headerlink" title="6.2.1 导入数据集"></a>6.2.1 导入数据集</h3><p>假设有一个鸢尾花数据集，包含150个样本，每个样本有4个特征：花萼长度、花萼宽度、花瓣长度、花瓣宽度，以及一个标签：鸢尾花的种类（setosa、versicolor、virginica）。我们希望根据已有的样本数据，对新样本进行分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载鸢尾花数据集</span></span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br></pre></td></tr></table></figure><h3 id="6-2-2-数据预处理"><a href="#6-2-2-数据预处理" class="headerlink" title="6.2.2 数据预处理"></a>6.2.2 数据预处理</h3><p>对数据进行预处理，包括将数据集划分为训练集和测试集，以及进行特征缩放。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 划分数据集为训练集和测试集</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征缩放（可选）</span></span><br><span class="line"><span class="comment"># 这里可以使用不同的方法对特征进行缩放，例如MinMaxScaler、StandardScaler等</span></span><br><span class="line"><span class="comment"># 这里我们不进行特征缩放，因为鸢尾花数据集的特征已经在相似的数值范围内</span></span><br></pre></td></tr></table></figure><h3 id="6-2-3-K近邻算法实现"><a href="#6-2-3-K近邻算法实现" class="headerlink" title="6.2.3 K近邻算法实现"></a>6.2.3 K近邻算法实现</h3><p>接下来，我们可以使用scikit-learn库中的KNeighborsClassifier类来实现K近邻算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建K近邻分类器</span></span><br><span class="line">k = <span class="number">3</span>  <span class="comment"># 设置K值</span></span><br><span class="line">clf = KNeighborsClassifier(n_neighbors=k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在训练集上训练K近邻分类器</span></span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在测试集上进行预测</span></span><br><span class="line">y_pred = clf.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算预测准确率</span></span><br><span class="line">accuracy = accuracy_score(y_test, y_pred)</span><br><span class="line">print(<span class="string">"Accuracy:"</span>, accuracy)</span><br></pre></td></tr></table></figure><h3 id="6-2-4-结果解释"><a href="#6-2-4-结果解释" class="headerlink" title="6.2.4 结果解释"></a>6.2.4 结果解释</h3><p>最后，我们可以根据预测结果进行解释和分析。例如，可以输出混淆矩阵、分类报告等来评估分类器的性能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix, classification_report</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出混淆矩阵和分类报告</span></span><br><span class="line">cm = confusion_matrix(y_test, y_pred)</span><br><span class="line">cr = classification_report(y_test, y_pred, target_names=iris.target_names)</span><br><span class="line">print(<span class="string">"Confusion Matrix:"</span>)</span><br><span class="line">print(cm)</span><br><span class="line">print(<span class="string">"\nClassification Report:"</span>)</span><br><span class="line">print(cr)</span><br></pre></td></tr></table></figure><h2 id="6-3-总结"><a href="#6-3-总结" class="headerlink" title="6.3 总结"></a>6.3 总结</h2><p>本章介绍了K近邻算法的基本概念和应用。K近邻算法是一种简单但有效的监督学习方法，常用于分类和回归问题。算法的主要思想是通过计算样本之间的距离来进行预测或分类，其中K值是一个重要的参数，决定了邻居的数量。本章通过一个实例介绍了K近邻算法的基本步骤，包括数据预处理、K近邻算法的实现以及结果解释和分析。</p><p>在使用K近邻算法时，需要注意的几点是：</p><ul><li>数据预处理：包括将数据集划分为训练集和测试集，并进行必要的特征缩放等处理。</li><li>K值的选择：K值的选择对算法的性能有很大影响，需要根据具体问题和数据集进行调优。</li><li>距离度量：K近邻算法使用距离度量来计算样本之间的相似度，常用的距离度量有欧氏距离和曼哈顿距离等。</li><li>结果解释和分析：在使用K近邻算法进行预测或分类后，需要对结果进行解释和分析，包括混淆矩阵、分类报告等评估指标。</li></ul><p>虽然K近邻算法简单易懂，但也存在一些局限性，例如对于高维数据和大规模数据集的处理可能会受到限制。因此，在使用K近邻算法时，需要结合具体问题和数据集的特点来进行合理的选择和调优。希望本章的介绍能够帮助初学者理解K近邻算法的基本原理和应用，并在实际问题中进行实践和应用。</p>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（五）贝叶斯算法</title>
      <link href="/post/ai-0-ml-5/"/>
      <url>/post/ai-0-ml-5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第5章：贝叶斯算法简介"><a href="#第5章：贝叶斯算法简介" class="headerlink" title="第5章：贝叶斯算法简介"></a>第5章：贝叶斯算法简介</h1><p>贝叶斯算法是一种基于统计学原理的机器学习算法，用于处理概率推断问题。它基于贝叶斯定理，通过利用先验概率和观测数据的条件概率，更新模型的后验概率。贝叶斯算法在许多领域中都有广泛的应用，例如垃圾邮件过滤、医学诊断、文本分类等。</p><h2 id="5-1-算法原理"><a href="#5-1-算法原理" class="headerlink" title="5.1 算法原理"></a>5.1 算法原理</h2><p>贝叶斯算法的核心是贝叶斯定理，其数学公式表示如下：</p><script type="math/tex; mode=display">P(A|B) = \frac{P(B|A) \cdot P(A)}{P(B)}</script><p>其中，P(A|B) 表示在观测到B的条件下，事件A发生的概率；P(B|A) 表示在事件A发生的条件下，观测到B的概率；P(A) 和 P(B) 分别表示事件A和事件B的先验概率。</p><p>贝叶斯算法通过计算后验概率 P(A|B) 来完成推断，其中先验概率 P(A) 和条件概率 P(B|A) 可以通过历史数据或者领域知识来估计，而后验概率 P(A|B) 则是我们想要得到的结果。</p><h2 id="5-2-算法步骤"><a href="#5-2-算法步骤" class="headerlink" title="5.2 算法步骤"></a>5.2 算法步骤</h2><p>贝叶斯算法的基本步骤如下：</p><ol><li>收集观测数据和事件的先验概率。</li><li>利用观测数据计算条件概率。</li><li>利用贝叶斯定理计算后验概率。</li><li>根据后验概率做出推断或者决策。</li></ol><h2 id="5-3-例子：垃圾邮件过滤"><a href="#5-3-例子：垃圾邮件过滤" class="headerlink" title="5.3 例子：垃圾邮件过滤"></a>5.3 例子：垃圾邮件过滤</h2><p>以垃圾邮件过滤为例，假设我们有一些已经被标记为垃圾邮件和非垃圾邮件的邮件样本数据，并且我们已经计算了这些邮件属于垃圾邮件和非垃圾邮件的先验概率。现在，我们希望通过贝叶斯算法来判断一封新的邮件是否是垃圾邮件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算先验概率</span></span><br><span class="line">P_spam = <span class="number">0.3</span></span><br><span class="line">P_non_spam = <span class="number">0.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算条件概率</span></span><br><span class="line">P_word_given_spam = <span class="number">0.8</span></span><br><span class="line">P_word_given_non_spam = <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取待判断邮件的单词列表</span></span><br><span class="line">words = [<span class="string">'free'</span>, <span class="string">'money'</span>, <span class="string">'win'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化后验概率</span></span><br><span class="line">P_spam_given_words = P_spam</span><br><span class="line">P_non_spam_given_words = P_non_spam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算后验概率</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对于垃圾邮件的条件概率累乘</span></span><br><span class="line">    P_spam_given_words *= P_word_given_spam</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对于非垃圾邮件的条件概率累乘</span></span><br><span class="line">    P_non_spam_given_words *= P_word_given_non_spam</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据贝叶斯定理计算后验概率</span></span><br><span class="line">    P_spam_given_words /= (P_spam_given_words + P_non_spam_given_words)</span><br><span class="line">    P_non_spam_given_words /= (P_spam_given_words + P_non_spam_given_words)</span><br><span class="line">    <span class="comment"># 判断邮件是否为垃圾邮件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> P_spam_given_words &gt; P_non_spam_given_words:</span><br><span class="line">    print(<span class="string">"这封邮件被判断为垃圾邮件"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"这封邮件被判断为非垃圾邮件"</span>)</span><br></pre></td></tr></table></figure><p>以上代码演示了如何通过贝叶斯算法判断一封邮件是否为垃圾邮件。通过计算先验概率和条件概率，然后利用贝叶斯定理计算后验概率，最终判断邮件的类别。这是一个简化的例子，实际应用中可能需要考虑更多的因素和处理更复杂的数据。</p><h2 id="5-4-使用scikit-learn库进行朴素贝叶斯分类"><a href="#5-4-使用scikit-learn库进行朴素贝叶斯分类" class="headerlink" title="5.4 使用scikit-learn库进行朴素贝叶斯分类"></a>5.4 使用scikit-learn库进行朴素贝叶斯分类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.feature_extraction.text import CountVectorizer</span><br><span class="line">from sklearn.naive_bayes import MultinomialNB</span><br><span class="line"></span><br><span class="line"># 准备训练数据和测试数据</span><br><span class="line">train_data &#x3D; [&quot;这是一封垃圾邮件&quot;, &quot;这是一封正常邮件&quot;, &quot;垃圾邮件太多了&quot;, &quot;正常邮件很重要&quot;]</span><br><span class="line">train_labels &#x3D; [&quot;spam&quot;, &quot;non-spam&quot;, &quot;spam&quot;, &quot;non-spam&quot;]</span><br><span class="line"></span><br><span class="line">test_data &#x3D; [&quot;这是一封测试邮件&quot;]</span><br><span class="line"></span><br><span class="line"># 特征提取</span><br><span class="line">vectorizer &#x3D; CountVectorizer()</span><br><span class="line">X_train &#x3D; vectorizer.fit_transform(train_data)</span><br><span class="line">X_test &#x3D; vectorizer.transform(test_data)</span><br><span class="line"></span><br><span class="line"># 创建朴素贝叶斯分类器</span><br><span class="line">clf &#x3D; MultinomialNB()</span><br><span class="line">clf.fit(X_train, train_labels)</span><br><span class="line"></span><br><span class="line"># 进行分类预测</span><br><span class="line">prediction &#x3D; clf.predict(X_test)</span><br><span class="line"></span><br><span class="line"># 打印预测结果</span><br><span class="line">if prediction[0] &#x3D;&#x3D; &quot;spam&quot;:</span><br><span class="line">    print(&quot;这封邮件被判断为垃圾邮件&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;这封邮件被判断为非垃圾邮件&quot;)</span><br></pre></td></tr></table></figure><p>以上代码使用了scikit-learn库中的<code>CountVectorizer</code>进行文本特征提取，使用了<code>MultinomialNB</code>朴素贝叶斯分类器进行垃圾邮件分类的示例。这个例子演示了如何使用scikit-learn库来实现朴素贝叶斯分类，并对一封测试邮件进行分类预测。这是一个简化的例子，实际应用中可能需要更多的数据预处理和模型调优等步骤。</p><h2 id="5-5-总结"><a href="#5-5-总结" class="headerlink" title="5.5 总结"></a>5.5 总结</h2><p>贝叶斯算法是一种强大的机器学习算法，可以在很多实际问题中得到应用，并且有着广泛的研究和发展空间。</p>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（四）逻辑回归</title>
      <link href="/post/ai-0-ml-4/"/>
      <url>/post/ai-0-ml-4/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第4章：逻辑回归"><a href="#第4章：逻辑回归" class="headerlink" title="第4章：逻辑回归"></a>第4章：逻辑回归</h1><p>逻辑回归是一种常用于分类的线性模型。它的主要思想是通过对线性函数的值进行逻辑变换，将连续的输出转换为二元分类的概率值。逻辑回归常用于二分类问题，也可以扩展到多分类问题。在本文中，主要讨论二分类问题。</p><h2 id="4-1-线性函数"><a href="#4-1-线性函数" class="headerlink" title="4.1 线性函数"></a>4.1 线性函数</h2><p>从线性函数开始。线性函数是指变量之间的关系可以用一个线性方程来描述的函数。对于二维平面上的数据，线性函数的一般形式为：</p><script type="math/tex; mode=display">f(x) = w_0 + w_1 x_1 + w_2 x_2</script><p>其中，$w_0$ 表示截距，$w_1$ 和 $w_2$ 分别表示两个自变量 $x_1$ 和 $x_2$ 的系数。可以将 $f(x)$ 表示成向量的内积形式：</p><script type="math/tex; mode=display">f(x) = \boldsymbol{w}^T \boldsymbol{x}</script><p>其中，$\boldsymbol{w}$ 和 $\boldsymbol{x}$ 都是列向量。</p><h2 id="4-2-逻辑函数"><a href="#4-2-逻辑函数" class="headerlink" title="4.2 逻辑函数"></a>4.2 逻辑函数</h2><p>逻辑函数也被称为 sigmoid 函数。它将任意实数值映射到区间 $(0, 1)$，可以用以下公式表示：</p><script type="math/tex; mode=display">\sigma(z) = \frac{1}{1 + e^{-z}}</script><p>其中，$z$ 是逻辑函数的自变量。逻辑函数的取值范围为 $(0, 1)$，当 $z$ 接近于正无穷时，$\sigma(z)$ 接近于 $1$，表示正例的概率很大；当 $z$ 接近于负无穷时，$\sigma(z)$ 接近于 $0$，表示负例的概率很大。</p><h2 id="4-3-逻辑回归模型"><a href="#4-3-逻辑回归模型" class="headerlink" title="4.3 逻辑回归模型"></a>4.3 逻辑回归模型</h2><p>逻辑回归模型是在线性函数的基础上加上一个逻辑函数的变换。它的表达式为：</p><script type="math/tex; mode=display">h_{\boldsymbol{w}}(\boldsymbol{x}) = \sigma(\boldsymbol{w}^T \boldsymbol{x})</script><p>其中，$h_{\boldsymbol{w}}(\boldsymbol{x})$ 表示给定参数 $\boldsymbol{w}$ 和输入向量 $\boldsymbol{x}$，输出为正例的概率。为了方便，将 $h_{\boldsymbol{w}}(\boldsymbol{x})$ 表示为 $P(y=1|\boldsymbol{x};\boldsymbol{w})$，表示在给定 $\boldsymbol{x}$ 的情况下，$y=1$的概率，也就是正例的后验概率。类似地，$P(y=0|\boldsymbol{x};\boldsymbol{w})=1-P(y=1|\boldsymbol{x};\boldsymbol{w})$ 表示负例的后验概率。</p><p>可以使用最大似然估计来确定参数 $\boldsymbol{w}$。具体来说，对于给定的训练数据集 $\{(\boldsymbol{x}_1, y_1), (\boldsymbol{x}_2, y_2), …, (\boldsymbol{x}_m, y_m)\}$，似然函数为：</p><script type="math/tex; mode=display">L(\boldsymbol{w}) = \prod_{i=1}^{m} P(y_i|\boldsymbol{x}_i;\boldsymbol{w})^{y_i} (1-P(y_i|\boldsymbol{x}_i;\boldsymbol{w}))^{1-y_i}</script><p>的目标是最大化似然函数。可以将其转换为最小化对数似然函数：</p><script type="math/tex; mode=display">J(\boldsymbol{w}) = -\frac{1}{m} \sum_{i=1}^{m} [y_i \log h_{\boldsymbol{w}}(\boldsymbol{x}_i) + (1-y_i) \log (1-h_{\boldsymbol{w}}(\boldsymbol{x}_i))]</script><p>这个目标函数可以使用梯度下降法来最小化。具体地，对于每个参数 $w_j$，可以按照以下方式更新：</p><script type="math/tex; mode=display">w_j := w_j - \alpha \frac{\partial J(\boldsymbol{w})}{\partial w_j}</script><p>其中，$\alpha$ 是学习率。</p><h2 id="4-4-例子"><a href="#4-4-例子" class="headerlink" title="4.4 例子"></a>4.4 例子</h2><p>下面来看一个简单的例子，使用逻辑回归模型对鸢尾花进行分类。使用 scikit-learn 库中的 iris 数据集。</p><p>首先，加载数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data[:, :<span class="number">2</span>]</span><br><span class="line">y = (iris.target != <span class="number">0</span>) * <span class="number">1</span></span><br></pre></td></tr></table></figure><p>然后，将数据集分为训练集和测试集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>接下来，使用 scikit-learn 中的 LogisticRegression 模型来训练模型：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">model = LogisticRegression()</span><br><span class="line">model.fit(X_train, y_train)</span><br></pre></td></tr></table></figure></p><p>最后，可以使用测试集来评估模型的性能：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">y_pred = model.predict(X_test)</span><br><span class="line">accuracy_score(y_test, y_pred)</span><br></pre></td></tr></table></figure><br>在这个例子中，使用逻辑回归模型对鸢尾花进行了二分类，预测结果的准确率为 100%。</p><h2 id="4-5-总结"><a href="#4-5-总结" class="headerlink" title="4.5 总结"></a>4.5 总结</h2><p>逻辑回归是一种简单但常用的二分类算法。它通过将线性回归模型的输出通过一个逻辑函数进行压缩，得到一个概率值作为输出。我们可以使用梯度下降法来求解最优的参数。在实际应用中，逻辑回归通常与其他算法结合使用，来构建更复杂的分类器或预测模型。</p>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（三）回归模型</title>
      <link href="/post/ai-0-ml-3/"/>
      <url>/post/ai-0-ml-3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第3章：回归模型"><a href="#第3章：回归模型" class="headerlink" title="第3章：回归模型"></a>第3章：回归模型</h1><p>回归问题是机器学习中的一种常见问题，其目的是建立一个数学模型，来描述一个或多个自变量（输入特征）和一个因变量（输出目标）之间的关系。回归问题的应用场景很多，例如预测房价、股票、销量、温度等。回归问题的难点在于如何选择合适的模型和参数，使得模型能够准确地拟合数据，并具有良好的泛化能力。</p><p>在本节中，将介绍两种常用的回归模型：线性回归和多项式回归，并使用Python代码来实现它们。</p><h2 id="3-1-线性回归模型"><a href="#3-1-线性回归模型" class="headerlink" title="3.1 线性回归模型"></a>3.1 线性回归模型</h2><p>线性回归模型是一种简单而又有效的回归模型，它假设自变量和因变量之间存在线性关系，即：</p><script type="math/tex; mode=display">y = \beta_0 + \beta_1 x_1 + \beta_2 x_2 + … + \beta_n x_n + \epsilon</script><p>其中，$y$是因变量，$x_1, x_2, …, x_n$是自变量，$\beta_0, \beta_1, …, \beta_n$是模型参数，$\epsilon$是误差项。线性回归模型的目标是通过最小化误差平方和（或者其他损失函数），来估计出最优的参数值。</p><p>参数估计有多种方法，例如最小二乘法、梯度下降法、牛顿法等。其中最常用的是最小二乘法，它可以通过求解正规方程（normal equation）来得到参数的闭式解（closed-form solution），即：</p><script type="math/tex; mode=display">\boldsymbol{\beta} = (\mathbf{X}^T\mathbf{X})^{-1}\mathbf{X}^T\mathbf{y}</script><p>其中，$\boldsymbol{\beta}$是参数向量，$\mathbf{X}$是输入矩阵，$\mathbf{y}$是输出向量。最小二乘法的优点是计算简单，缺点是当输入变量很多时，矩阵求逆会很耗时，并且可能存在奇异矩阵（singular matrix）的情况。</p><p>梯度下降法是另一种常用的参数估计方法，它是一种迭代算法，每次沿着损失函数的负梯度方向更新参数值，直到收敛到一个局部最优解或满足停止条件。梯度下降法的优点是可以处理大规模数据集，并且可以适用于非线性模型，缺点是需要选择合适的学习率（learning rate）和迭代次数（iteration number），并且可能陷入局部最优解而非全局最优解。</p><p>例如，有一个数据集，包含了房屋的面积（平方米）和价格（万元）两个变量，想要建立一个线性回归模型来预测房价。可以使用以下代码来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>) <span class="comment"># 设置随机种子</span></span><br><span class="line">x = np.linspace(<span class="number">50</span>, <span class="number">150</span>, <span class="number">100</span>) <span class="comment"># 生成50到150之间的100个等间隔数值</span></span><br><span class="line">y = <span class="number">3</span> * x + <span class="number">10</span> + np.random.normal(<span class="number">0</span>, <span class="number">15</span>, <span class="number">100</span>) <span class="comment"># 生成y值，加入一些噪声</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并拟合模型</span></span><br><span class="line">model = LinearRegression() <span class="comment"># 创建线性回归对象</span></span><br><span class="line">model.fit(x.reshape(<span class="number">-1</span>, <span class="number">1</span>), y) <span class="comment"># 拟合数据，注意x需要转换为二维数组</span></span><br><span class="line">print(<span class="string">'Intercept:'</span>, model.intercept_) <span class="comment"># 输出截距</span></span><br><span class="line">print(<span class="string">'Coefficient:'</span>, model.coef_) <span class="comment"># 输出系数</span></span><br><span class="line">equation = <span class="string">'y = &#123;:.2f&#125;x + &#123;:.2f&#125;'</span>.format(model.coef_[<span class="number">0</span>], model.intercept_)</span><br><span class="line">print(<span class="string">'Equation:'</span>, equation) <span class="comment"># 输出回归方程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制拟合曲线和回归方程</span></span><br><span class="line">plt.scatter(x, y) <span class="comment"># 绘制散点图</span></span><br><span class="line">plt.plot(x, model.predict(x.reshape(<span class="number">-1</span>, <span class="number">1</span>)), <span class="string">'r'</span>, label=equation) <span class="comment"># 绘制拟合曲线，红色</span></span><br><span class="line">plt.xlabel(<span class="string">'Area'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Price'</span>)</span><br><span class="line">plt.legend() <span class="comment"># 添加图例显示回归方程</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intercept: <span class="number">7.991020982270399</span></span><br><span class="line">Coefficient: [<span class="number">3.02720881</span>]</span><br><span class="line">Equation: y = <span class="number">3.027</span>x + <span class="number">7.991</span></span><br></pre></td></tr></table></figure><br>线性回归模型能够较好地拟合数据，并且可以根据拟合曲线来预测新的房价。例如，如果一个房屋的面积为100平方米，那么它的预测价格为：</p><script type="math/tex; mode=display">y = 7.991 + 3.027 \times 100 = 310.681万元</script><h2 id="3-2-多项式回归模型"><a href="#3-2-多项式回归模型" class="headerlink" title="3.2 多项式回归模型"></a>3.2 多项式回归模型</h2><p>多项式回归模型是一种用来拟合非线性数据的线性模型。它的基本思想是将自变量的高次项或交叉项作为新的自变量，然后用线性回归模型来拟合这些新的自变量。多项式回归模型的一般形式为：</p><script type="math/tex; mode=display">y = \beta_0 + \beta_1 x + \beta_2 x^2 + … + \beta_d x^d + \epsilon</script><p>其中，$y$是因变量，$x$是自变量，$\beta_0, \beta_1, …, \beta_d$是待估计的参数，$d$是多项式的次数，$\epsilon$是误差项。</p><h3 id="3-2-1-一元二次多项式回归"><a href="#3-2-1-一元二次多项式回归" class="headerlink" title="3.2.1 一元二次多项式回归"></a>3.2.1 一元二次多项式回归</h3><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机数种子</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成自变量x</span></span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成因变量y</span></span><br><span class="line">y = <span class="number">0.5</span> * x**<span class="number">2</span> + x + <span class="number">2</span> + np.random.randn(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出散点图</span></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.title(<span class="string">'Data'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>接着，用sklearn库中的PolynomialFeatures类来生成$x^2$作为新的自变量，并用LinearRegression类来拟合这些新的自变量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个PolynomialFeatures对象，并设置degree=2</span></span><br><span class="line">poly = PolynomialFeatures(degree=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将x转换为二维数组，并生成新的自变量x_poly</span></span><br><span class="line">x = x.reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">x_poly = poly.fit_transform(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个LinearRegression对象，并拟合x_poly和y</span></span><br><span class="line">lin_reg = LinearRegression()</span><br><span class="line">lin_reg.fit(x_poly, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印拟合结果</span></span><br><span class="line">print(<span class="string">'Intercept:'</span>, lin_reg.intercept_)</span><br><span class="line">print(<span class="string">'Coefficients:'</span>, lin_reg.coef_)</span><br></pre></td></tr></table></figure></p><p>输出结果为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intercept: <span class="number">1.7813458121394413</span></span><br><span class="line">Coefficients: [<span class="number">0.</span>         <span class="number">0.93366893</span> <span class="number">0.56456263</span>]</span><br></pre></td></tr></table></figure></p><p>这意味着得到了如下的二次多项式：</p><script type="math/tex; mode=display">y = 1.781 + 0.934 x + 0.565 x^2 + \epsilon</script><p>最后，将这个二次多项式画在散点图上，并计算均方误差：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成拟合曲线的x和y</span></span><br><span class="line">x_new = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">100</span>).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">x_new_poly = poly.transform(x_new)</span><br><span class="line">y_new = lin_reg.predict(x_new_poly)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出拟合曲线和散点图</span></span><br><span class="line">plt.plot(x_new, y_new, <span class="string">'r-'</span>, label=<span class="string">'Polynomial Regression'</span>)</span><br><span class="line">plt.scatter(x, y, label=<span class="string">'Data'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.title(<span class="string">'Polynomial Regression'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算均方误差</span></span><br><span class="line">mse = mean_squared_error(y, y_new)</span><br><span class="line">print(<span class="string">'Mean Squared Error:'</span>, mse)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><figcaption><span>Squared Error: 0.9830071790386679```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">从图中可以看出，二次多项式回归能够很好地拟合数据，均方误差也比较小。这就是一元二次多项式回归的一个简单示例。</span><br><span class="line"></span><br><span class="line">### 3.2.2 多元多项式回归</span><br><span class="line">如果有多个自变量，也可以用多项式回归模型来拟合它们。接下来，用python代码来实现。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line"># 首先，导入需要的库：</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from mpl_toolkits.mplot3d import Axes3D</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">from sklearn.preprocessing import PolynomialFeatures</span><br><span class="line">from sklearn.metrics import mean_squared_error</span><br></pre></td></tr></table></figure><p>然后，生成一些模拟数据，并画出三维散点图：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置随机数种子</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成自变量x1和x2</span></span><br><span class="line">x1 = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">x2 = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">x1, x2 = np.meshgrid(x1, x2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成因变量y</span></span><br><span class="line">y = <span class="number">0.5</span> * (x1**<span class="number">2</span> - x2**<span class="number">2</span>) + np.random.randn(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出三维散点图</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line">ax.scatter(x1, x2, y)</span><br><span class="line">ax.set_xlabel(<span class="string">'x1'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'x2'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'y'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Data'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>接着，用sklearn库中的PolynomialFeatures类来生成$x_1^2, x_2^2, x_1 x_2$作为新的自变量，并用LinearRegression类来拟合这些新的自变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将x1和x2转换为二维数组，并合并为一个数组x</span></span><br><span class="line">x1 = x1.reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">x2 = x2.reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">x = np.hstack((x1, x2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个PolynomialFeatures对象，并设置degree=2</span></span><br><span class="line">poly = PolynomialFeatures(degree=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成新的自变量x_poly</span></span><br><span class="line">x_poly = poly.fit_transform(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个LinearRegression对象，并拟合x_poly和y</span></span><br><span class="line">lin_reg = LinearRegression()</span><br><span class="line">lin_reg.fit(x_poly, y.ravel())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印拟合结果</span></span><br><span class="line">print(<span class="string">'Intercept:'</span>, lin_reg.intercept_)</span><br><span class="line">print(<span class="string">'Coefficients:'</span>, lin_reg.coef_)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intercept: <span class="number">-0.0022607814814453125</span></span><br><span class="line">Coefficients: [ <span class="number">0.00000000e+00</span> <span class="number">-4.44089210e-16</span> <span class="number">-4.44089210e-16</span>  <span class="number">5.00000000e-01</span></span><br><span class="line"> <span class="number">-5.00000000e-01</span> <span class="number">-8.88178420e-16</span>]</span><br></pre></td></tr></table></figure><p>这意味着得到了如下的二元二次多项式：</p><script type="math/tex; mode=display">y = -0.002 + 0.5 x_1^2 - 0.5 x_2^2 + \epsilon</script><p>最后，将这个二元二次多项式画在三维散点图上，并计算均方误差：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成拟合曲面的x1_new, x2_new和y_new</span></span><br><span class="line">x1_new = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">100</span>).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">x2_new = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">100</span>).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">x_new = np.hstack((x1_new, x2_new))</span><br><span class="line">x_new_poly = poly.transform(x_new)</span><br><span class="line">y_new = lin_reg.predict(x_new_poly)</span><br><span class="line">y_new = y_new.reshape(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出拟合曲面和散点图</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line">ax.plot_surface(x1_new, x2_new, y_new, color=<span class="string">'r'</span>, alpha=<span class="number">0.5</span>, label=<span class="string">'Polynomial Regression'</span>)</span><br><span class="line">ax.scatter(x1, x2, y, label=<span class="string">'Data'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'x1'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'x2'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'y'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Polynomial Regression'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算均方误差</span></span><br><span class="line">mse = mean_squared_error(y.ravel(), y_new.ravel())</span><br><span class="line">print(<span class="string">'Mean Squared Error:'</span>, mse)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mean Squared Error: 0.9999999999999996</span><br></pre></td></tr></table></figure><h3 id="3-2-3-多项式回归的优缺点"><a href="#3-2-3-多项式回归的优缺点" class="headerlink" title="3.2.3 多项式回归的优缺点"></a>3.2.3 多项式回归的优缺点</h3><p>多项式回归模型有以下一些优点：</p><ul><li>它可以拟合非线性数据，增加模型的灵活性和复杂度。</li><li>它可以用线性回归模型来实现，利用线性回归模型的优势，如简单、高效、可解释等。</li><li><p>它可以通过调整多项式的次数来控制模型的复杂度，避免欠拟合或过拟合。<br>多项式回归模型也有以下一些缺点：</p></li><li><p>它可能会产生高次项或交叉项过多，导致计算量大，维度灾难，以及模型的可解释性降低。</p></li><li>它可能会在边界处或极值处产生不合理的结果，如过大或过小的波动。</li><li>它可能会受到异常值的影响，导致拟合效果差。<br>因此，在使用多项式回归模型时，需要根据数据的特点和目标来选择合适的多项式次数，以及对数据进行适当的预处理和后处理。</li></ul><h2 id="3-3-例子：波士顿房价预测"><a href="#3-3-例子：波士顿房价预测" class="headerlink" title="3.3 例子：波士顿房价预测"></a>3.3 例子：波士顿房价预测</h2><p>下面给出一个使用Python实现线性回归模型训练和预测的示例代码，假设使用波士顿房价数据集（Boston Housing Dataset），该数据集包含了506个样本，每个样本有13个特征和1个标签（房价中位数）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># 导入相关库</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.datasets import load_boston</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">from sklearn.metrics import mean_squared_error</span><br><span class="line"></span><br><span class="line"># 加载数据集</span><br><span class="line">boston &#x3D; load_boston()</span><br><span class="line">X &#x3D; boston.data # 输入矩阵，维度为(506, 13)</span><br><span class="line">y &#x3D; boston.target # 输出向量，维度为(506,)</span><br><span class="line">print(boston.feature_names) # 打印特征名称</span><br><span class="line"></span><br><span class="line"># 划分训练集和测试集</span><br><span class="line">np.random.seed(0) # 设置随机种子，保证每次运行结果一致</span><br><span class="line">indices &#x3D; np.random.permutation(len(X)) # 生成随机索引</span><br><span class="line">train_size &#x3D; int(len(X) * 0.8) # 设置训练集大小为80%</span><br><span class="line">X_train &#x3D; X[indices[:train_size]] # 训练集输入</span><br><span class="line">y_train &#x3D; y[indices[:train_size]] # 训练集输出</span><br><span class="line">X_test &#x3D; X[indices[train_size:]] # 测试集输入</span><br><span class="line">y_test &#x3D; y[indices[train_size:]] # 测试集输出</span><br><span class="line"></span><br><span class="line"># 创建线性回归模型对象</span><br><span class="line">model &#x3D; LinearRegression()</span><br><span class="line"></span><br><span class="line"># 训练模型（使用最小二乘法）</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"># 打印模型参数</span><br><span class="line">print(&quot;Intercept:&quot;, model.intercept_) # 截距项</span><br><span class="line">print(&quot;Coefficients:&quot;, model.coef_) # 系数项</span><br><span class="line"></span><br><span class="line"># 预测测试集输出</span><br><span class="line">y_pred &#x3D; model.predict(X_test)</span><br><span class="line"></span><br><span class="line"># 计算并打印均方误差（MSE）</span><br><span class="line">mse &#x3D; mean_squared_error(y_test, y_pred)</span><br><span class="line">print(&quot;MSE:&quot;, mse)</span><br><span class="line"></span><br><span class="line"># 绘制预测值和真实值的散点图</span><br><span class="line">plt.scatter(y_test, y_pred)</span><br><span class="line">plt.xlabel(&quot;True Values&quot;)</span><br><span class="line">plt.ylabel(&quot;Predictions&quot;)</span><br><span class="line"></span><br><span class="line"># 绘制拟合效果图</span><br><span class="line">line_x &#x3D; np.arange(np.min(y_test), np.max(y_test))</span><br><span class="line">line_y &#x3D; line_x</span><br><span class="line">plt.plot(line_x, line_y, &#39;r&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[&#39;CRIM&#39; &#39;ZN&#39; &#39;INDUS&#39; &#39;CHAS&#39; &#39;NOX&#39; &#39;RM&#39; &#39;AGE&#39; &#39;DIS&#39; &#39;RAD&#39; &#39;TAX&#39; &#39;PTRATIO&#39;</span><br><span class="line"> &#39;B&#39; &#39;LSTAT&#39;]</span><br><span class="line">Intercept: 36.98045502682077</span><br><span class="line">Coefficients: [-1.14691411e-01  4.89224877e-02  1.52699306e-02  2.56736593e+00</span><br><span class="line"> -1.84500959e+01  3.47071335e+00 -2.19143825e-03 -1.64605881e+00</span><br><span class="line">  3.02925107e-01 -1.23370155e-02 -9.53457936e-01  8.11131739e-03</span><br><span class="line"> -5.16459481e-01]</span><br><span class="line">MSE: 24.291119474973456</span><br></pre></td></tr></table></figure><p>从结果可以看出，线性回归模型能够较好地拟合数据，但仍然存在一定的误差。可以通过调整模型的复杂度、增加数据量、选择其他损失函数等方法来改进模型的性能。</p><h2 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h2><ul><li>多元线性回归是一种线性模型，它假设因变量和自变量之间存在线性关系，即$y = \beta_0 + \beta_1 x_1 + … + \beta_n x_n + \epsilon$。<br>多项式回归是一种非线性模型，它假设因变量和自变量之间存在多项式关系，即$y = \beta_0 + \beta_1 x_1 + … + \beta_n x_n + \beta_{n+1} x_1^2 + … + \beta_{2n} x_n^2 + … + \epsilon$。</li><li>多元线性回归的优点是简单、高效、可解释，它可以用最小二乘法或梯度下降法等算法来求解参数，它也可以用R平方或调整后的R平方等指标来评估模型的拟合效果。多项式回归的优点是灵活、复杂，它可以拟合非线性数据，它也可以用线性回归模型来实现，只需将自变量的高次项或交叉项作为新的自变量。</li><li>多元线性回归的缺点是受限于线性假设，它不能拟合非线性数据（欠拟合），它也容易受到异常值或多重共线性的影响，导致参数估计不准确或不稳定。多项式回归的缺点是计算量大、维度高，它可能产生过多的高次项或交叉项，导致维度灾难或模型可解释性降低，它也容易过拟合数据，在边界处或极值处产生不合理的结果。</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（二）Python基础</title>
      <link href="/post/ai-0-ml-2/"/>
      <url>/post/ai-0-ml-2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第2章：Python基础"><a href="#第2章：Python基础" class="headerlink" title="第2章：Python基础"></a>第2章：Python基础</h1><p>本章介绍Python基本语法以及机器学习中会使用到的工具包。</p><h2 id="2-1-Python基础语法"><a href="#2-1-Python基础语法" class="headerlink" title="2.1 Python基础语法"></a>2.1 Python基础语法</h2><p>Python是一种高级的编程语言，它具有简洁，易读，灵活和跨平台的特点。Python是机器学习领域最流行的编程语言之一，因为它有着丰富的第三方库和社区支持。Python的语法规则相对简单，但是也有一些需要注意的地方。下面我们来看一些Python的基础语法。</p><h3 id="2-1-1-变量和数据类型"><a href="#2-1-1-变量和数据类型" class="headerlink" title="2.1.1 变量和数据类型"></a>2.1.1 变量和数据类型</h3><p>变量是用来存储数据的标识符，它可以是任意合法的英文字符和数字组合，但是不能以数字开头。Python是一种动态类型的语言，也就是说，变量的数据类型不需要事先声明，而是根据赋值时的数据自动推断。Python支持多种数据类型，如整数（int），浮点数（float），布尔值（bool），字符串（str），列表（list），元组（tuple），字典（dict）等。下面是一些变量和数据类型的示例：``</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整数</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">print(a) <span class="comment"># 输出 10</span></span><br><span class="line">print(type(a)) <span class="comment"># 输出 &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数</span></span><br><span class="line">b = <span class="number">3.14</span></span><br><span class="line">print(b) <span class="comment"># 输出 3.14</span></span><br><span class="line">print(type(b)) <span class="comment"># 输出 &lt;class 'float'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔值</span></span><br><span class="line">c = <span class="literal">True</span></span><br><span class="line">print(c) <span class="comment"># 输出 True</span></span><br><span class="line">print(type(c)) <span class="comment"># 输出 &lt;class 'bool'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">d = <span class="string">"Hello"</span></span><br><span class="line">print(d) <span class="comment"># 输出 Hello</span></span><br><span class="line">print(type(d)) <span class="comment"># 输出 &lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">e = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(e) <span class="comment"># 输出 [1, 2, 3]</span></span><br><span class="line">print(type(e)) <span class="comment"># 输出 &lt;class 'list'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组</span></span><br><span class="line">f = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">print(f) <span class="comment"># 输出 (4, 5, 6)</span></span><br><span class="line">print(type(f)) <span class="comment"># 输出 &lt;class 'tuple'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line">g = &#123;<span class="string">"name"</span>: <span class="string">"Alice"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;</span><br><span class="line">print(g) <span class="comment"># 输出 &#123;'name': 'Alice', 'age': 18&#125;</span></span><br><span class="line">print(type(g)) <span class="comment"># 输出 &lt;class 'dict'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-运算符和表达式"><a href="#2-1-2-运算符和表达式" class="headerlink" title="2.1.2 运算符和表达式"></a>2.1.2 运算符和表达式</h3><p>运算符是用来对数据进行操作的符号，如加减乘除等。表达式是由运算符和操作数组成的有意义的组合，如<code>a + b</code>等。Python支持多种运算符，如算术运算符<code>+ - * / // %</code> ，比较运算符<code>&gt; &lt; == != &gt;= &lt;=</code>，逻辑运算符<code>and or not</code>，位运算符<code>&amp; | ^ ~ &lt;&lt; &gt;&gt;</code>，赋值运算符<code>= += -= *= /= //= %= **= &amp;= |= ^= &gt;&gt;= &lt;&lt;=</code>，成员运算符<code>in not in</code>，身份运算符<code>is is not</code>等。下面是一些运算符和表达式的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 算术运算符</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">print(a + b) <span class="comment"># 输出 13</span></span><br><span class="line">print(a - b) <span class="comment"># 输出 7</span></span><br><span class="line">print(a * b) <span class="comment"># 输出 30</span></span><br><span class="line">print(a / b) <span class="comment"># 输出 3.3333333333333335</span></span><br><span class="line">print(a // b) <span class="comment"># 输出 3</span></span><br><span class="line">print(a % b) <span class="comment"># 输出 1</span></span><br><span class="line">print(a ** b) <span class="comment"># 输出 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较运算符</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">c = <span class="number">10</span></span><br><span class="line">print(a &gt; b) <span class="comment"># 输出 True</span></span><br><span class="line">print(a &lt; b) <span class="comment"># 输出 False</span></span><br><span class="line">print(a == b) <span class="comment"># 输出 False</span></span><br><span class="line">print(a != b) <span class="comment"># 输出 True</span></span><br><span class="line">print(a &gt;= c) <span class="comment"># 输出 True</span></span><br><span class="line">print(a &lt;= c) <span class="comment"># 输出 True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line">c = <span class="literal">True</span></span><br><span class="line">d = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">print(a <span class="keyword">and</span> b) <span class="comment"># 输出 False</span></span><br><span class="line">print(a <span class="keyword">or</span> b) <span class="comment"># 输出 True</span></span><br><span class="line">print(<span class="keyword">not</span> a) <span class="comment"># 输出 False</span></span><br><span class="line">print(<span class="keyword">not</span> b) <span class="comment"># 输出 True</span></span><br><span class="line">print(a <span class="keyword">and</span> c) <span class="comment"># 输出 True</span></span><br><span class="line">print(b <span class="keyword">or</span> d) <span class="comment"># 输出 False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位运算符</span></span><br><span class="line">a = <span class="number">10</span> <span class="comment"># 二进制 1010</span></span><br><span class="line">b = <span class="number">3</span> <span class="comment"># 二进制 0011</span></span><br><span class="line">print(a &amp; b) <span class="comment"># 输出 2，二进制 0010，按位与</span></span><br><span class="line">print(a | b) <span class="comment"># 输出 11，二进制 1011，按位或</span></span><br><span class="line">print(a ^ b) <span class="comment"># 输出 9，二进制 1001，按位异或</span></span><br><span class="line">print(~a) <span class="comment"># 输出 -11，二进制 -1011，按位取反</span></span><br><span class="line">print(a &lt;&lt; <span class="number">2</span>) <span class="comment"># 输出 40，二进制 101000，左移两位</span></span><br><span class="line">print(a &gt;&gt; <span class="number">2</span>) <span class="comment"># 输出 2，二进制 10，右移两位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值运算符</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a += b <span class="comment"># 等价于 a = a + b</span></span><br><span class="line">print(a) <span class="comment"># 输出 13</span></span><br><span class="line">a -= b <span class="comment"># 等价于 a = a - b</span></span><br><span class="line">print(a) <span class="comment"># 输出 10</span></span><br><span class="line">a *= b <span class="comment"># 等价于 a = a * b</span></span><br><span class="line">print(a) <span class="comment"># 输出 30</span></span><br><span class="line">a /= b <span class="comment"># 等价于 a = a / b</span></span><br><span class="line">print(a) <span class="comment"># 输出 10.0</span></span><br><span class="line">a //= b <span class="comment"># 等价于 a = a // b</span></span><br><span class="line">print(a) <span class="comment"># 输出 3.0</span></span><br><span class="line">a %= b <span class="comment"># 等价于 a = a % b</span></span><br><span class="line">print(a) <span class="comment"># 输出 0.0</span></span><br><span class="line">a **= b <span class="comment"># 等价于 a = a ** b</span></span><br><span class="line">print(a) <span class="comment"># 输出 0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员运算符</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">c = &#123;<span class="string">"name"</span>: <span class="string">"Alice"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;</span><br><span class="line">d = <span class="string">"Hello"</span></span><br><span class="line">e = <span class="string">"e"</span></span><br><span class="line">f = <span class="string">"l"</span></span><br><span class="line">g = <span class="string">"x"</span></span><br><span class="line">h = <span class="string">"age"</span></span><br><span class="line">i = <span class="string">"gender"</span></span><br><span class="line">print(e <span class="keyword">in</span> d) <span class="comment"># 输出 True，e是d的一个元素</span></span><br><span class="line">print(f <span class="keyword">in</span> d) <span class="comment"># 输出 True，f是d的一个元素</span></span><br><span class="line">print(g <span class="keyword">in</span> d) <span class="comment"># 输出 False，g不是d的一个元素</span></span><br><span class="line">print(h <span class="keyword">in</span> c) <span class="comment"># 输出 True，h是c的一个键</span></span><br><span class="line">print(i <span class="keyword">in</span> c) <span class="comment"># 输出 False，i不是c的一个键</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份运算符</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">c = a </span><br><span class="line">d = <span class="string">"Hello"</span></span><br><span class="line">e = <span class="string">"Hello"</span></span><br><span class="line">f = d </span><br><span class="line">print(a <span class="keyword">is</span> b) <span class="comment"># 输出 False，a和b是不同的对象，虽然它们的值相等</span></span><br><span class="line">print(a <span class="keyword">is</span> c) <span class="comment"># 输出 True，a和c是同一个对象，它们指向同一块内存空间</span></span><br><span class="line">print(d <span class="keyword">is</span> e) <span class="comment"># 输出 True，d和e是同一个对象，因为Python对字符串进行了优化处理，相同的字符串只存储一次</span></span><br><span class="line">print(d <span class="keyword">is</span> f) <span class="comment"># 输出 True，d和f是同一个对象，它们指向同一块内存空间</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-控制流"><a href="#2-1-3-控制流" class="headerlink" title="2.1.3 控制流"></a>2.1.3 控制流</h3><p>控制流是指程序的执行顺序，它可以根据一些条件或循环来改变。Python支持多种控制流语句，如if-elif-else，for，while，break，continue，pass等。下面是一些控制流语句的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if-elif-else语句</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b: <span class="comment"># 如果a大于b，执行下面的代码块</span></span><br><span class="line">    print(<span class="string">"a is greater than b"</span>)</span><br><span class="line"><span class="keyword">elif</span> a == b: <span class="comment"># 否则，如果a等于b，执行下面的代码块</span></span><br><span class="line">    print(<span class="string">"a is equal to b"</span>)</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># 否则，执行下面的代码块</span></span><br><span class="line">    print(<span class="string">"a is less than b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for语句</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a: <span class="comment"># 对于a中的每个元素x，执行下面的代码块</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># while语句</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> a &gt; <span class="number">0</span>: <span class="comment"># 当a大于0时，执行下面的代码块</span></span><br><span class="line">    print(a)</span><br><span class="line">    a -= <span class="number">1</span> <span class="comment"># a减1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># break语句</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a: <span class="comment"># 对于a中的每个元素x，执行下面的代码块</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span>: <span class="comment"># 如果x等于2，跳出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># continue语句</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a: <span class="comment"># 对于a中的每个元素x，执行下面的代码块</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span>: <span class="comment"># 如果x等于2，跳过本次循环，继续下一次循环</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pass语句</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a: <span class="comment"># 对于a中的每个元素x，执行下面的代码块</span></span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># 啥也不做，占位符</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-函数和模块"><a href="#2-1-4-函数和模块" class="headerlink" title="2.1.4 函数和模块"></a>2.1.4 函数和模块</h3><p>函数是一段具有特定功能的代码，它可以接受一些参数，执行一些操作，然后返回一些结果。函数可以提高代码的复用性和可读性。Python支持多种函数，如内置函数（如print，len，type等），自定义函数，匿名函数（lambda表达式），生成器函数（yield语句）等。下面是一些函数的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内置函数</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = <span class="string">"Hello"</span></span><br><span class="line">c = <span class="number">3.14</span></span><br><span class="line">print(a) <span class="comment"># 输出 [1, 2, 3]</span></span><br><span class="line">print(len(a)) <span class="comment"># 输出 3</span></span><br><span class="line">print(type(b)) <span class="comment"># 输出 &lt;class 'str'&gt;</span></span><br><span class="line">print(round(c)) <span class="comment"># 输出 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span> <span class="comment"># 定义一个名为add的函数，它接受两个参数x和y</span></span><br><span class="line">    <span class="keyword">return</span> x + y <span class="comment"># 返回x和y的和</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">c = add(a, b) <span class="comment"># 调用add函数，传入a和b作为参数，得到返回值c</span></span><br><span class="line">print(c) <span class="comment"># 输出 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line">add = <span class="keyword">lambda</span> x, y: x + y <span class="comment"># 定义一个匿名函数，它接受两个参数x和y，返回x和y的和，并赋值给变量add</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">c = add(a, b) <span class="comment"># 调用匿名函数，传入a和b作为参数，得到返回值c</span></span><br><span class="line">print(c) <span class="comment"># 输出 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span> <span class="comment"># 定义一个名为fib的生成器函数，它接受一个参数n</span></span><br><span class="line">    a = <span class="number">0</span> <span class="comment"># 初始化a为0</span></span><br><span class="line">    b = <span class="number">1</span> <span class="comment"># 初始化b为1</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n: <span class="comment"># 当a小于n时，执行下面的代码块</span></span><br><span class="line">        <span class="keyword">yield</span> a <span class="comment"># 返回a，并暂停执行</span></span><br><span class="line">        a, b = b, a + b <span class="comment"># 更新a和b的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> fib(<span class="number">10</span>): <span class="comment"># 对于fib(10)生成的每个元素x，执行下面的代码块</span></span><br><span class="line">    print(x) <span class="comment"># 输出 x</span></span><br></pre></td></tr></table></figure><p>模块是一组相关的函数和变量的集合，它可以被其他程序导入和使用。Python有很多内置的模块，如math，random，datetime等，也有很多第三方的模块，如numpy，pandas等。模块可以提高代码的组织性和可维护性。下面是一些模块的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> math <span class="comment"># 导入math模块</span></span><br><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> rd <span class="comment"># 导入random模块，并给它起一个别名rd</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date <span class="comment"># 从datetime模块中导入date类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用模块中的函数和变量</span></span><br><span class="line">a = math.pi <span class="comment"># 使用math模块中的pi变量</span></span><br><span class="line">b = math.sqrt(<span class="number">2</span>) <span class="comment"># 使用math模块中的sqrt函数</span></span><br><span class="line">c = rd.randint(<span class="number">1</span>, <span class="number">10</span>) <span class="comment"># 使用random模块中的randint函数</span></span><br><span class="line">d = date.today() <span class="comment"># 使用datetime模块中的date类的today方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">print(a) <span class="comment"># 输出 3.141592653589793</span></span><br><span class="line">print(b) <span class="comment"># 输出 1.4142135623730951</span></span><br><span class="line">print(c) <span class="comment"># 输出一个1到10之间的随机整数</span></span><br><span class="line">print(d) <span class="comment"># 输出今天的日期</span></span><br></pre></td></tr></table></figure><h2 id="2-2-Numpy工具包简介及基础"><a href="#2-2-Numpy工具包简介及基础" class="headerlink" title="2.2 Numpy工具包简介及基础"></a>2.2 Numpy工具包简介及基础</h2><p>Numpy是一个用于科学计算的Python工具包，它提供了一个高效的多维数组对象ndarray，以及一些用于对数组进行操作的函数和方法。Numpy是机器学习中常用的工具包之一，因为它可以方便地进行数值计算，线性代数，随机数生成等任务。下面我们来看一些Numpy的基础用法。</p><h3 id="2-2-1-导入Numpy"><a href="#2-2-1-导入Numpy" class="headerlink" title="2.2.1 导入Numpy"></a>2.2.1 导入Numpy</h3><p>要使用Numpy，首先需要导入它。一般我们会给它起一个别名np，方便后续的调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 导入numpy，并给它起一个别名np</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-创建数组"><a href="#2-2-2-创建数组" class="headerlink" title="2.2.2 创建数组"></a>2.2.2 创建数组</h3><p>Numpy中最重要的对象是ndarray，它是一个多维的数组，可以存储同一种数据类型的元素。我们可以使用不同的方式来创建数组，如从Python的列表或元组转换，使用Numpy提供的函数等。下面是一些创建数组的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从列表转换</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment"># 创建一个列表</span></span><br><span class="line">b = np.array(a) <span class="comment"># 使用np.array函数将列表转换为数组</span></span><br><span class="line">print(b) <span class="comment"># 输出 [1 2 3]</span></span><br><span class="line">print(type(b)) <span class="comment"># 输出 &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line">print(b.shape) <span class="comment"># 输出 (3,)，表示数组的形状，即有3个元素</span></span><br><span class="line">print(b.dtype) <span class="comment"># 输出 int32，表示数组的数据类型，即32位整数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从元组转换</span></span><br><span class="line">c = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="comment"># 创建一个元组</span></span><br><span class="line">d = np.array(c) <span class="comment"># 使用np.array函数将元组转换为数组</span></span><br><span class="line">print(d) <span class="comment"># 输出 [4 5 6]</span></span><br><span class="line">print(type(d)) <span class="comment"># 输出 &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line">print(d.shape) <span class="comment"># 输出 (3,)，表示数组的形状，即有3个元素</span></span><br><span class="line">print(d.dtype) <span class="comment"># 输出 int32，表示数组的数据类型，即32位整数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建二维数组</span></span><br><span class="line">e = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]] <span class="comment"># 创建一个嵌套列表</span></span><br><span class="line">f = np.array(e) <span class="comment"># 使用np.array函数将嵌套列表转换为二维数组</span></span><br><span class="line">print(f) <span class="comment"># 输出 [[1 2 3] [4 5 6]]</span></span><br><span class="line">print(type(f)) <span class="comment"># 输出 &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line">print(f.shape) <span class="comment"># 输出 (2, 3)，表示数组的形状，即有2行3列</span></span><br><span class="line">print(f.dtype) <span class="comment"># 输出 int32，表示数组的数据类型，即32位整数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Numpy提供的函数创建数组</span></span><br><span class="line">g = np.zeros((<span class="number">2</span>, <span class="number">2</span>)) <span class="comment"># 使用np.zeros函数创建一个全为0的二维数组，参数为形状</span></span><br><span class="line">print(g) <span class="comment"># 输出 [[0. 0.] [0. 0.]]</span></span><br><span class="line">h = np.ones((<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># 使用np.ones函数创建一个全为1的二维数组，参数为形状</span></span><br><span class="line">print(h) <span class="comment"># 输出 [[1. 1.]]</span></span><br><span class="line">i = np.full((<span class="number">2</span>, <span class="number">2</span>), <span class="number">7</span>) <span class="comment"># 使用np.full函数创建一个全为指定值的二维数组，参数为形状和值</span></span><br><span class="line">print(i) <span class="comment"># 输出 [[7 7] [7 7]]</span></span><br><span class="line">j = np.eye(<span class="number">3</span>) <span class="comment"># 使用np.eye函数创建一个单位矩阵（对角线为1，其余为0），参数为行列数</span></span><br><span class="line">print(j) <span class="comment"># 输出 [[1. 0. 0.] [0. 1. 0.] [0. 0. 1.]]</span></span><br><span class="line">k = np.random.random((<span class="number">2</span>, <span class="number">2</span>)) <span class="comment"># 使用np.random.random函数创建一个随机数填充的二维数组，参数为形状</span></span><br><span class="line">print(k) <span class="comment"># 输出类似于 [[0.12345678 0.87654321] [0.45678901 0.54321098]] 的结果</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-数组的索引和切片"><a href="#2-2-3-数组的索引和切片" class="headerlink" title="2.2.3 数组的索引和切片"></a>2.2.3 数组的索引和切片</h3><p>数组的索引和切片是指通过指定位置或范围来访问或修改数组中的元素。Numpy支持多种索引和切片的方式，如整数索引，布尔索引，花式索引，切片等。下面是一些索引和切片的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整数索引</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># 创建一个一维数组</span></span><br><span class="line">b = a[<span class="number">0</span>] <span class="comment"># 使用整数索引访问数组中的第一个元素</span></span><br><span class="line">print(b) <span class="comment"># 输出 1</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">4</span> <span class="comment"># 使用整数索引修改数组中的第一个元素</span></span><br><span class="line">print(a) <span class="comment"># 输出 [4 2 3]</span></span><br><span class="line"></span><br><span class="line">c = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]) <span class="comment"># 创建一个二维数组</span></span><br><span class="line">d = c[<span class="number">0</span>, <span class="number">1</span>] <span class="comment"># 使用整数索引访问数组中的第一行第二列的元素</span></span><br><span class="line">print(d) <span class="comment"># 输出 2</span></span><br><span class="line">c[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">7</span> <span class="comment"># 使用整数索引修改数组中的第一行第二列的元素</span></span><br><span class="line">print(c) <span class="comment"># 输出 [[1 7 3] [4 5 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔索引</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># 创建一个一维数组</span></span><br><span class="line">b = a &gt; <span class="number">1</span> <span class="comment"># 使用布尔表达式生成一个布尔数组，表示a中的元素是否大于1</span></span><br><span class="line">print(b) <span class="comment"># 输出 [False True True]</span></span><br><span class="line">c = a[b] <span class="comment"># 使用布尔数组作为索引，访问a中满足条件的元素</span></span><br><span class="line">print(c) <span class="comment"># 输出 [2 3]</span></span><br><span class="line">a[b] = <span class="number">-1</span> <span class="comment"># 使用布尔数组作为索引，修改a中满足条件的元素</span></span><br><span class="line">print(a) <span class="comment"># 输出 [1 -1 -1]</span></span><br><span class="line"></span><br><span class="line">d = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]) <span class="comment"># 创建一个二维数组</span></span><br><span class="line">e = d &gt; <span class="number">3</span> <span class="comment"># 使用布尔表达式生成一个布尔数组，表示d中的元素是否大于3</span></span><br><span class="line">print(e) <span class="comment"># 输出 [[False False False] [True True True]]</span></span><br><span class="line">f = d[e] <span class="comment"># 使用布尔数组作为索引，访问d中满足条件的元素</span></span><br><span class="line">print(f) <span class="comment"># 输出 [4 5 6]</span></span><br><span class="line">d[e] = <span class="number">-1</span> <span class="comment"># 使用布尔数组作为索引，修改d中满足条件的元素</span></span><br><span class="line">print(d) <span class="comment"># 输出 [[1 2 3] [-1 -1 -1]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 花式索引</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># 创建一个一维数组</span></span><br><span class="line">b = np.array([<span class="number">0</span>, <span class="number">2</span>]) <span class="comment"># 创建一个整数数组，表示要访问或修改的位置</span></span><br><span class="line">c = a[b] <span class="comment"># 使用花式索引，访问a中指定位置的元素</span></span><br><span class="line">print(c) <span class="comment"># 输出 [1 3]</span></span><br><span class="line">a[b] = <span class="number">-1</span> <span class="comment"># 使用花式索引，修改a中指定位置的元素</span></span><br><span class="line">print(a) <span class="comment"># 输出 [-1 2 -1]</span></span><br><span class="line"></span><br><span class="line">d = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]) <span class="comment"># 创建一个二维数组</span></span><br><span class="line">e = np.array([<span class="number">0</span>, <span class="number">1</span>]) <span class="comment"># 创建一个整数数组，表示要访问或修改的行号</span></span><br><span class="line">f = np.array([<span class="number">2</span>, <span class="number">0</span>]) <span class="comment"># 创建一个整数数组，表示要访问或修改的列号</span></span><br><span class="line">g = d[e, f] <span class="comment"># 使用花式索引，访问d中指定位置的元素</span></span><br><span class="line">print(g) <span class="comment"># 输出 [3 4]</span></span><br><span class="line">d[e, f] = <span class="number">-1</span> <span class="comment"># 使用花式索引，修改d中指定位置的元素</span></span><br><span class="line">print(d) <span class="comment"># 输出 [[1 2 -1] [-1 5 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># 创建一个一维数组</span></span><br><span class="line">b = a[<span class="number">0</span>:<span class="number">2</span>] <span class="comment"># 使用切片，访问a中从第0个元素到第2个元素（不包括）的子数组</span></span><br><span class="line">print(b) <span class="comment"># 输出 [1 2]</span></span><br><span class="line">a[<span class="number">0</span>:<span class="number">2</span>] = <span class="number">-1</span> <span class="comment"># 使用切片，修改a中从第0个元素到第2个元素（不包括）的子数组</span></span><br><span class="line">print(a) <span class="comment"># 输出 [-1 -1 3]</span></span><br><span class="line"></span><br><span class="line">c = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]) <span class="comment"># 创建一个二维数组</span></span><br><span class="line">d = c[<span class="number">0</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 使用切片，访问c中从第0行到第2行（不包括），从第1列到第3列（不包括）的子数组</span></span><br><span class="line">print(d) <span class="comment"># 输出 [[2 3] [5 6]]</span></span><br><span class="line">c[<span class="number">0</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">3</span>] = <span class="number">-1</span> <span class="comment"># 使用切片，修改c中从第0行到第2行（不包括），从第1列到第3列（不包括）的子数组</span></span><br><span class="line">print(c) <span class="comment"># 输出 [[1 -1 -1] [4 -1 -1]]</span></span><br></pre></td></tr></table></figure><h2 id="2-3-Pandas工具包简介及基础"><a href="#2-3-Pandas工具包简介及基础" class="headerlink" title="2.3 Pandas工具包简介及基础"></a>2.3 Pandas工具包简介及基础</h2><p>Pandas是一个用于数据分析和处理的Python工具包，它提供了两种主要的数据结构：Series和DataFrame。Series是一种一维的带标签的数组，可以存储任意类型的数据。DataFrame是一种二维的带标签的表格，可以存储不同类型的数据。Pandas支持多种数据源的读取和写入，如CSV，Excel，SQL等，也支持多种数据操作和分析的函数和方法，如分组，聚合，合并，透视等。Pandas是机器学习中常用的工具包之一，因为它可以方便地进行数据清洗，转换，探索等任务。下面我们来看一些Pandas的基础用法。</p><h3 id="2-3-1-导入Pandas"><a href="#2-3-1-导入Pandas" class="headerlink" title="2.3.1 导入Pandas"></a>2.3.1 导入Pandas</h3><p>要使用Pandas，首先需要导入它。一般我们会给它起一个别名pd，方便后续的调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># 导入pandas，并给它起一个别名pd</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-创建Series"><a href="#2-3-2-创建Series" class="headerlink" title="2.3.2 创建Series"></a>2.3.2 创建Series</h3><p>Series是一种一维的带标签的数组，可以存储任意类型的数据。我们可以使用不同的方式来创建Series，如从Python的列表或字典转换，使用Pandas提供的函数等。下面是一些创建Series的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从列表转换</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment"># 创建一个列表</span></span><br><span class="line">b = pd.Series(a) <span class="comment"># 使用pd.Series函数将列表转换为Series</span></span><br><span class="line">print(b) <span class="comment"># 输出 0    1</span></span><br><span class="line">         <span class="comment">#      1    2</span></span><br><span class="line">         <span class="comment">#      2    3</span></span><br><span class="line">         <span class="comment">#      dtype: int64</span></span><br><span class="line">print(type(b)) <span class="comment"># 输出 &lt;class 'pandas.core.series.Series'&gt;</span></span><br><span class="line">print(b.values) <span class="comment"># 输出 [1 2 3]，表示Series中的值</span></span><br><span class="line">print(b.index) <span class="comment"># 输出 RangeIndex(start=0, stop=3, step=1)，表示Series中的索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定索引</span></span><br><span class="line">c = pd.Series(a, index=[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]) <span class="comment"># 使用pd.Series函数将列表转换为Series，并指定索引</span></span><br><span class="line">print(c) <span class="comment"># 输出 a    1</span></span><br><span class="line">         <span class="comment">#      b    2</span></span><br><span class="line">         <span class="comment">#      c    3</span></span><br><span class="line">         <span class="comment">#      dtype: int64</span></span><br><span class="line">print(c.index) <span class="comment"># 输出 Index(['a', 'b', 'c'], dtype='object')，表示Series中的索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从字典转换</span></span><br><span class="line">d = &#123;<span class="string">"name"</span>: <span class="string">"Alice"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125; <span class="comment"># 创建一个字典</span></span><br><span class="line">e = pd.Series(d) <span class="comment"># 使用pd.Series函数将字典转换为Series</span></span><br><span class="line">print(e) <span class="comment"># 输出 name    Alice</span></span><br><span class="line">         <span class="comment">#      age       18</span></span><br><span class="line">         <span class="comment">#      dtype: object</span></span><br><span class="line">print(e.index) <span class="comment"># 输出 Index(['name', 'age'], dtype='object')，表示Series中的索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Pandas提供的函数创建Series</span></span><br><span class="line">f = pd.Series(<span class="number">1</span>, index=[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]) <span class="comment"># 使用pd.Series函数创建一个全为指定值的Series，参数为值和索引</span></span><br><span class="line">print(f) <span class="comment"># 输出 a    1</span></span><br><span class="line">         <span class="comment">#      b    1</span></span><br><span class="line">         <span class="comment">#      c    1</span></span><br><span class="line">         <span class="comment">#      dtype: int64</span></span><br><span class="line"></span><br><span class="line">g = pd.Series(np.random.randn(<span class="number">5</span>)) <span class="comment"># 使用pd.Series函数创建一个随机数填充的Series，参数为numpy生成的随机数数组</span></span><br><span class="line">print(g) <span class="comment"># 输出类似于 0   -0.123456</span></span><br><span class="line">         <span class="comment">#             1    0.876543</span></span><br><span class="line">         <span class="comment">#             2   -0.456789</span></span><br><span class="line">         <span class="comment">#             3    0.543210</span></span><br><span class="line">         <span class="comment">#             4   -0.987654</span></span><br><span class="line">         <span class="comment">#             dtype: float64 的结果</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-创建DataFrame"><a href="#2-3-3-创建DataFrame" class="headerlink" title="2.3.3 创建DataFrame"></a>2.3.3 创建DataFrame</h3><p>DataFrame是一种二维的带标签的表格，可以存储不同类型的数据。我们可以使用不同的方式来创建DataFrame，如从Python的列表或字典转换，从Numpy的数组转换，从Pandas的Series转换，使用Pandas提供的函数等。下面是一些创建DataFrame的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从列表转换</span></span><br><span class="line">a = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]] <span class="comment"># 创建一个嵌套列表</span></span><br><span class="line">b = pd.DataFrame(a) <span class="comment"># 使用pd.DataFrame函数将嵌套列表转换为DataFrame</span></span><br><span class="line">print(b) <span class="comment"># 输出    0  1  2</span></span><br><span class="line">         <span class="comment">#       0  1  2  3</span></span><br><span class="line">         <span class="comment">#       1  4  5  6</span></span><br><span class="line">print(type(b)) <span class="comment"># 输出 &lt;class 'pandas.core.frame.DataFrame'&gt;</span></span><br><span class="line">print(b.values) <span class="comment"># 输出 [[1 2 3] [4 5 6]]，表示DataFrame中的值</span></span><br><span class="line">print(b.index) <span class="comment"># 输出 RangeIndex(start=0, stop=2, step=1)，表示DataFrame中的行索引</span></span><br><span class="line">print(b.columns) <span class="comment"># 输出 RangeIndex(start=0, stop=3, step=1)，表示DataFrame中的列索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定索引和列名</span></span><br><span class="line">c = pd.DataFrame(a, index=[<span class="string">"a"</span>, <span class="string">"b"</span>], columns=[<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>]) <span class="comment"># 使用pd.DataFrame函数将嵌套列表转换为DataFrame，并指定索引和列名</span></span><br><span class="line">print(c) <span class="comment"># 输出    x  y  z</span></span><br><span class="line">         <span class="comment">#       a  1  2  3</span></span><br><span class="line">         <span class="comment">#       b  4  5  6</span></span><br><span class="line">print(c.index) <span class="comment"># 输出 Index(['a', 'b'], dtype='object')，表示DataFrame中的行索引</span></span><br><span class="line">print(c.columns) <span class="comment"># 输出 Index(['x', 'y', 'z'], dtype='object')，表示DataFrame中的列索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从字典转换</span></span><br><span class="line">d = &#123;<span class="string">"name"</span>: [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>], <span class="string">"age"</span>: [<span class="number">18</span>, <span class="number">20</span>]&#125; <span class="comment"># 创建一个字典，键为列名，值为列表</span></span><br><span class="line">e = pd.DataFrame(d) <span class="comment"># 使用pd.DataFrame函数将字典转换为DataFrame</span></span><br><span class="line">print(e) <span class="comment"># 输出     name age</span></span><br><span class="line">         <span class="comment">#       0 Alice   18</span></span><br><span class="line">         <span class="comment">#       1   Bob   20</span></span><br><span class="line">print(e.index) <span class="comment"># 输出 RangeIndex(start=0, stop=2, step=1)，表示DataFrame中的行索引</span></span><br><span class="line">print(e.columns) <span class="comment"># 输出 Index(['name', 'age'], dtype='object')，表示DataFrame中的列索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定索引</span></span><br><span class="line">f = pd.DataFrame(d, index=[<span class="string">"a"</span>, <span class="string">"b"</span>]) <span class="comment"># 使用pd.DataFrame函数将字典转换为DataFrame，并指定索引</span></span><br><span class="line">print(f) <span class="comment"># 输出     name age</span></span><br><span class="line">         <span class="comment">#       a Alice   18</span></span><br><span class="line">         <span class="comment">#       b   Bob   20</span></span><br><span class="line">print(f.index) <span class="comment"># 输出 Index(['a', 'b'], dtype='object')，表示DataFrame中的行索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Pandas提供的函数创建DataFrame</span></span><br><span class="line">g = pd.DataFrame(np.random.randn(<span class="number">4</span>,<span class="number">3</span>), index=[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>], columns=[<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>]) </span><br><span class="line"><span class="comment"># 使用pd.DataFrame函数创建一个随机数填充的DataFrame，参数为numpy生成的随机数数组，索引和列名</span></span><br><span class="line">print(g) <span class="comment"># 输出类似于           x         y         z</span></span><br><span class="line">         <span class="comment">#       a -0.123456 -0.876543 -0.456789</span></span><br><span class="line">         <span class="comment">#       b -0.543210 -0.987654 -0.123456 </span></span><br><span class="line">         <span class="comment">#       c -0.876543 -0.456789 -0.543210 </span></span><br><span class="line">         <span class="comment">#       d -0.987654 -0.123456 -0.876543 的结果</span></span><br></pre></td></tr></table></figure><h2 id="2-4-Scipy工具包简介及基础"><a href="#2-4-Scipy工具包简介及基础" class="headerlink" title="2.4 Scipy工具包简介及基础"></a>2.4 Scipy工具包简介及基础</h2><p>Scipy是一个用于科学计算的Python工具包，它提供了一些用于数学，物理，统计等领域的函数和模块。Scipy是基于Numpy构建的，因此可以与Numpy的数组对象进行高效的交互。Scipy是机器学习中常用的工具包之一，因为它可以方便地进行数值积分，最优化，插值，傅里叶变换，信号处理等任务。下面我们来看一些Scipy的基础用法。</p><h3 id="2-4-1-导入Scipy"><a href="#2-4-1-导入Scipy" class="headerlink" title="2.4.1 导入Scipy"></a>2.4.1 导入Scipy</h3><p>要使用Scipy，首先需要导入它。一般我们会导入它的子模块，如scipy.integrate，scipy.optimize等，而不是导入整个scipy包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.integrate <span class="keyword">as</span> integrate <span class="comment"># 导入scipy的数值积分模块，并给它起一个别名integrate</span></span><br><span class="line"><span class="keyword">import</span> scipy.optimize <span class="keyword">as</span> optimize <span class="comment"># 导入scipy的最优化模块，并给它起一个别名optimize</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-数值积分"><a href="#2-4-2-数值积分" class="headerlink" title="2.4.2 数值积分"></a>2.4.2 数值积分</h3><p>数值积分是指使用数值方法来近似求解定积分的过程。Scipy提供了一些用于数值积分的函数，如quad，dblquad，tplquad等。下面是一些数值积分的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一元函数的定积分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span> <span class="comment"># 定义一个一元函数</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span> + x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span> <span class="comment"># 定义积分下限</span></span><br><span class="line">b = <span class="number">1</span> <span class="comment"># 定义积分上限</span></span><br><span class="line">c = integrate.quad(f, a, b) <span class="comment"># 使用integrate.quad函数计算一元函数的定积分，参数为函数，下限和上限</span></span><br><span class="line">print(c) <span class="comment"># 输出 (1.8333333333333335, 2.036970068423194e-14)，表示积分结果和误差估计</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二元函数的定积分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(x, y)</span>:</span> <span class="comment"># 定义一个二元函数</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span> <span class="comment"># 定义x的积分下限</span></span><br><span class="line">b = <span class="number">1</span> <span class="comment"># 定义x的积分上限</span></span><br><span class="line">c = <span class="keyword">lambda</span> x: <span class="number">0</span> <span class="comment"># 定义y的积分下限为一个关于x的函数</span></span><br><span class="line">d = <span class="keyword">lambda</span> x: x <span class="comment"># 定义y的积分上限为一个关于x的函数</span></span><br><span class="line">e = integrate.dblquad(g, a, b, c, d) <span class="comment"># 使用integrate.dblquad函数计算二元函数的定积分，参数为函数，x的下限和上限，y的下限和上限</span></span><br><span class="line">print(e) <span class="comment"># 输出 (0.125, 2.7755575615628914e-15)，表示积分结果和误差估计</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-最优化"><a href="#2-4-3-最优化" class="headerlink" title="2.4.3 最优化"></a>2.4.3 最优化</h3><p>最优化是指寻找一个函数的最大值或最小值的过程。Scipy提供了一些用于最优化的函数，如minimize，root，curve_fit等。下面是一些最优化的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一元函数的最小值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span> <span class="comment"># 定义一个一元函数</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span> + x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span> <span class="comment"># 定义初始点</span></span><br><span class="line">b = optimize.minimize(f, a) <span class="comment"># 使用optimize.minimize函数寻找一元函数的最小值，参数为函数和初始点</span></span><br><span class="line">print(b) <span class="comment"># 输出      fun: 0.75</span></span><br><span class="line">         <span class="comment">#     message: 'Optimization terminated successfully.'</span></span><br><span class="line">         <span class="comment">#        nfev: 15</span></span><br><span class="line">         <span class="comment">#         nit: 5</span></span><br><span class="line">         <span class="comment">#        njev: 5</span></span><br><span class="line">         <span class="comment">#      status: 0</span></span><br><span class="line">         <span class="comment">#     success: True</span></span><br><span class="line">         <span class="comment">#           x: array([-0.5])，表示最小值，迭代信息和最优点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多元函数的最小值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(x)</span>:</span> <span class="comment"># 定义一个多元函数</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]**<span class="number">2</span> + x[<span class="number">1</span>]**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>] <span class="comment"># 定义初始点</span></span><br><span class="line">b = optimize.minimize(g, a) <span class="comment"># 使用optimize.minimize函数寻找多元函数的最小值，参数为函数和初始点</span></span><br><span class="line">print(b) <span class="comment"># 输出      fun: 1.543210066645075e-16</span></span><br><span class="line">         <span class="comment">#     message: 'Optimization terminated successfully.'</span></span><br><span class="line">         <span class="comment">#        nfev: 24</span></span><br><span class="line">         <span class="comment">#         nit: 6</span></span><br><span class="line">         <span class="comment">#        njev: 8</span></span><br><span class="line">         <span class="comment">#      status: 0</span></span><br><span class="line">         <span class="comment">#     success: True</span></span><br><span class="line">         <span class="comment">#           x: array([ 8.88178420e-09, -8.88178420e-09])，表示最小值，迭代信息和最优点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的根（零点）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">(x)</span>:</span> <span class="comment"># 定义一个一元函数</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span> - <span class="number">4</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span> <span class="comment"># 定义初始点</span></span><br><span class="line">b = optimize.root(h, a) <span class="comment"># 使用optimize.root函数寻找一元函数的根，参数为函数和初始点</span></span><br><span class="line">print(b) <span class="comment"># 输出     fjac: array([[-1.]])</span></span><br><span class="line">         <span class="comment">#      fun: array([4.4408921e-16])</span></span><br><span class="line">         <span class="comment">#  message: 'The solution converged.'</span></span><br><span class="line">         <span class="comment">#     nfev: 10</span></span><br><span class="line">         <span class="comment">#      qtf: array([-4.4408921e-16])</span></span><br><span class="line">         <span class="comment">#        r: array([-2.])</span></span><br><span class="line">         <span class="comment">#   status: 1</span></span><br><span class="line">         <span class="comment">#  success: True</span></span><br><span class="line">         <span class="comment">#        x: array([2.])，表示根，迭代信息和解</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的拟合（曲线拟合）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">i</span><span class="params">(x, a, b)</span>:</span> <span class="comment"># 定义一个带参数的一元函数（模型）</span></span><br><span class="line">    <span class="keyword">return</span> a * np.exp(-b * x)</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">4</span>, <span class="number">50</span>) <span class="comment"># 创建自变量x的数据（观测点）</span></span><br><span class="line">y = i(x, <span class="number">2.5</span>, <span class="number">1.3</span>) + np.random.randn(<span class="number">50</span>) * <span class="number">0.2</span> <span class="comment"># 创建因变量y的数据（观测值），加入一些噪声</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>] <span class="comment"># 定义初始参数</span></span><br><span class="line">b = optimize.curve_fit(i, x, y, a) <span class="comment"># 使用optimize.curve_fit函数进行曲线拟合，参数为模型，自变量数据，因变量数据和初始参数</span></span><br><span class="line">print(b) </span><br><span class="line"><span class="comment"># 输出 (array([2.55424128, 1.35710428]), array([[ 0.01572386, -0.00638957],</span></span><br><span class="line">       [<span class="number">-0.00638957</span>,  <span class="number">0.00307204</span>]]))，表示拟合参数和协方差矩阵</span><br></pre></td></tr></table></figure><h2 id="2-5-Matplotlib工具包简介及基础"><a href="#2-5-Matplotlib工具包简介及基础" class="headerlink" title="2.5 Matplotlib工具包简介及基础"></a>2.5 Matplotlib工具包简介及基础</h2><p>Matplotlib是一个用于数据可视化的Python工具包，它提供了一些用于绘制各种图形的函数和方法，如折线图，散点图，柱状图，饼图，直方图等。Matplotlib可以与Numpy和Pandas的数组对象进行高效的交互。Matplotlib是机器学习中常用的工具包之一，因为它可以方便地进行数据的展示和分析。下面我们来看一些Matplotlib的基础用法。</p><h3 id="2-5-1-导入Matplotlib"><a href="#2-5-1-导入Matplotlib" class="headerlink" title="2.5.1 导入Matplotlib"></a>2.5.1 导入Matplotlib</h3><p>要使用Matplotlib，首先需要导入它。一般我们会导入它的子模块pyplot，并给它起一个别名plt，方便后续的调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment"># 导入matplotlib的pyplot模块，并给它起一个别名plt</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-绘制折线图"><a href="#2-5-2-绘制折线图" class="headerlink" title="2.5.2 绘制折线图"></a>2.5.2 绘制折线图</h3><p>折线图是一种用于展示数据变化趋势的图形，它由一系列的数据点按顺序连接而成。Matplotlib提供了一个用于绘制折线图的函数plot，它可以接受不同类型的参数，如列表，数组等。下面是一些绘制折线图的示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从列表绘制折线图</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment"># 创建一个列表</span></span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] <span class="comment"># 创建一个列表</span></span><br><span class="line">plt.plot(a, b) <span class="comment"># 使用plt.plot函数绘制折线图，参数为两个列表，表示x轴和y轴的数据</span></span><br><span class="line">plt.show() <span class="comment"># 使用plt.show函数显示图形</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从Numpy数组绘制折线图</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 导入numpy</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>) <span class="comment"># 创建一个等差数列作为x轴的数据</span></span><br><span class="line">y = np.sin(x) <span class="comment"># 创建一个正弦函数作为y轴的数据</span></span><br><span class="line">plt.plot(x, y) <span class="comment"># 使用plt.plot函数绘制折线图，参数为两个数组，表示x轴和y轴的数据</span></span><br><span class="line">plt.show() <span class="comment"># 使用plt.show函数显示图形</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图形的属性</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>) <span class="comment"># 创建一个等差数列作为x轴的数据</span></span><br><span class="line">y1 = np.sin(x) <span class="comment"># 创建一个正弦函数作为y1轴的数据</span></span><br><span class="line">y2 = np.cos(x) <span class="comment"># 创建一个余弦函数作为y2轴的数据</span></span><br><span class="line">plt.plot(x, y1, color=<span class="string">"red"</span>, linestyle=<span class="string">"--"</span>, label=<span class="string">"sin"</span>) <span class="comment"># 使用plt.plot函数绘制折线图，并设置颜色，线型和标签等属性</span></span><br><span class="line">plt.plot(x, y2, color=<span class="string">"blue"</span>, linestyle=<span class="string">"-"</span>, label=<span class="string">"cos"</span>) <span class="comment"># 使用plt.plot函数绘制折线图，并设置颜色，线型和标签等属性</span></span><br><span class="line">plt.xlabel(<span class="string">"x"</span>) <span class="comment"># 使用plt.xlabel函数设置x轴的标签</span></span><br><span class="line">plt.ylabel(<span class="string">"y"</span>) <span class="comment"># 使用plt.ylabel函数设置y轴的标签</span></span><br><span class="line">plt.title(<span class="string">"sin and cos"</span>) <span class="comment"># 使用plt.title函数设置图形的标题</span></span><br><span class="line">plt.legend() <span class="comment"># 使用plt.legend函数显示图例</span></span><br><span class="line">plt.show() <span class="comment"># 使用plt.show函数显示图形</span></span><br></pre></td></tr></table></figure></p><h3 id="2-5-3-绘制散点图"><a href="#2-5-3-绘制散点图" class="headerlink" title="2.5.3 绘制散点图"></a>2.5.3 绘制散点图</h3><p>散点图是一种用于展示数据分布和关系的图形，它由一系列的数据点在坐标系中分布而成。Matplotlib提供了一个用于绘制散点图的函数scatter，它可以接受不同类型的参数，如列表，数组等。下面是一些绘制散点图的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从列表绘制散点图</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment"># 创建一个列表</span></span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] <span class="comment"># 创建一个列表</span></span><br><span class="line">plt.scatter(a, b) <span class="comment"># 使用plt.scatter函数绘制散点图，参数为两个列表，表示x轴和y轴的数据</span></span><br><span class="line">plt.show() <span class="comment"># 使用plt.show函数显示图形</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从Numpy数组绘制散点图</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 导入numpy</span></span><br><span class="line">x = np.random.randn(<span class="number">100</span>) <span class="comment"># 创建一个随机数数组作为x轴的数据</span></span><br><span class="line">y = np.random.randn(<span class="number">100</span>) <span class="comment"># 创建一个随机数数组作为y轴的数据</span></span><br><span class="line">plt.scatter(x, y) <span class="comment"># 使用plt.scatter函数绘制散点图，参数为两个数组，表示x轴和y轴的数据</span></span><br><span class="line">plt.show() <span class="comment"># 使用plt.show函数显示图形</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图形的属性</span></span><br><span class="line">x = np.random.randn(<span class="number">100</span>) <span class="comment"># 创建一个随机数数组作为x轴的数据</span></span><br><span class="line">y = np.random.randn(<span class="number">100</span>) <span class="comment"># 创建一个随机数数组作为y轴的数据</span></span><br><span class="line">s = np.random.randint(<span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>) <span class="comment"># 创建一个随机数数组作为点的大小</span></span><br><span class="line">c = np.random.rand(<span class="number">100</span>) <span class="comment"># 创建一个随机数数组作为点的颜色</span></span><br><span class="line">plt.scatter(x, y, s=s, c=c, alpha=<span class="number">0.5</span>) <span class="comment"># 使用plt.scatter函数绘制散点图，并设置点的大小，颜色和透明度等属性</span></span><br><span class="line">plt.colorbar() <span class="comment"># 使用plt.colorbar函数显示颜色条</span></span><br><span class="line">plt.show() <span class="comment"># 使用plt.show函数显示图形</span></span><br></pre></td></tr></table></figure><h2 id="2-6-Sklearn工具包简介及基础"><a href="#2-6-Sklearn工具包简介及基础" class="headerlink" title="2.6 Sklearn工具包简介及基础"></a>2.6 Sklearn工具包简介及基础</h2><p>Sklearn是一个用于机器学习的Python工具包，它提供了一些用于数据预处理，特征提取，模型训练，模型评估等的函数和类。Sklearn是基于Numpy，Scipy和Matplotlib构建的，因此可以与它们的数组对象进行高效的交互。Sklearn是机器学习中常用的工具包之一，因为它可以方便地进行分类，回归，聚类，降维等任务。下面我们来看一些Sklearn的基础用法。</p><h3 id="2-6-1-导入Sklearn"><a href="#2-6-1-导入Sklearn" class="headerlink" title="2.6.1 导入Sklearn"></a>2.6.1 导入Sklearn</h3><p>要使用Sklearn，首先需要导入它。一般我们会导入它的子模块，如sklearn.datasets，sklearn.linear_model等，而不是导入整个sklearn包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.datasets <span class="keyword">as</span> datasets <span class="comment"># 导入sklearn的数据集模块，并给它起一个别名datasets</span></span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model <span class="keyword">as</span> linear_model <span class="comment"># 导入sklearn的线性模型模块，并给它起一个别名linear_model</span></span><br></pre></td></tr></table></figure><h3 id="2-6-2-加载数据集"><a href="#2-6-2-加载数据集" class="headerlink" title="2.6.2 加载数据集"></a>2.6.2 加载数据集</h3><p>数据集是机器学习中必不可少的部分，它是用于训练和测试模型的数据。Sklearn提供了一些内置的数据集，如波士顿房价数据集，鸢尾花数据集等。我们可以使用datasets模块中的函数来加载这些数据集。下面是一些加载数据集的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 加载波士顿房价数据集</span><br><span class="line">boston &#x3D; datasets.load_boston() # 使用datasets.load_boston函数加载波士顿房价数据集，并赋值给变量boston</span><br><span class="line">print(boston) # 输出一个字典类型的对象，包含以下键：</span><br><span class="line">              # data: 一个二维数组，表示特征矩阵</span><br><span class="line">              # target: 一个一维数组，表示目标向量（房价）</span><br><span class="line">              # feature_names: 一个一维数组，表示特征名称</span><br><span class="line">              # DESCR: 一个字符串，表示数据集的描述信息</span><br><span class="line"></span><br><span class="line"># 加载鸢尾花数据集</span><br><span class="line">iris &#x3D; datasets.load_iris() # 使用datasets.load_iris函数加载鸢尾花数据集，并赋值给变量iris</span><br><span class="line">print(iris) # 输出一个字典类型的对象，包含以下键：</span><br><span class="line">            # data: 一个二维数组，表示特征矩阵</span><br><span class="line">            # target: 一个一维数组，表示目标向量（花的类别）</span><br><span class="line">            # target_names: 一个一维数组，表示目标名称（花的名称）</span><br><span class="line">            # feature_names: 一个一维数组，表示特征名称</span><br><span class="line">            # DESCR: 一个字符串，表示数据集的描述信息</span><br></pre></td></tr></table></figure></p><h3 id="2-6-3-训练和测试模型"><a href="#2-6-3-训练和测试模型" class="headerlink" title="2.6.3 训练和测试模型"></a>2.6.3 训练和测试模型</h3><p>模型是机器学习中用于表示数据和预测结果的数学或统计方法。Sklearn提供了一些常用的模型，如线性回归，逻辑回归，决策树等。我们可以使用linear_model，tree等模块中的类来创建和训练这些模型。下面是一些训练和测试模型的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入其他模块</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 导入numpy</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment"># 导入matplotlib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线性回归模型</span></span><br><span class="line">model = linear_model.LinearRegression() <span class="comment"># 使用linear_model.LinearRegression类创建一个线性回归模型，并赋值给变量model</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练线性回归模型</span></span><br><span class="line">x = np.array([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>]]) <span class="comment"># 创建一个二维数组，表示特征矩阵</span></span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]) <span class="comment"># 创建一个一维数组，表示目标向量</span></span><br><span class="line">model.fit(x, y) <span class="comment"># 使用model.fit方法训练线性回归模型，参数为特征矩阵和目标向量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看线性回归模型的参数</span></span><br><span class="line">print(model.coef_) <span class="comment"># 输出 [2.]，表示线性回归模型的系数</span></span><br><span class="line">print(model.intercept_) <span class="comment"># 输出 1.，表示线性回归模型的截距</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测线性回归模型的结果</span></span><br><span class="line">x_new = np.array([[<span class="number">5</span>], [<span class="number">6</span>]]) <span class="comment"># 创建一个二维数组，表示新的特征矩阵</span></span><br><span class="line">y_pred = model.predict(x_new) <span class="comment"># 使用model.predict方法预测线性回归模型的结果，参数为新的特征矩阵</span></span><br><span class="line">print(y_pred) <span class="comment"># 输出 [11. 13.]，表示预测的目标向量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制线性回归模型的图形</span></span><br><span class="line">plt.scatter(x, y, color=<span class="string">"blue"</span>, label=<span class="string">"data"</span>) <span class="comment"># 使用plt.scatter函数绘制散点图，表示原始数据</span></span><br><span class="line">plt.plot(x_new, y_pred, color=<span class="string">"red"</span>, label=<span class="string">"model"</span>) <span class="comment"># 使用plt.plot函数绘制折线图，表示线性回归模型</span></span><br><span class="line">plt.xlabel(<span class="string">"x"</span>) <span class="comment"># 使用plt.xlabel函数设置x轴的标签</span></span><br><span class="line">plt.ylabel(<span class="string">"y"</span>) <span class="comment"># 使用plt.ylabel函数设置y轴的标签</span></span><br><span class="line">plt.legend() <span class="comment"># 使用plt.legend函数显示图例</span></span><br><span class="line">plt.show() <span class="comment"># 使用plt.show函数显示图形</span></span><br></pre></td></tr></table></figure><h2 id="2-7-Keras工具包简介及基础"><a href="#2-7-Keras工具包简介及基础" class="headerlink" title="2.7 Keras工具包简介及基础"></a>2.7 Keras工具包简介及基础</h2><p>Keras是一个用Python编写的高级神经网络API，它能够以TensorFlow, CNTK, 或者Theano作为后端运行。它的开发重点是支持快速的实验。使用Keras，你可以用简洁的代码构建和训练各种深度学习模型，无论是简单的全连接网络，还是复杂的卷积神经网络、循环神经网络、生成对抗网络等。</p><p>使用pip命令，它会同时安装keras和TensorFlow。你可以在命令行中输入以下命令:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install keras</span><br></pre></td></tr></table></figure><p>Keras的核心数据结构是层和模型。层是神经网络的基本单元，它定义了一些可训练的参数和一些计算逻辑。模型是层的组合，它描述了如何将输入数据转换为输出数据。Keras提供了两种主要的模型构建方式：Sequential模型和函数式API。</p><p>Sequential模型是一种简单的线性堆叠的模型，它只有一个输入和一个输出，适合于没有分支或循环的网络结构。使用Sequential模型，你只需要按顺序添加层即可。例如，下面的代码创建了一个三层的全连接网络：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Dense(units=<span class="number">64</span>, activation=<span class="string">'relu'</span>, input_shape=(<span class="number">784</span>,)))</span><br><span class="line">model.add(Dense(units=<span class="number">32</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Dense(units=<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br></pre></td></tr></table></figure><p>函数式API是一种更灵活的模型构建方式，它允许你创建任意的网络结构，包括多输入多输出、分支、循环等。使用函数式API，你需要明确地定义输入和输出，并将层作为函数来调用。例如，下面的代码创建了一个具有两个输入和两个输出的网络：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Input, Dense</span><br><span class="line"></span><br><span class="line">input1 = Input(shape=(<span class="number">784</span>,))</span><br><span class="line">input2 = Input(shape=(<span class="number">100</span>,))</span><br><span class="line">x1 = Dense(units=<span class="number">64</span>, activation=<span class="string">'relu'</span>)(input1)</span><br><span class="line">x2 = Dense(units=<span class="number">64</span>, activation=<span class="string">'relu'</span>)(input2)</span><br><span class="line">x = tf.keras.layers.concatenate([x1, x2])</span><br><span class="line">output1 = Dense(units=<span class="number">10</span>, activation=<span class="string">'softmax'</span>)(x)</span><br><span class="line">output2 = Dense(units=<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)(x)</span><br><span class="line"></span><br><span class="line">model = Model(inputs=[input1, input2], outputs=[output1, output2])</span><br></pre></td></tr></table></figure><p>无论使用哪种方式构建模型，你都需要在训练之前配置模型的学习过程，包括指定损失函数、优化器、评估指标等。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=<span class="string">'sgd'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">然后你就可以使用fit方法来在训练数据上进行迭代：</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train, epochs=<span class="number">10</span>, batch_size=<span class="number">32</span>)</span><br><span class="line">你也可以使用evaluate方法来评估模型在测试数据上的性能：</span><br><span class="line"></span><br><span class="line">loss_and_metrics = model.evaluate(x_test, y_test)</span><br><span class="line">或者使用predict方法来对新的数据生成预测：</span><br><span class="line"></span><br><span class="line">predictions = model.predict(x_new)</span><br></pre></td></tr></table></figure><br>Keras还提供了许多其他的功能，如保存和加载模型、可视化模型结构、回调函数、自定义层、自定义损失和指标等。</p>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习系列（一）走进机器学习</title>
      <link href="/post/ai-0-ml-1/"/>
      <url>/post/ai-0-ml-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第1章：走进机器学习"><a href="#第1章：走进机器学习" class="headerlink" title="第1章：走进机器学习"></a>第1章：走进机器学习</h1><p>机器学习是一门研究如何让计算机从数据中学习知识和技能的科学。它是人工智能的一个重要分支，也是当今最具前景和影响力的技术之一。在本章中，将介绍机器学习的基本概念、应用领域和基本步骤，为后续章节打下基础。</p><h2 id="1-1-机器学习概述"><a href="#1-1-机器学习概述" class="headerlink" title="1.1 机器学习概述"></a>1.1 机器学习概述</h2><p>机器学习的核心问题是如何让计算机能够自动地从数据中提取有用的信息，从而实现智能的行为。例如，我们可以让计算机通过观察大量的人脸照片，学习如何识别不同的人；我们也可以让计算机通过分析历史的股票数据，学习如何预测未来的股价；我们还可以让计算机通过玩游戏，学习如何制定有效的策略，例如围棋高手Alpha Go。</p><p>机器学习有多种类型，根据是否需要人为提供标签或反馈，可以分为三大类：监督学习、无监督学习和强化学习。</p><ul><li>监督学习是指从已知输入和输出之间的对应关系中学习规律，例如分类和回归问题。</li><li>无监督学习是指从没有标签或反馈的数据中发现隐藏的结构或模式，例如聚类和降维问题。</li><li>强化学习是指在与环境交互的过程中，通过不断尝试和错误，学习如何做出最优的决策，例如下棋和驾驶问题。</li></ul><p>机器学习有多种方法，根据所使用的数学模型或算法，可以分为多个流派或范式。例如，统计学习、符号学习、神经网络、支持向量机、贝叶斯网络、决策树、遗传算法等。这些方法各有优劣，适用于不同的场景和任务。在本机器学习合集中，将重点介绍一些最常用和最有效的方法，并给出相应的理论和实例。</p><h2 id="1-2-机器学习的应用领域"><a href="#1-2-机器学习的应用领域" class="headerlink" title="1.2 机器学习的应用领域"></a>1.2 机器学习的应用领域</h2><p>机器学习已经广泛地应用于各个领域，为人类社会带来了巨大的便利和价值。以下是一些典型的应用领域：</p><ul><li>计算机视觉：利用机器学习技术，可以让计算机具备视觉能力，从而实现人脸识别、物体检测、场景分析、图像生成等功能。</li><li>自然语言处理：利用机器学习技术，可以让计算机理解和生成自然语言，从而实现语音识别、文本分析、机器翻译、对话系统等功能。</li><li>数据挖掘：利用机器学习技术，可以从海量的数据中挖掘出有价值的信息，从而实现推荐系统、异常检测、关联规则发现等功能。</li><li>人工智能：利用机器学习技术，可以让计算机模拟和超越人类的智能（ChatGPT），从而实现自动驾驶、智能医疗、智能教育、智能家居等功能。</li></ul><p>这些应用领域只是机器学习的冰山一角，随着技术的发展和创新，机器学习将会在更多的领域发挥作用，为人类带来更多的惊喜和挑战。</p><h2 id="1-3-机器学习的基本步骤"><a href="#1-3-机器学习的基本步骤" class="headerlink" title="1.3 机器学习的基本步骤"></a>1.3 机器学习的基本步骤</h2><p>机器学习的过程并不是一蹴而就的，而是需要经过一系列的步骤，才能从数据中得到有效的模型和结果。一般来说，机器学习的基本步骤包括以下几个方面：</p><ol><li>数据收集：这是机器学习的第一步，也是最重要的一步。没有数据，就没有机器学习。数据收集的目的是为了获取足够多、足够好、足够相关的数据，以便训练和测试机器学习模型。数据可以来自于各种渠道，例如网络爬虫、传感器、问卷、日志等。数据收集的质量和数量直接影响了机器学习的效果和性能。</li><li>数据预处理：这是机器学习的第二步，也是一个很重要的步骤。数据预处理的目的是为了清洗、整理、转换和规范化数据，以便让数据更适合于机器学习模型的输入。数据预处理包括了很多操作，例如去除噪声和异常值、填补缺失值、删除重复值、进行编码和标准化等。数据预处理的好坏也会影响到机器学习的效果和性能。</li><li>模型选择：这是机器学习的第三步，也是一个很关键的步骤。模型选择的目的是为了选择一个合适的数学模型或算法，以便对数据进行建模和分析。模型选择需要考虑很多因素，例如问题类型、数据特征、计算资源、可解释性等。模型选择需要有一定的理论知识和实践经验，以便在众多的候选模型中找到一个最优或最适合的模型。</li><li>模型训练：这是机器学习的第四步，也是一个很核心的步骤。模型训练的目的是为了利用已有的数据，通过优化算法，调整模型中的参数或权重，使得模型能够更好地拟合数据中的规律或特征。模型训练需要有一定的数学基础和编程技巧，以便设计和实现有效和高效的优化算法。</li><li>模型评估：这是机器学习的第五步，也是一个很重要的步骤。模型评估的目的是为了检验模型在未知数据上的泛化能力和预测性能。模型评估需要有一定的统计知识和评价指标，以便对模型进行客观和公正的评价。模型评估通常需要将数据分为训练集、验证集和测试集，分别用于模型训练、模型选择和模型评估。模型评估还可以采用交叉验证、自助法等方法，以提高评估的可靠性和稳定性。</li><li>模型调参：这是机器学习的第六步，也是一个很细致的步骤。模型调参的目的是为了通过调整模型中的超参数或配置，进一步提升模型的效果和性能。模型调参需要有一定的经验和技巧，以便在合理的范围内，寻找到最优或最适合的参数或配置。模型调参可以采用网格搜索、随机搜索、贝叶斯优化等方法，以提高调参的效率和精度。</li><li>模型应用：这是机器学习的第七步，也是一个很实用的步骤。模型应用的目的是为了将训练好的模型部署到实际的场景中，以解决实际的问题或满足实际的需求。模型应用需要有一定的工程能力和系统知识，以便将模型与其他组件或平台进行集成和交互。模型应用还需要考虑模型的可扩展性、可维护性、可更新性等因素，以保证模型在实际中的稳定性和可靠性。</li></ol><p>以上就是机器学习的基本步骤，当然，在实际中，这些步骤并不是一次性完成的，而是需要反复迭代和优化的。机器学习是一个动态和创造性的过程，需要不断地尝试和改进，才能得到最佳或最满意的结果。</p><h2 id="本章小结："><a href="#本章小结：" class="headerlink" title="本章小结："></a>本章小结：</h2><ul><li>机器学习是一门研究如何让计算机从数据中学习知识和技能的科学。</li><li>机器学习有多种类型，包括监督学习、无监督学习和强化学习。</li><li>机器学习有多种方法，包括统计学习、符号学习、神经网络、支持向量机等。</li><li>机器学习有多种应用领域，包括计算机视觉、自然语言处理、数据挖掘、人工智能等。</li><li>机器学习有多个基本步骤，包括数据收集、数据预处理、模型选择、模型训练、模型评估、模型调参和模型应用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.1安装、GPU加速设置及第三方库常用源</title>
      <link href="/post/ai-1-dl-tensorflow2-note-1/"/>
      <url>/post/ai-1-dl-tensorflow2-note-1/</url>
      
        <content type="html"><![CDATA[<p>安装好Anaconda后打开Anaconda Prompt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda create -n TF2.1 python&#x3D;3.7  # 创建TF2.1环境</span><br><span class="line">conda activate TF2.1 #进入TF2.1环境</span><br><span class="line">conda install cudatoolkit&#x3D;10.1</span><br><span class="line">conda install cudnn&#x3D;7.6  # 安装英伟达深度学习软件包</span><br><span class="line">pip install tensorflow&#x3D;&#x3D;2.1</span><br></pre></td></tr></table></figure><p>Anaconda下查看已经创建了哪些环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --env</span><br></pre></td></tr></table></figure><p>pip安装第三方库常用源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">阿里源：https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">清华源：https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">豆瓣：http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">中科大： https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用-i参数指定pip命令安装时的源</span><br><span class="line">pip install requests -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure><p>更新pip版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统仿真笔记（九）系统动力学模拟</title>
      <link href="/post/System-Simulation-9/"/>
      <url>/post/System-Simulation-9/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>从这章开始进入了第二部分的学习，系统仿真技术，包括随机数和随机变量的生成、输入数据分析、输出数据分析及比较、模型的校核和验证、常用的系统仿真工具。</p><p>本章为随机数和随机变量的生成的相关内容，理解随机变量的性质和随机分布的种类，掌握随机数的生成方法，掌握随机变量的生成方法等。</p><h1 id="一、随机系统中随机变量和随机分布"><a href="#一、随机系统中随机变量和随机分布" class="headerlink" title="一、随机系统中随机变量和随机分布"></a>一、随机系统中随机变量和随机分布</h1><h2 id="1-1-随机变量的定义和性质"><a href="#1-1-随机变量的定义和性质" class="headerlink" title="1.1 随机变量的定义和性质"></a>1.1 随机变量的定义和性质</h2><h3 id="1-1-1-确定性活动与随机活动"><a href="#1-1-1-确定性活动与随机活动" class="headerlink" title="1.1.1 确定性活动与随机活动"></a>1.1.1 确定性活动与随机活动</h3><p>确定性活动：是可以事先预言的，即在准确地重复一定的条件下，其变化的结果总是确定的，或者根据其过去的状态，相同的条件下可以预言将来的发展变化。确定性活动可以用一个确定的数学形式来描述：$f(t)$ 等。 </p><p>随机性活动：其变化的结果是事先不可预言的，即在相同的条件下进行重复实验，每次结果未必相同，或者是知道其过去的状况，在相同的条件、未来的发展事先都不能确定。随机性活动可通过数学统计的方法描述。</p><h3 id="1-1-2-随机变量的定义"><a href="#1-1-2-随机变量的定义" class="headerlink" title="1.1.2 随机变量的定义"></a>1.1.2 随机变量的定义</h3><p>定义：对于随机活动的不同结果我们可以用不同的数值与其对应。这样，就可以用一个变量来描述随机活动。变量按一定的概率取某个值，对应于随机活动按一定的概率取某个结果。这类变量称为随机变量。</p><ul><li>离散型随机变量：若随机变量只取有限个数值或可列无穷多个数值。</li><li>连续型随机变量：若随机变量可以取值于某个区间中的任一数。  </li></ul><h4 id="离散型随机变量的定义"><a href="#离散型随机变量的定义" class="headerlink" title="离散型随机变量的定义"></a>离散型随机变量的定义</h4><p>定义：如果一个随机变量 $x$ 的一切可能取值为$x1，x2，…，xn，…，$并且$X$ 取值$x_n$的概率为 $P_n$，则 $X$为一个离散型随机变量，$\{p1，p2，…，pn，…\}$称为 X 的概率函数（分布律）。其中 $P_n$必须满足下列两个条件：</p><ul><li><p>$P_n&gt;0，n=1,2,…N,$</p></li><li><p>$\displaystyle \sum_{n=1}^{N}p_n=1 \quad P_n&gt;0，n=1, 2,…，N$</p></li></ul><h4 id="离散型随机变量的概率分布函数"><a href="#离散型随机变量的概率分布函数" class="headerlink" title="离散型随机变量的概率分布函数"></a>离散型随机变量的概率分布函数</h4><p>离散型随机变量X 的累积分布函数定义：当 $X$ 小于或等于某个给定值 $x$ 的概率函数，记为 $P(X≤x) = F(x)$。</p><p>设随机变量 X 可能取值$x1，x2，…，xn，…，$则$X$ 的累积分布函数为</p><script type="math/tex; mode=display">F(x)= \displaystyle \sum_{X<\infty}P(X=X_i)=\displaystyle \sum_{X_i}P_n</script><p>其中$P_i$为 $X$ 取值 $P_x$ 的概率。</p><p>由定义可见，$F(x) ≤1$，当 $x&lt;y$ 时，$F(x)≤F(y)$，即 $F(x)$ 是个单调增加的函数。</p><h4 id="连续型随机变量的定义"><a href="#连续型随机变量的定义" class="headerlink" title="连续型随机变量的定义"></a>连续型随机变量的定义</h4><p>定义：若存在非负函数 $f (x)$，使得随机变量 $X$ 取值于任一区间 $(a，b)$的概率为</p><script type="math/tex; mode=display">P(a\leq x\leq b)=\int_a^b f(x)dx</script><p>则称 $X$ 为连续型随机变量，$f(x)$ 称为$X$的密度函数。</p><p>对于密度函数 $f (x)$ 有   $f (x)≧0$, $\int_{-\infty}^{\infty}f(x)dx=1$</p><h4 id="连续型随机变量的概率密度函数和累计分布函数"><a href="#连续型随机变量的概率密度函数和累计分布函数" class="headerlink" title="连续型随机变量的概率密度函数和累计分布函数"></a>连续型随机变量的概率密度函数和累计分布函数</h4><p>连续型随机变量的累积分布函数$F(x)$定义为随机变量小于或等于$x$的概率。</p><script type="math/tex; mode=display">F(x)=\displaystyle \sum_{- \infty}^{x}f(x)dx</script><p>由累积分布函数定义可知，$F(x)≤1$，当$x1&lt;x2$时，$F(x1)≤F(x2)$，即$F(x)$是个单调增加的函数。</p><p>随机变量$X$落入区间$(a，b)$内的概率是$F(b) －F(a)$。</p><h2 id="1-2-随机变量的数字特征"><a href="#1-2-随机变量的数字特征" class="headerlink" title="1.2 随机变量的数字特征"></a>1.2 随机变量的数字特征</h2><h3 id="1-2-1-离散型随机变量的数字特征"><a href="#1-2-1-离散型随机变量的数字特征" class="headerlink" title="1.2.1 离散型随机变量的数字特征"></a>1.2.1 离散型随机变量的数字特征</h3><p>平均值（数学期望值）：设 $X$ 为离散随机变量，根据前面的定义，当$X= x_i$时的概率为 $P_i$，则:</p><p>X 的数学期望值：$E(x)=\displaystyle \sum_{i=0} ^{\infty}x_i P_i$ </p><p>数学方差：$D(x)=E[x-E(x)]^2=\displaystyle \sum_{i=0} ^{\infty}E[x-E(x)]^2 P_i$ </p><h3 id="1-2-2-连续型随机变量的数字特征"><a href="#1-2-2-连续型随机变量的数字特征" class="headerlink" title="1.2.2 连续型随机变量的数字特征"></a>1.2.2 连续型随机变量的数字特征</h3><p>平均值：设$X$为随机变量，其概率密度函数为 $f (x)$，则该随机变量的平均值为：$E(x)=∫_{- {\infty}}^ {\infty}xf(x)dx$</p><p>数学方差：$D(x)=E[x-E(x)]^2=∫_{i=0} ^{\infty}E[x-E(x)]^2 f(x)dx$ </p><h3 id="1-2-3-数理统计中的基本运算规则"><a href="#1-2-3-数理统计中的基本运算规则" class="headerlink" title="1.2.3 数理统计中的基本运算规则"></a>1.2.3 数理统计中的基本运算规则</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/1.png" alt></p><h3 id="1-2-4-协方差与相关系数"><a href="#1-2-4-协方差与相关系数" class="headerlink" title="1.2.4 协方差与相关系数"></a>1.2.4 协方差与相关系数</h3><p>具体查阅数理统计教材。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/2.png" alt></p><h2 id="1-3-常用随机变量的分布"><a href="#1-3-常用随机变量的分布" class="headerlink" title="1.3 常用随机变量的分布"></a>1.3 常用随机变量的分布</h2><h3 id="1-3-1-伯努利分布"><a href="#1-3-1-伯努利分布" class="headerlink" title="1.3.1 伯努利分布"></a>1.3.1 伯努利分布</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/3.png" alt></p><h3 id="1-3-2-泊松分布Poisson-a"><a href="#1-3-2-泊松分布Poisson-a" class="headerlink" title="1.3.2 泊松分布Poisson(a)"></a>1.3.2 泊松分布Poisson(a)</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/4.png" alt></p><h3 id="1-3-3-均匀分布-U-a-b"><a href="#1-3-3-均匀分布-U-a-b" class="headerlink" title="1.3.3 均匀分布 U(a,b)"></a>1.3.3 均匀分布 U(a,b)</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/5.png" alt></p><h3 id="1-3-4-指数分布-EXPON-a-1-λ"><a href="#1-3-4-指数分布-EXPON-a-1-λ" class="headerlink" title="1.3.4 指数分布 EXPON(a)(1/λ)"></a>1.3.4 指数分布 EXPON(a)(1/λ)</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/6.png" alt></p><h3 id="1-3-5-正态分布"><a href="#1-3-5-正态分布" class="headerlink" title="1.3.5 正态分布"></a>1.3.5 正态分布</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/7.png" alt></p><h3 id="1-3-6-对数正态分布"><a href="#1-3-6-对数正态分布" class="headerlink" title="1.3.6 对数正态分布"></a>1.3.6 对数正态分布</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/8.png" alt></p><h3 id="1-3-7-爱尔朗分布-Erlang-a-k"><a href="#1-3-7-爱尔朗分布-Erlang-a-k" class="headerlink" title="1.3.7 爱尔朗分布 Erlang(a, k)"></a>1.3.7 爱尔朗分布 Erlang(a, k)</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/9.png" alt></p><h3 id="1-3-8-威布尔分布-Weibull-a-𝛽"><a href="#1-3-8-威布尔分布-Weibull-a-𝛽" class="headerlink" title="1.3.8 威布尔分布 Weibull(a,𝛽)"></a>1.3.8 威布尔分布 Weibull(a,𝛽)</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/10.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/11.png" alt></p><h3 id="1-3-9-伽马分布-Gamma-𝜷-𝜽"><a href="#1-3-9-伽马分布-Gamma-𝜷-𝜽" class="headerlink" title="1.3.9 伽马分布 Gamma(𝜷,𝜽)"></a>1.3.9 伽马分布 Gamma(𝜷,𝜽)</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/12.png" alt="13"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/13.png" alt="12"></p><h3 id="1-3-10-三角分布"><a href="#1-3-10-三角分布" class="headerlink" title="1.3.10 三角分布"></a>1.3.10 三角分布</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/14.png" alt></p><h1 id="二、随机数的产生"><a href="#二、随机数的产生" class="headerlink" title="二、随机数的产生"></a>二、随机数的产生</h1><h2 id="2-1-随机数在仿真中的作用"><a href="#2-1-随机数在仿真中的作用" class="headerlink" title="2.1 随机数在仿真中的作用"></a>2.1 随机数在仿真中的作用</h2><ul><li>离散事件系统：包含1个以上的随机变量。</li><li>离散事件系统仿真时，将随机变量包含在仿真模型。</li><li>产生随机变量的基础：发生(0，1)区间上的均匀分布随机数（随机数发生器）。</li><li>其他分布都可以由(0，1)均匀分布随机数经过变换和计算来实现。</li></ul><h2 id="2-2-随机数的性质"><a href="#2-2-随机数的性质" class="headerlink" title="2.2 随机数的性质"></a>2.2 随机数的性质</h2><ul><li>随机数(random number)：随机数就是随机变量的样本取样值。</li><li>均匀分布的随机数：随机变量x在其可能值范围中的任一区间出现的概率正比于此区间的大小与可能值范围的比值。</li><li>(0，1)均匀分布随机数：在各种分布的随机数中，最常用和最重要的是在(0，1)区间上的均匀分布随机数。其他许多分布的随机数都可以由(0，1)均匀分布随机数经过变换和计算来产生。</li></ul><p><strong>(0，1)均匀分布随机数的定义：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/15.png" alt></p><h2 id="2-3-伪随机数的产生方法"><a href="#2-3-伪随机数的产生方法" class="headerlink" title="2.3 伪随机数的产生方法"></a>2.3 伪随机数的产生方法</h2><h3 id="2-3-1-伪随机数-pseudo-random-number-的产生"><a href="#2-3-1-伪随机数-pseudo-random-number-的产生" class="headerlink" title="2.3.1 伪随机数(pseudo random number)的产生"></a>2.3.1 伪随机数(pseudo random number)的产生</h3><p>产生随机数的目的，是为了发生[0，1]之间的一组数的序列，使之尽可能的模仿具有类似于均匀分布随机变量的独立取样值性质的数。由于随机数是利用计算机程序按照一定的算法计算出来的，会有一定的周期性，因而被称为伪随机数。</p><p>利用随机数来对随机活动的统计分析，只要伪随机数的数理统计性质能够满足实际需要即可。一般计算机上产生随机数的函数为（0，1）均匀分布的随机数。</p><h3 id="2-3-2-计算机产生随机数的要求"><a href="#2-3-2-计算机产生随机数的要求" class="headerlink" title="2.3.2 计算机产生随机数的要求"></a>2.3.2 计算机产生随机数的要求</h3><p>伪随机数具有一定的周期性。对随机数值序列的要求有：</p><ul><li>分布的均匀性、抽样的随机性、试验的独立性以及前后的一致性。</li><li>足够长的周期，以满足的实际需要。</li><li>产生的速度要快，占用的内存空间要小。</li></ul><h3 id="2-3-3-计算机产生随机数的算法"><a href="#2-3-3-计算机产生随机数的算法" class="headerlink" title="2.3.3 计算机产生随机数的算法"></a>2.3.3 计算机产生随机数的算法</h3><p>计算机产生随机数的通常方法是利用一个递推公式：</p><script type="math/tex; mode=display">X_{k+1}=f(X_k)</script><p>给定了第k个初始值，就可以利用这个递推公式推算出第k+1个数$X_k+1$；</p><p>递推公式有多种形式，其中最常见的有两种：</p><ul><li>平方取中法</li><li>同余法</li></ul><p>目前使用最多的是线性同余发生器（Lehmer，1951）。</p><h3 id="2-3-4-平方取中法"><a href="#2-3-4-平方取中法" class="headerlink" title="2.3.4 平方取中法"></a>2.3.4 平方取中法</h3><p>首先给出一个初始数，或称种子。把这个数平方，然后取中间位的数，再放上小数点就得到一个随机数。这个中间位的数再平方取中得到第二个随机数。</p><p>其递推公式为：</p><script type="math/tex; mode=display">\left\{    \begin{array}{c}        x_n=[\frac{x_{n-1}^2}{10^2}]mod 10^2\\        u_n=x_n/10^{2k}    \end{array}\right.</script><p>初值为$x_0$</p><p>其中，x0为2k位的非负整数，[x]表示取x的整数部分，NmodM为对N进行模为M的求余运算，即：</p><p><strong>平方取中法例题：</strong></p><p>任取一4位正整数：5497。即，k=2，x0=5497。</p><p>x0=5497，平方x1=x0×x0=30217009，取中x1=2170，R1=2170/104=0.2170</p><p>x1=2170，平方x2=x1×x1=04708900，取中x2=7089，R2=7089/104=0. 7089</p><p>x2=7089，平方x3=x2×x2=50253921，取中x3=2539，R3=2539/104=0. 2539</p><p>该方法的问题：产生的随机数可能产生退化，的到的Ri值趋于0或者重复相同的$R_i$值</p><p>平方取中法有许多改进型，如：</p><ul><li>乘积取中法；</li><li>常数乘子法；</li><li>Fibonacci法等。</li></ul><h3 id="2-3-5-同余法"><a href="#2-3-5-同余法" class="headerlink" title="2.3.5 同余法"></a>2.3.5 同余法</h3><p>同余法是将一组数据通过一系列特定的数字运算，最后利用一个数字的整除求余，所得的数值就是一个伪随机数。因为这个计算过程，则称该求随机数的方法为同余法。</p><p>同余法的有三种：加同余法（Linear Congruence Generator）、乘同余法和混合同余法。其中以混合同余法产生的随机数统计性质较好，因而应用最为广泛。混合同余法的递推公式：</p><script type="math/tex; mode=display">\left\{    \begin{array}{c}        x_n=(ax_{n-1}+c)modm\\        u_n=x_n/m\\        初值x_0    \end{array}\right.</script><p>其中：m为模数（为随机数的周期），a为乘子（乘数或乘法因子），c为增量（加数或加法因子），且　$x_0$，m，a均为非负整数，c&gt;0。</p><p>同余法产生（0，1）均匀分布的随机数的基本条件：</p><p>c和m互质，即没有大于1的公因子。</p><p>m的每个质数因子也是　a-1的因子。</p><p>若4是m的因子，则4也是a-1的因子。</p><p>为延长随机数的周期，通常取$m=2^b$。</p><p><strong>混合同余法例题:</strong></p><p>取m=8，a=3，c=1，x0=1，迭代结果如下表。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/16.png" alt></p><p>可见平方$x_1=x_5=4$，从n=5开始$x_n$及$u_n$循环取$x_1$到$x_4$的值。周期Ｔ&lt;m。如Ｔ=m，则称为满周期。</p><p>同余法具有计算简便的优点。</p><h2 id="2-4-随机数的检验"><a href="#2-4-随机数的检验" class="headerlink" title="2.4 随机数的检验"></a>2.4 随机数的检验</h2><p>用任何一种方法产生的随机数序列在把它用到实际问题中去之前都必须进行一些统计检验，看它是否能够令人满意地作为随机变量的独立取样值(显著性检验)，是否有较好的独立性和均匀性。从理论上说，统计检验并不能得出完全肯定的结论，但是却可以使我们有较大的把握获得具有较好统计性质的随机数序列。</p><p>五种随机数检验方法：</p><ul><li>频率检验（用于检验均匀性）</li><li>趋势检验（用于检验独立性）</li><li>自相关检验（用于检验独立性）</li><li>间隙检验（用于检验独立性）</li><li>扑克检验（用于检验独立性）</li></ul><h2 id="2-5-均匀性检验"><a href="#2-5-均匀性检验" class="headerlink" title="2.5 均匀性检验"></a>2.5 均匀性检验</h2><p>均匀性检验要求随机数均匀地分布在（0,1）区间。</p><p>分布均匀性检验又称频率检验，是对经验频率和理论频率之间的差异进行检验。</p><p>均匀性检验有两种方法：</p><ul><li>柯尔莫哥洛夫-斯米尔洛夫检验(Kolmogorov-Smirnov Test)</li><li>卡方检验（ Chi-Square Test ）</li></ul><blockquote><p>具体查阅数理统计教材</p></blockquote><h2 id="2-6-独立性检验"><a href="#2-6-独立性检验" class="headerlink" title="2.6 独立性检验"></a>2.6 独立性检验</h2><p>独立性检验的常用方法是利用相关系数进行随机数的。一个序列可以是均匀分布，但却不一定是独立。如果它们相互独立，那么它们的相关系数应为0（反之不一定）。</p><p>设给定N个随机数$U_i：x_1，x_2，…，x_N$，假设$ j$ 阶自相关系数为$ρ_j=0（j =1,2,…,m）$。考虑样本的 $j$ 阶自相关系数</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/17.png" alt></p><blockquote><p>独立性检验的步骤查阅数理统计教材</p></blockquote><h1 id="三、随机变量的产生"><a href="#三、随机变量的产生" class="headerlink" title="三、随机变量的产生"></a>三、随机变量的产生</h1><h2 id="3-1-随机变量的产生方法概述"><a href="#3-1-随机变量的产生方法概述" class="headerlink" title="3.1 随机变量的产生方法概述"></a>3.1 随机变量的产生方法概述</h2><p>前提：已经得到服从独立同分布的U(0,1)随机数</p><p>任务：进一步构造所需的某随机变量</p><p>条件：所生成的随机变量X符合其概率分布函数F(X)。</p><ol><li>递增函数</li><li>0-1范围</li></ol><p><strong>随机变量的产生方法:</strong></p><p>逆变换方法，函数变换法，卷积法，接受-拒绝方法，合成法等。</p><p>这里所有方法都假定：在区间(0,1)中的随机数$x_1，x_2，…，x_N$是随时可用的，这里，每个$x_i$的pdf是</p><script type="math/tex; mode=display">f_R(x)=\begin{cases}        1, & \text{0 ≤ x ≤ 1}\\        0,& \text{others}    \end{cases}</script><p>每个$x_i$的cdf是</p><script type="math/tex; mode=display">F_R(x)=\begin{cases}        1, & \text{x<0}\\        1, & \text{0 ≤ x ≤ 1}\\        0,& \text{x>1}    \end{cases}</script><p>所有分布的随机变量的产生都是从符合均匀分布U(0,1)的随机数x，或$x_i$开始。其他分布的随机变量的产生过程由下图列出的随机变量的产生算法的树结构表示。</p><p><strong>随机变量的产生算法树:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/18.png" alt></p><h2 id="3-2-逆变换方法-inverse-transform"><a href="#3-2-逆变换方法-inverse-transform" class="headerlink" title="3.2 逆变换方法(inverse transform)"></a>3.2 逆变换方法(inverse transform)</h2><p>由前可知，如果$U～U(0,1)$，而$F^{-1}(.)$是分布函数$F(x)$的反函数，则：</p><script type="math/tex; mode=display">X=F^{-1}(U)\rightarrow F(X)</script><p>利用上述公式，可以由$U～U(0,1)$ 随机数$\{x_i\}$，直接生成规定分布$F(x)$的随机数$\{u_i\}$的方法叫做逆变换法或反函数法。</p><p>逆变换法的步骤为：</p><p>第一步：产生独立的$U(0,1)$随机数$x_i$；</p><p>第二步：令$x_i=F^{-1}(u_i)$,$i=1,2,…,n$，则$\{ x_1，x_2，x_i，…，x_N，\}$就是给定分布$F(x)$的随机数序列。</p><p><strong>用逆变换法产生各种离散分布的随机变量:</strong></p><h3 id="3-2-1-均匀分布随机变量的产生"><a href="#3-2-1-均匀分布随机变量的产生" class="headerlink" title="3.2.1 均匀分布随机变量的产生"></a>3.2.1 均匀分布随机变量的产生</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/19.png" alt></p><h3 id="3-2-2-负指数分布"><a href="#3-2-2-负指数分布" class="headerlink" title="3.2.2 负指数分布"></a>3.2.2 负指数分布</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/20.png" alt></p><h3 id="3-2-3-威布尔分布"><a href="#3-2-3-威布尔分布" class="headerlink" title="3.2.3 威布尔分布"></a>3.2.3 威布尔分布</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/21.png" alt></p><h3 id="3-2-4-任意离散分布"><a href="#3-2-4-任意离散分布" class="headerlink" title="3.2.4 任意离散分布"></a>3.2.4 任意离散分布</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/22.png" alt></p><h2 id="3-3-函数变换方法"><a href="#3-3-函数变换方法" class="headerlink" title="3.3 函数变换方法"></a>3.3 函数变换方法</h2><p>函数变换法是关于随机变量的函数（仍为随机变量）的抽样法。通过随机变量间的关系式可导出其分布函数间的关系式，故可用常用分布的随机数生成某个确定分布的随机数。该方法的理论依据依据下述定理。</p><p>[定理] 设随机变量X具有密度函数$f(x)$，$Y=g(x)$是随机变量X的函数，又设：$x= g^{-1}(y) = h(y)$存在且有一阶连续导数。则$Y=g(X)$的密度函数为：</p><script type="math/tex; mode=display">𝑝(𝑦)=𝑓[ℎ(𝑦)][ℎ^′ (𝑦)]</script><p>设常用随机变量X的分布函数为$F(x)$，X的函数$Y=g(x)$也是随机变量，其分布函数为</p><p>利用逆变换法可得函数变换法的抽样公式为$ Y=g(X)$</p><p>于是由F(x) 的随机数生成G(x)的随机数的方法为：</p><p>第一步：产生独立的$F(x)$随机数$\{ x1，x2，xi，…，xN，\}$；</p><p>第二步：令$y_i=g(x_i)$，$i=1,2,…,n$，则$\{ y_1，y_2，y_i，…，y_N，\}$就是G(x)的随机数序列。</p><p>由此可知，逆变换法是一种特殊的函数变换法，相当于取$X～U(0,1)$的随机变量U。</p><h2 id="3-4-用函数变换法产生随机变量"><a href="#3-4-用函数变换法产生随机变量" class="headerlink" title="3.4 用函数变换法产生随机变量"></a>3.4 用函数变换法产生随机变量</h2><h3 id="3-4-1-正态分布"><a href="#3-4-1-正态分布" class="headerlink" title="3.4.1 正态分布"></a>3.4.1 正态分布</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/23.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/24.png" alt></p><h3 id="3-4-2-对数正态分布"><a href="#3-4-2-对数正态分布" class="headerlink" title="3.4.2 对数正态分布"></a>3.4.2 对数正态分布</h3><p>若$X～N(μ,σ^2)$，则称$Y=e^X$所服从的分布为对数正态分布$LN(μ,σ^2)$。</p><p>利用正态分布和对数正态分布的关系可以生成$LN(μ，σ^2)$随机数，具体算法如下：</p><p>第一步：产生独立的标准正态分布$N(0，1)$随机数$\{ x_1，x_2，x_i，…，x_N，\}$（步骤见前面的正态分布生成方法）；</p><p>第二步：计算 $y_i=σx_i+μ，i=1,2,…,N$;</p><p>第三步：产生独立的$F(y)$随机数$\{ y_1，y_2，y_i，…，y_N，\}$；</p><p>第四步：令$Z_i=e^{y_i}$，$i=1,2,…,N$，则$\{ z_1，z_2，z_i，…，z_N，\}$就是对数正态分布$LN(μ，σ^2)$随机数。</p><h2 id="3-5-卷积法"><a href="#3-5-卷积法" class="headerlink" title="3.5 卷积法"></a>3.5 卷积法</h2><p>一些重要概率分布的随机变量，可以表示为两个或多个独立随机变量之和。由于新构成的随机变量的概率密度函数是原始变量的概率密度函数的卷积，因此用这种方法生成随机变量的方法称为卷积法（convolution）。</p><p>卷积法是一种特殊的函数变换法，相当于取抽样公式</p><script type="math/tex; mode=display">𝑌=𝑔(𝑋_1,𝑋_2,...,𝑋_𝑛)=𝑋_1+𝑋_2+...+𝑋_𝑛</script><p>卷积法应用对象：爱尔朗分布，泊松分布，二项分布，近似正态分布。</p><h3 id="3-5-1-爱尔朗分布（Erlang）"><a href="#3-5-1-爱尔朗分布（Erlang）" class="headerlink" title="3.5.1 爱尔朗分布（Erlang）"></a>3.5.1 爱尔朗分布（Erlang）</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/25.png" alt></p><h3 id="3-5-2-泊松分布"><a href="#3-5-2-泊松分布" class="headerlink" title="3.5.2 泊松分布"></a>3.5.2 泊松分布</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/26.png" alt></p><h2 id="3-6-组合法"><a href="#3-6-组合法" class="headerlink" title="3.6 组合法"></a>3.6 组合法</h2><p>当希望抽样的分布函数F(x)可以表成若干个其他分布函数$F_1(x)，F_2(x)，…$的凸组合，即               ，其中$F(x)=\displaystyle \sum_j p_jF(x)$ ,其中$p_j≥0$，$\displaystyle \sum_j p_j=1$,且$F_j(x)$的随机数易于抽取时，常采用组合法由$F_j(x)$ 的随机数来生成F(x)的随机数。</p><p>具体算法如下：</p><p>第一步：随机产生一个正整数J，使得$P\{J=j\}=p_j(j=1,2,3,…)$</p><p>第二步：生成一个分布为$F_j(x)$ 的随机数x，x就是F(x)的随机数。</p><p>重复上述步骤，即可产生F(x)的随机数序列$\{x_1，x_2，x_i，…，x_N\}$；可以证明X～F(x)。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/27.png" alt></p><h2 id="3-7-取舍法"><a href="#3-7-取舍法" class="headerlink" title="3.7 取舍法"></a>3.7 取舍法</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/28.png" alt></p><h3 id="3-7-1-伽马分布"><a href="#3-7-1-伽马分布" class="headerlink" title="3.7.1 伽马分布"></a>3.7.1 伽马分布</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/29.png" alt></p><h3 id="3-7-2-贝塔分布"><a href="#3-7-2-贝塔分布" class="headerlink" title="3.7.2 贝塔分布"></a>3.7.2 贝塔分布</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/30.png" alt></p><h1 id="四、随机向量的生成"><a href="#四、随机向量的生成" class="headerlink" title="四、随机向量的生成"></a>四、随机向量的生成</h1><p>在很多系统仿真过程中，需要生成随机向量$X=(X_1,X_2,…,X_n)^T$。若X的各分量相互独立，可使用前述说明的不同抽样方法，对分量$X_1,X_2,…,X_n$分别独立地进行抽样。但在实际问题中，X的各分量经常是相关的，所以要考虑这种情况下随机向量的生成方法。</p><p>常用以下几种方法：</p><ul><li>条件分布法</li><li>取舍法</li><li>多维正态随机向量的抽样方法</li></ul><h2 id="4-1-条件分布法"><a href="#4-1-条件分布法" class="headerlink" title="4.1 条件分布法"></a>4.1 条件分布法</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/31.png" alt></p><h2 id="4-2-取舍法"><a href="#4-2-取舍法" class="headerlink" title="4.2 取舍法"></a>4.2 取舍法</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/32.png" alt></p><h2 id="4-3-多维正态随机向量的抽样方法"><a href="#4-3-多维正态随机向量的抽样方法" class="headerlink" title="4.3 多维正态随机向量的抽样方法"></a>4.3 多维正态随机向量的抽样方法</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-9/33.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 仿真模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工程经济与项目评价研学辅助系统</title>
      <link href="/post/software-1-dut-2/"/>
      <url>/post/software-1-dut-2/</url>
      
        <content type="html"><![CDATA[<p>《工程经济与项目评价研学辅助系统》包括多个行业案例，将知识点融合到实际工程案例中，助力大连理工大学混合式教学实施。学生可借助该辅助系统研学实际工程案例，培养学生开展实际工程分析与经济评价的能力，拓展学生的创新思维和分析能力。</p><p>工程经济与项目评价研学辅助系统 (登记号:2020SR0622640)</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/software-1-dut-2/1.png" alt="1"></p><p>开发语言：Visual Basic 6.0；</p><p>支持系统： Windows 7及以上版本；</p><p>硬件环境： Intel Pentium D或Core级处理芯片，主频1G以上，内存1G以上，建议2G，硬盘可用空间不低于50G；</p><p>软件环境： Microsoft Excel 2007及以上版本。</p><p>相关链接：<a href="http://sche.dlut.edu.cn/info/1085/18569.htm" target="_blank" rel="noopener">http://sche.dlut.edu.cn/info/1085/18569.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序 </tag>
            
            <tag> 成果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Yolo V3+keras实现的口罩识别小demo</title>
      <link href="/post/ai-1-dl-yolov3-mask/"/>
      <url>/post/ai-1-dl-yolov3-mask/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Demo展示"><a href="#Demo展示" class="headerlink" title="Demo展示"></a>Demo展示</h1><div style="display: flex; justify-content: center;"><video width="500" height="450" controls controlslist="nodownload">  <source src="/post/ai-1-dl-yolov3-mask/1.mp4" type="video/mp4">  Your browser does not support the video tag.</video></div><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p>模型：yolo v3 + keras </p><p>参考：<a href="https://github.com/CodingChaozhang/yolov3_keras" target="_blank" rel="noopener">https://github.com/CodingChaozhang/yolov3_keras</a> </p><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>数据集爬虫自互联网，共计3164张图片，477 MB，利用<code>labelImg</code>工具对每个图片进行标注。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ai-1-dl-yolov3-mask/1.png" alt="1"></p><p>数据集文件太大，暂时无法分享。</p><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><h2 id="1、预训练"><a href="#1、预训练" class="headerlink" title="1、预训练"></a>1、预训练</h2><p>下载yolo v3预训练模型权重<code>yolov3.weights</code>，使用如下命令将<code>yolov3.weights</code>转换为<code>.h5</code>文件格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python convert.py yolov3.cfg yolov3.weights model_data/yolo.h5</span><br><span class="line">python convert.py yolov3-tiny.cfg yolov3-tiny.weights model_data/yolov3-tiny.h5</span><br></pre></td></tr></table></figure><h2 id="2、预训练效果"><a href="#2、预训练效果" class="headerlink" title="2、预训练效果"></a>2、预训练效果</h2><p>CMD运行<code>python yolo_video.py --image</code>即可。</p><h2 id="3、数据集格式转换"><a href="#3、数据集格式转换" class="headerlink" title="3、数据集格式转换"></a>3、数据集格式转换</h2><p>将标签和图片分别放到目录<code>VOCdevkit/VOC2007</code>下的<code>Annotation</code>和<code>JPEGImages</code>文件夹中。然后使用<code>voc2yolo3.py</code>文件生成对应的txt文件用于yolo v3数据集的读取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VOCdevkit</span><br><span class="line">-VOC2007</span><br><span class="line">├─ImageSets    # 存放数据集列表文件，由voc2yolo3.py文件生成</span><br><span class="line">├─Annotations  # 存放数据集图片文件</span><br><span class="line">├─JPEGImages   # 存放图片标签，xml格式</span><br><span class="line">└─voc2yolo3.py # 用于生成数据集列表文件</span><br></pre></td></tr></table></figure><p>将<code>voc_annotation.py</code>中的classes修改为自己的类别，如：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ai-1-dl-yolov3-mask/2.png" alt="1"></p><p>运行<code>voc_annotation.py</code></p><p>将<code>voc_classes.txt</code>中的分类更换为自己的类别。</p><h2 id="4、训练"><a href="#4、训练" class="headerlink" title="4、训练"></a>4、训练</h2><p>修改<code>train.py</code>中的<code>anchor_path</code>可选择使用<code>yolov3</code>训练还是<code>yolov3-tiny</code>训练。</p><h2 id="5、应用"><a href="#5、应用" class="headerlink" title="5、应用"></a>5、应用</h2><p>修改根<code>yolo.py</code>文件，将<code>model_path</code>,<code>anchors_path</code>,<code>classes_path</code>替换为自己的路径。</p><p>1.单张图片测试<br><code>python yolo_video.py --image</code> + 图片路径</p><p>2.电脑摄像头实时检测<br><code>python yolo_video.py --input</code></p><p>此外对应的yolo.py文件174行改为<code>vid = cv2.VideoCapture(0)</code></p><p>3.测试本地视频<br><code>python yolo_video.py --input</code></p><p>此外对应的<code>yolo.py</code>文件174行改为<code>vid = cv2.VideoCapture(“视频路径+视频名+视频后缀名”)</code>；</p><p>4.测试本地视频并且保存视频效果<br><code>python yolo_video.py --output</code></p><p>此外对应的<code>yolo.py</code>文件184行改为<code>out = cv2.VideoWriter(“视频路径+视频名+视频后缀名”, video_FourCC, video_fps, video_size)</code></p>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 探索 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统仿真笔记（八）系统动力学模拟</title>
      <link href="/post/System-Simulation-8/"/>
      <url>/post/System-Simulation-8/</url>
      
        <content type="html"><![CDATA[<p>之前内容请回顾：<a href="/post/System-Simulation-7/">系统仿真笔记（七）连续系统仿真方法</a></p><p>本节主要介绍系统动力学的一些概念。</p><h1 id="一、系统动力学简介"><a href="#一、系统动力学简介" class="headerlink" title="一、系统动力学简介"></a>一、系统动力学简介</h1><h2 id="1-1-背景"><a href="#1-1-背景" class="headerlink" title="1.1 背景"></a>1.1 背景</h2><p>二战后，随着工业化的进程，某些国家的社会问题日趋严重，例如城市人口剧增、失业、环境污染、资源枯竭。这些问题范围广泛，关系复杂，因素众多，具有如下三个特点：</p><ul><li>各问题之间有密切的关联，而且往往存在矛盾的关系，例如经济增长与环境保护等。</li><li>许多问题如投资效果、环境污染、信息传递等有较长的延迟，因此处理问题必须从动态而不是静态的角度出发。</li><li>许多问题中既存在如经济量那样的定量的东西，又存在如价值观念等偏于定性的东西。这就给问题的处理带来很大的困难。</li></ul><p>新的问题迫切需要有新的方法来处理；另一方面，在技术上由于电子计算机技术的突破使得新的方法有了产生的可能。于是系统动力学便应运而生。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/1.png" alt></p><p>J.W.Forrester教授自50年代中期开创系统动力学以来，在一系列社会经济系统问题的研究中取得了令人瞩目的创造性成果。J.W.Forrester等在系统动力学方面的主要成果如下：</p><ul><li>1958年，工业动力学的概念首次被提出。</li><li>1961年，《Industrial Dynamics》出版，该书代表了系统动力学的早期成果。</li><li>1968年，《Principles of Systems》出版，论述了系统动力学的基本原理和方法。</li><li>1969年，《Urban Dynamics》出版，研究波士顿市的各种问题。</li><li>1971年，《世界动力学》(World Dynamics)一书，提出了“世界模型II”。</li><li>1972年，《增长的极限》(The Limits to Growth)一书，提出了更为细致的“世界模型III”。这个由罗马俱乐部主持的世界模型的研究报告已被翻译成34种语言，在世界上发行了600多万册。</li></ul><p>继世界模型之后，福雷斯特教授等又开始了历时10年以上的美国“国家模型”(System Dynamics National Model)的研究。</p><p>该模型在宏观经济学和微观经济学之间架起桥梁，成功地研究了通货膨胀和失业等等社会经济问题，并第一次从理论上阐明了西方经济学家长期争论不休的经济长波产生的机制。</p><h2 id="1-2-发展历史"><a href="#1-2-发展历史" class="headerlink" title="1.2 发展历史"></a>1.2 发展历史</h2><p>系统动力学的发展过程大致可分为四个阶段：</p><h3 id="第一阶段：1956－1961：稳态动力学"><a href="#第一阶段：1956－1961：稳态动力学" class="headerlink" title="第一阶段：1956－1961：稳态动力学"></a>第一阶段：1956－1961：稳态动力学</h3><p>由于SD这种方法早期研究对象是以企业为中心的工业系统，初名也就叫工业动力学。这一阶段明确了结构的概念，即从反馈环或系统子结构的角度来认识系统，主要研究的是平衡条件的变动对稳态的影响，而不是增长或衰减等瞬态过程。在这一“企业工程”时代，SD主要致力于公司的政策修订。该阶段以《工业动力学》一书的出版而告结束。</p><h3 id="第二阶段：增长的动力学和一般系统理论-1962－1966"><a href="#第二阶段：增长的动力学和一般系统理论-1962－1966" class="headerlink" title="第二阶段：增长的动力学和一般系统理论(1962－1966)"></a>第二阶段：增长的动力学和一般系统理论(1962－1966)</h3><p>在这一阶段中，系统概念在社会科学中得以巩固，有关系统原理的教材及实验手段得到普及。SD模型发展到非线性占重要地位的实际系统。新产品开发、公司经营及经济活动等增长过程中的正反馈机制得以阐明。同时，SD的应用范围已不仅仅是企业政策的制定，而且扩充到工程、医学、管理、心理学、经济等领域。对如此广泛领域的系统，SD都是以一种统一的观点去把握系统结构的，因此SD是作为一般系统理论而得以发展的。</p><h3 id="第三阶段：理论与应用的桥梁-1967-1975"><a href="#第三阶段：理论与应用的桥梁-1967-1975" class="headerlink" title="第三阶段：理论与应用的桥梁(1967-1975)"></a>第三阶段：理论与应用的桥梁(1967-1975)</h3><p>这一阶段为SD的进一步发展奠定了基础，迈开了由理论走向实际应用的重要步伐。一些重要的专著，如福雷斯特教授的《城市动力学》、《世界动力学》、梅多斯教授等的《增长的极限》等相继问世。由于这个方法的研究领域已远远超出工业系统的范围，1972年遂改称系统动力学。对于反馈过程，SD并不拘泥于数学上复杂的反馈理论，而作出了简明的实用解释。</p><h3 id="第四阶段：渐趋成熟-1976"><a href="#第四阶段：渐趋成熟-1976" class="headerlink" title="第四阶段：渐趋成熟(1976-  )"></a>第四阶段：渐趋成熟(1976-  )</h3><p>福雷斯特教授等主持研究的美国国家模型（耗资600万美元，方程数4000）代表了系统动力学的最新成果，它标志着系统动力学在理论及应用方面进入了一个更为成熟的阶段。</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><ul><li>多学科联系（系统科学、控制理论、突变理论、耗散结构与分叉、结构稳定性分析、灵敏度分析、统计分析、参数估计、最优化技术应用、类属结构研究、专家系统）；</li><li>多领域研究（涉及到经济、能源、交通、环境、生态、生物、医学、工业、城市等广泛的领域）。</li></ul><h2 id="二、系统动力学的概念和建模过程"><a href="#二、系统动力学的概念和建模过程" class="headerlink" title="二、系统动力学的概念和建模过程"></a>二、系统动力学的概念和建模过程</h2><h2 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h2><p><strong>系统动力学</strong>是一门基于系统论，吸取反馈理论与信息论等，并借助计算机模拟技术，认识系统问题和解决系统问题交叉的综合性的新学科。</p><p><strong>研究对象</strong>：主要研究社会、经济、生态系统等复杂系统。</p><p><strong>系统动力学的基本思想</strong>，系统内部结构及其变动主要地决定了系统的功能与行为。</p><p><strong>系统动力学基本思路</strong>，从系统思考的角度出发研究问题，定性分析与定量结合，以系统动力学方法为主结合多种方法，建立综合的模型，进行计算机模拟与分析，并进行真实性检验和与实际社会经济系统对照，获得有意义的社会经济学结论。</p><h2 id="2-2-系统动力学的学科基础"><a href="#2-2-系统动力学的学科基础" class="headerlink" title="2.2 系统动力学的学科基础"></a>2.2 系统动力学的学科基础</h2><p>系统动力学的学科基础可划分为三个层次：</p><ul><li>方法论。系统动力学的方法论是系统方法论，其基本原则是将所研究对象置于系统的形式中加以考察。系统方法论目前还不很完善，系统动力学自身的发展也将会丰富、充实系统方法论。</li><li>基础理论。反馈理论、控制理论、控制论、信息论、非线性系统理论，大系统理论和正在发展中的系统学。</li><li>应用技术。为了使系统动力学的理论与方法能真正用于分析研究实际系统，使系统动力学模型成为实际系统的“实验室”，必须借助计算机模拟技术。</li></ul><p>系统动力学模拟软件已经有几代的发展，已非常成熟易用。</p><ul><li>Dynamo</li><li>Vensim, Powersim</li></ul><h3 id="2-2-1-系统动力学数学描述"><a href="#2-2-1-系统动力学数学描述" class="headerlink" title="2.2.1 系统动力学数学描述"></a>2.2.1 系统动力学数学描述</h3><p>根据分解原理，系统$S$划分成若干个($p$个)相互关联的子系统(子结构)$S_i$。</p><script type="math/tex; mode=display">𝑆=\{𝑆_𝑖∈𝑆|1−𝑝|\}</script><p>式中：</p><script type="math/tex; mode=display">S—代表整个系统； \\ Si—代表子系统，</script><p>数学描述如下：</p><script type="math/tex; mode=display">L=PR \\ \left[\begin{matrix}R\\A\end{matrix}\right]=\left[\begin{matrix}L\\A\end{matrix}\right]</script><p>式中：</p><script type="math/tex; mode=display">L—状态变量向量；\\R—速率变量向量；\\A—辅助变量向量；\\L—纯速率变量向量；\\P—转移矩阵；\\W—关系矩阵。</script><h3 id="2-2-2-系统动力学的系统-System-描述"><a href="#2-2-2-系统动力学的系统-System-描述" class="headerlink" title="2.2.2 系统动力学的系统(System)描述"></a>2.2.2 系统动力学的系统(System)描述</h3><p>系统可以用一组随时间变化的状态变量$X=(x_1,x_2,..x_n)$描述：系统的相空间</p><p>系统有一定的输入： $U=(u_1, u_2, ..,u_m)$： 控制量</p><p>系统是通过相互作用而发展变化的：$X’=f(X,U,t)$ </p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/2.png" alt></p><p>系统由多个子系统组成，最小的子系统是一阶反馈回路，它包含：状态量，速率量，及辅助变量，是一个多元一阶微分方程。</p><p>系统的未来发展取决于其结构及初始条件: $U$, $f(X,U,t))$ </p><p>系统动力学的模型，相当于这组微分方程组： $X’=f(X,U,t) $</p><h3 id="2-2-3-系统动力学的数学基础"><a href="#2-2-3-系统动力学的数学基础" class="headerlink" title="2.2.3 系统动力学的数学基础"></a>2.2.3 系统动力学的数学基础</h3><p>数学在系统模拟中的作用</p><ul><li>数学工具选择的指导思想（以模拟为主、演绎为辅）</li><li>模型的精度与控制（社会复杂系统应用中建模与成本控制）</li></ul><p>线性微分方程解的相关理论与建模的内在关系</p><ul><li>解的存在性与结构（模型的数值解、点与面的关系、局部与整体）</li><li>解的稳定性（收敛、均衡、临界点）</li><li>Robust  鲁棒与模型的稳定性（强壮性）</li></ul><h2 id="2-3-动力学系统的行为模式与结构"><a href="#2-3-动力学系统的行为模式与结构" class="headerlink" title="2.3 动力学系统的行为模式与结构"></a>2.3 动力学系统的行为模式与结构</h2><h3 id="2-3-1-反馈的概念"><a href="#2-3-1-反馈的概念" class="headerlink" title="2.3.1 反馈的概念"></a>2.3.1 反馈的概念</h3><p>反馈：系统内同一单元或同一子块其输出与输入间的关系</p><ul><li>对整个系统而言，“反馈”则指系统输出与来自外部环境的输入的关系。</li><li>反馈可以从单元或子块或系统的输出直接联至其相应的输入，也可以经由媒介——其他单元、子块、甚至其他系统实现。</li></ul><p>反馈的概念是普遍存在的。比如，空调设备是人们所熟知的，为了维持室内的温度，需要由热敏器件组成的<strong>温度继电器</strong>与冷却系统(或加热系统) 联合运行。由前者担负室内温度的检测，并与给定的期望室温加以比较，然后把信息馈送至<strong>控制器</strong>，使冷却(或加热)器的作用在最大与关停之间进行调节，从而实现控制室温的目的。其中温度继电器就是反馈器件，上述的信息馈送过程就是信息反馈作用。</p><h3 id="2-3-2-反馈系统"><a href="#2-3-2-反馈系统" class="headerlink" title="2.3.2 反馈系统"></a>2.3.2 反馈系统</h3><p>反馈系统就是包含有反馈环节与其作用的系统。它要受系统本身的历史行为的影响，把历史行为的后果回授给系统本身，以影响未来的行为。</p><p>库存控制系统是一个反馈系统。</p><ul><li>发货使库存量减少，当库存低于期望水平以下一定数值后，库存管理人员即按预定的方针向生产部门订货，货物经一定延迟到达，然后使库存量逐渐回升。</li><li>反映库存当前水平的信息经过订货与生产部门的传递最终又以来自生产部门的货物的形式返回库存。</li></ul><p>下面简单看一个例子：<strong>库存信息反馈调节过程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/3.png" alt></p><p>库存订货系统是一个简单的反馈系统。从图中可知它形成闭合的回路(或称环)，称之为<strong>反馈回路</strong>(或环)。反馈回路就是由一系列的因果与相互作用链组成的闭合回路或者说是由信息与动作构成的闭合路径。</p><h3 id="2-3-3-回路、闭环系统、开环系统"><a href="#2-3-3-回路、闭环系统、开环系统" class="headerlink" title="2.3.3 回路、闭环系统、开环系统"></a>2.3.3 回路、闭环系统、开环系统</h3><p>反馈系统就是相互联结与作用的一组回路。</p><p>反馈系统就是闭环系统。</p><p>单回路的系统是简单系统；具有三个回路以上的系统是复杂系统。</p><p>反馈系统俯拾皆是，生物的、环境的、生态的、工业的、农业的、经济的和社会的系统都是反馈系统。</p><p>开环系统是相对于闭环系统(即反馈系统)而言的，因其内部未形成闭合的反馈环，像是被断开的环，故称为开环系统。</p><h3 id="2-3-4-动态系统的行为模式与结构"><a href="#2-3-4-动态系统的行为模式与结构" class="headerlink" title="2.3.4 动态系统的行为模式与结构"></a>2.3.4 动态系统的行为模式与结构</h3><p><strong>典型的几种行为模式：</strong></p><ul><li>指数增长（正反馈）/寻的（负反馈）/震荡（时间延迟的负反馈）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/4.png" alt></p><ul><li>S形增长（带承载力约束的正-负反馈）</li><li>过度调整的增长（时间延迟的S形增长）</li><li>过度调整并崩溃（承载能力消耗的S形增长）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/5.png" alt></p><h3 id="2-3-5-反馈系统的分类"><a href="#2-3-5-反馈系统的分类" class="headerlink" title="2.3.5 反馈系统的分类"></a>2.3.5 反馈系统的分类</h3><p>反馈系统分为<strong>正反馈系统</strong>和<strong>负反馈系统</strong>。</p><h4 id="2-3-5-1-正反馈回路的特点"><a href="#2-3-5-1-正反馈回路的特点" class="headerlink" title="2.3.5.1 正反馈回路的特点"></a>2.3.5.1 正反馈回路的特点</h4><p>正反馈回路的特点是，发生于其回路中任何一处的初始偏离与动作循回路一周将获得增大与加强。</p><p>正反馈回路可具有诸如非稳定的、非平衡的、增长的和自增强的多种特性。</p><p>在实际系统中，就系统产生的后果而言，正反馈回路可导致良性循环与恶性循环两类。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/6.png" alt></p><h4 id="2-3-5-2-负反馈回路的特点"><a href="#2-3-5-2-负反馈回路的特点" class="headerlink" title="2.3.5.2 负反馈回路的特点"></a>2.3.5.2 负反馈回路的特点</h4><p>负反馈回路的特点是，它力图缩小系统状态相对于目标状态(或某平衡状态)的偏离。</p><p>负反馈回路亦可称为稳定回路，平衡回路或自校正回路。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/7.png" alt></p><p>库存—订货系统是一个闭环的反馈系统</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/8.png" alt></p><p>系统中的库存缺货信息的收集与向生产部门提出订货的要求均由管理人员承担，假设系统中无管理人员或管理人员失职，则系统中<strong>失去反馈环节与反馈作用</strong>，处于无人管理状态，也就成为开环系统了。库存量就不可能保持在合理的水平。</p><h2 id="2-4-系统动力学解决问题的一般过程"><a href="#2-4-系统动力学解决问题的一般过程" class="headerlink" title="2.4 系统动力学解决问题的一般过程"></a>2.4 系统动力学解决问题的一般过程</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/9.png" alt></p><p><strong>提出问题</strong>：明确建立模型的目的。即要明确要研究和解决什么问题。</p><p><strong>参考行为模式分析</strong>：分析系统的事件，及实际存在的行为模式，提出设想和期望的系统行为模式。作为改善和调整系统结构的目标。</p><p><strong>提出假设建立模型</strong>：由行为模式，提出系统的结构假设。由假设出发，设计系统的因果关系图，流图，并列出方程，定义参数。从而将一系列的系统动力学假设，表示成了清晰的数学关系集合。</p><p><strong>模型模拟</strong>：调整参数，运行模型，产生行为模式。建立好的模型是一个实验室，可以由试验参数和结构的变化理解结构与系统行为模式的关系。</p><h2 id="2-5-系统动力学建模流程"><a href="#2-5-系统动力学建模流程" class="headerlink" title="2.5 系统动力学建模流程"></a>2.5 系统动力学建模流程</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/10.png" alt></p><h1 id="三、-建模初期的几个重要环节"><a href="#三、-建模初期的几个重要环节" class="headerlink" title="三、 建模初期的几个重要环节"></a>三、 建模初期的几个重要环节</h1><p>建模初期有几个重要环节：</p><ul><li>系统框图</li><li>因果回路图构建</li><li>模型流图构建</li></ul><h2 id="3-1-系统框图（分解的结果）"><a href="#3-1-系统框图（分解的结果）" class="headerlink" title="3.1 系统框图（分解的结果）"></a>3.1 系统框图（分解的结果）</h2><p>建模的系统结构性构建（系统分析的结果）</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/11.png" alt></p><h2 id="3-2-因果回路图构建"><a href="#3-2-因果回路图构建" class="headerlink" title="3.2 因果回路图构建"></a>3.2 因果回路图构建</h2><h3 id="3-2-1-因果回路图"><a href="#3-2-1-因果回路图" class="headerlink" title="3.2.1 因果回路图"></a>3.2.1 因果回路图</h3><p>因果回路图(causal  loop diagram, CLD)用于表达系统中变量的动态因果关系。用途如下</p><ol><li>构思模型的初始阶段；</li><li>非技术性地、直观地描述模型结构，便于与建模的相关人员交流讨论。 </li></ol><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/12.png" alt></p><h3 id="3-2-2-因果图的记号"><a href="#3-2-2-因果图的记号" class="headerlink" title="3.2.2 因果图的记号"></a>3.2.2 因果图的记号</h3><p>因果链与反馈分析需要注意的几点：</p><ul><li>每个链条代表变量之间的因果关系，不是相关关系</li><li>反馈结构应形成闭合回路，下图的结构是开环回路。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/13.png" alt></p><h3 id="3-2-3-因果链与反馈分析-符号"><a href="#3-2-3-因果链与反馈分析-符号" class="headerlink" title="3.2.3 因果链与反馈分析-符号"></a>3.2.3 因果链与反馈分析-符号</h3><ul><li>在因果与相互关系图中采用名词或名词的短语，不用动词。变量之间的影响与作用以带箭头的因果链表示。</li><li>左图是错误的，右图才是正确的；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/14.png" alt></p><h3 id="3-2-4-因果链与反馈分析：极性"><a href="#3-2-4-因果链与反馈分析：极性" class="headerlink" title="3.2.4 因果链与反馈分析：极性"></a>3.2.4 因果链与反馈分析：极性</h3><p><strong>因果链极性</strong> </p><p>因果链$X→+ Y$：连接$X$与$YB$的因果链取正号，</p><ol><li>若$X$增加（减少）→$Y$增加（减少），或</li><li>若X的变化使$Y$在同一方向上发生变化。</li></ol><p>即$𝝏𝒀/𝝏𝑿&gt;𝟎$  ，累加情况下$ Y=\int _{t_0}^t(X+…)𝒅𝒔+𝒀_{𝒕𝟎} $</p><p>因果链$X→ Y$：连接$X$与$Y$的因果链取负号，</p><ol><li>若$X$增加（减少）→$Y$减少（增加），或</li><li>若$X$的变化使$Y$在相反方向上发生变化。</li></ol><p>即$𝝏𝒀/𝝏𝑿&lt;𝟎$  ，累加情况下$Y=\int _{t_0}^t(-X+…)𝒅𝒔+𝒀_{𝒕𝟎}$</p><p>因果链回路极性符号+，- </p><ul><li>注意极性回路与相关回路朝同一极性绕圈。</li></ul><p>确定回路极性的一般原则</p><ol><li>若反馈回路包含偶数个负的因果链，则其极性为正；</li><li>若反馈回路包含奇数个负的因果链，则其极性为负。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/15.png" alt></p><h3 id="3-2-5-因果回路图分析——延迟"><a href="#3-2-5-因果回路图分析——延迟" class="headerlink" title="3.2.5 因果回路图分析——延迟"></a>3.2.5 因果回路图分析——延迟</h3><p>指出因果链中的重要延迟</p><ol><li>延迟十分重要：延迟使系统产生惰性、产生震荡；</li><li>延迟的标注。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/16.png" alt></p><h3 id="3-2-6-几个因果回路图的分析"><a href="#3-2-6-几个因果回路图的分析" class="headerlink" title="3.2.6 几个因果回路图的分析"></a>3.2.6 几个因果回路图的分析</h3><h4 id="3-2-6-1-富者愈富基模"><a href="#3-2-6-1-富者愈富基模" class="headerlink" title="3.2.6.1 富者愈富基模"></a>3.2.6.1 富者愈富基模</h4><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/17.png" alt></p><h4 id="3-2-6-2-恶性竞争（两败俱伤）基模"><a href="#3-2-6-2-恶性竞争（两败俱伤）基模" class="headerlink" title="3.2.6.2 恶性竞争（两败俱伤）基模"></a>3.2.6.2 恶性竞争（两败俱伤）基模</h4><p>只把注意力放在对方的威胁上</p><p>在一个平衡水平上上下波动</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/18.png" alt></p><h4 id="3-2-6-3-成长的上限基模"><a href="#3-2-6-3-成长的上限基模" class="headerlink" title="3.2.6.3 成长的上限基模"></a>3.2.6.3 成长的上限基模</h4><p>左边部分是促进成长的正反馈环</p><p>右边部分是抑制成长的负反馈环</p><p>刻画了各种组织运行的基本结构</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/19.png" alt></p><p>成长与投资不足基模</p><ul><li>上半部分为成长上限基模</li><li>下半部分为投资不足负反馈环</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/20.png" alt></p><h2 id="3-3-流图的构建"><a href="#3-3-流图的构建" class="headerlink" title="3.3 流图的构建"></a>3.3 流图的构建</h2><p>因果回路图表现系统中变量间的因果关系，属于定性描述。</p><p>当进一步建立变量间量化关系时，需要建立存量流量图。</p><h3 id="3-3-1-存量和流量的概念"><a href="#3-3-1-存量和流量的概念" class="headerlink" title="3.3.1 存量和流量的概念"></a>3.3.1 存量和流量的概念</h3><p>以浴缸里的水为例：</p><ul><li>存量：浴缸里存在的水量；</li><li>流量：浴缸里的水量的变化，包括流入的水量、流出的水量</li></ul><p>其他例子：</p><ul><li>工厂：生产量—〉库存量—〉销售量 </li><li>账户：现金流入量—〉账户余额—〉现金流出量</li><li>职工数：招募人数—〉职工数—〉辞、退、离职人数 </li></ul><h3 id="3-3-2-流图的表达"><a href="#3-3-2-流图的表达" class="headerlink" title="3.3.2 流图的表达"></a>3.3.2 流图的表达</h3><p>流图的构成如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/21.png" alt></p><h3 id="3-3-3-流图的数学描述"><a href="#3-3-3-流图的数学描述" class="headerlink" title="3.3.3 流图的数学描述"></a>3.3.3 流图的数学描述</h3><p>流图的结构可用数学公式描述为：</p><script type="math/tex; mode=display">𝑺𝒕𝒐𝒄𝒌(𝒕)=\int_{t_0}^t [𝑰𝒏𝒇𝒍𝒐𝒘(𝒔)−𝑶𝒖𝒕𝒇𝒍𝒐𝒘(𝒔)]𝒅𝒔+𝑺𝒕𝒐𝒄𝒌(𝒕_𝟎)</script><p>其中：</p><ul><li>$Stock(t)$：$t$时刻的存量，</li><li>$Inflow(s)$：流入量， </li><li>$Outflow(s)$：流出量，</li><li>$ Stock(t_0)$：初始时刻$ t_0$时的存量。 </li></ul><p>流量是存量的净改变率，可用存量的微分表示</p><script type="math/tex; mode=display">𝒅(𝑺𝒕𝒐𝒄𝒌)∕𝒅𝒕=𝑰𝒏𝒇𝒍𝒐𝒘(𝒕)−𝑶𝒖𝒕𝒇𝒍𝒐𝒘(𝒕)</script><p>因此，流量实际上是一个瞬间值，及速率的含义（导数）</p><p><strong>存量流图例：劳动力的两状态流图</strong></p><p>劳动力队伍一般可分成两部分，一部分为已具有劳动技能的正式工人；另一部分为尚在培训的工人，培训需要一定时问，如半年或一年，称为培训延迟。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/22.png" alt></p><h3 id="3-3-4-存量流量与系统动态性"><a href="#3-3-4-存量流量与系统动态性" class="headerlink" title="3.3.4 存量流量与系统动态性"></a>3.3.4 存量流量与系统动态性</h3><p>水平变量和系统的状态及连续性</p><p>水平变量与系统状态本身虽不能自我产生变化，但由于它的存在，才使我们能在不同的时间间隔感觉到系统的连续性（如：水槽中水量），有了水平变量的概念，才能建立系统连续性的概念（如水槽水量的动态变化）。</p><p>水平变量是延迟的来源</p><p>由于速率变量是一个行动变量，而水平变量是过去所有行动结果的积累，输入有变化时，输出不会马上变化，这样的输出落后于输入的过程称为延迟。而两者的差异体现在存量中，使存量产生变化。<br>水平变量产生不均匀的动态</p><p>由于上述输出与输入的差异性，使得存量平衡了这种差异。所以，可以利用某些政策控制、平衡输出、输入间的差异。</p><p>如：粮食的库存，生产的库存。</p><h3 id="3-3-5-流图中的反馈回路"><a href="#3-3-5-流图中的反馈回路" class="headerlink" title="3.3.5 流图中的反馈回路"></a>3.3.5 流图中的反馈回路</h3><p>就系统整体来说，反馈回路事实上就是联系决策、行动、系统水平变量(系统的状态)以及信息再回到决策点的整个闭合回路。</p><p>从下图中可以看到，决策控制行动，行动影响系统状况，系统状态的新信息又将决策修改，如此不断进行。所以，系统的动态现象是由反馈回路的决策过程所形成的。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/23.png" alt></p><p><strong>流图的举例：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/24.png" alt></p><h3 id="3-3-6-辅助变量与常量"><a href="#3-3-6-辅助变量与常量" class="headerlink" title="3.3.6 辅助变量与常量"></a>3.3.6 辅助变量与常量</h3><p>辅助变量（Auxiliary variable）</p><ul><li>辅助变量表达决策过程的中间变量。用来描述决策过程中水平变量、速率变量之间信息传递和转换过程。辅助变量只随某些变量的变化而随时变化。</li><li>如：库存偏差 = 目标库存 - 当前库存Stock（t）</li><li>辅助变量往往和相关常量一起构成系统的“控制策略”。</li><li>如：订货 =  库存偏差/库存调节时间</li></ul><p>常量（Constant）</p><ul><li>在研究期间保持不变的一个量。一般是系统中的某个标准或目标。</li><li>运用辅助变量和常量，可以丰富模型的逻辑描述，易于建模和理解。</li></ul><h1 id="四、建模中期：建立模型方程"><a href="#四、建模中期：建立模型方程" class="headerlink" title="四、建模中期：建立模型方程"></a>四、建模中期：建立模型方程</h1><h3 id="4-1-一个简单的库存系统—引例"><a href="#4-1-一个简单的库存系统—引例" class="headerlink" title="4.1 一个简单的库存系统—引例"></a>4.1 一个简单的库存系统—引例</h3><p>考虑简单的库存系统，输入、输出速率为常数。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/25.png" alt></p><h3 id="4-1-1-案例说明"><a href="#4-1-1-案例说明" class="headerlink" title="4.1.1 案例说明"></a>4.1.1 案例说明</h3><p>考虑简单的库存系统，输入、输出速率为常数。</p><p>库存量在5个月前为l200件，假定每月发货与入库各为100与80件，则库存INV每月减少20件。即：</p><script type="math/tex; mode=display">INV(t_0) = 1200，Input rate = 80， Output rate = 100</script><p>可用数学式表达：</p><script type="math/tex; mode=display">INV现在＝INV过去 + (时间间隔)×(净速率)</script><p>则：</p><script type="math/tex; mode=display">INV现在＝1200件+(5月) ×(80件/月-100件/月)        ＝1200+5× (-20)    ＝1200-100   ＝1100(件)</script><p>当速率随时间变化时，可以把连续的时间分割成小的时间间隔，并假定在各小间隔内速率是固定的；然后，藉助计算机逐段地加以计算。若计算的时间间隔足够小，速率变动不大，则此结果将与从微分方程获得的精确解(如果可能求得的话)十分接近。</p><p>给变量带上时间下标以区别在时间上的先后。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/26.png" alt></p><p>K表示现在，J表示刚刚过去的那一时刻，L表示紧随当前的未来的那一时刻。DT表示J与K或K与L之间的时间长度。</p><p>库存方程表示如下：</p><script type="math/tex; mode=display">INV.K = INV.J + DT*(ORRE.JK - SH.JK)</script><p>式中：</p><script type="math/tex; mode=display">INV.K – 库存现有量； \\    INV.J – DT前的库存量；\\    DT – 计算的时间间隔；\\    ORRE – 在JK间隔内收到的订货量\\    SH – 在JK间隔内的发货量。</script><h3 id="4-1-2-建立模型"><a href="#4-1-2-建立模型" class="headerlink" title="4.1.2 建立模型"></a>4.1.2 建立模型</h3><p>L  水平方程</p><p>R  速率方程</p><p>A  辅助方程</p><p>C  赋值予常数</p><p>N  计算初始值</p><p>L方程是积累(或称积分)方程，R与A方程是代数运算方程，C，N语句为模型提供参数值。</p><h4 id="水平方程"><a href="#水平方程" class="headerlink" title="水平方程"></a>水平方程</h4><p>计算水平(状态)变量的方程称为水平变量方程。</p><p>例如：</p><script type="math/tex; mode=display">L\qquad LEVEL.K=LEVEL.J+DT*(INFLOW.JK-OUTFLOW.JK)</script><p>式中：</p><p>​    LEVEL –––– 水平变量；</p><p>​    INFLOW –––– 输入速率(变化率)；</p><p>​    OUTFLOW –––– 输出速率(变化率)；</p><p>​    DT –––– 计算间隔(从J时刻到K时刻)。</p><h4 id="速率方程"><a href="#速率方程" class="headerlink" title="速率方程"></a>速率方程</h4><p>在水平变量方程中代表输入与输出的变量称为速率，它由速率方程求出。</p><p>例如：</p><script type="math/tex; mode=display">R   \qquad BIRTHS.KL = BRF*POP.K</script><p>式中：<br>    BIRTHS —— 出生率(人/年)；</p><p>​    BRF —— 出生率系数(人/年)；</p><p>​    POP —— 人口(人)。</p><p>速率的值在DT时间内是不变的。进一步说，速率方程是在K时刻进行计算，而在自K至L的时间间隔(DT)中保持不变。速率的时间下标为KL。</p><h4 id="辅助变量与方程"><a href="#辅助变量与方程" class="headerlink" title="辅助变量与方程"></a>辅助变量与方程</h4><p>在建立速率方程之前，若末先做好某些代数计算，把速率方程中必需的信息仔细加以考虑，那么将遇到很大的困难。</p><p>这些附加的代数运算，称为辅助方程，方程中的变量则称为辅助变量。</p><p>例如：</p><script type="math/tex; mode=display">A   \qquad DISC.K = ROOM – TEA.K \\R    \qquad CHNG.K = CONST*DISC.K</script><p>式中：</p><p>DISC —— 茶水与室温度差(℃)；</p><p>ROOM —— 室温度(℃)；</p><p>TEA —— 茶水温度(℃)；</p><p>CHNG —— 茶水的温度变化率(℃/分)“</p><p>CONST —— 介质传热系数(1/分)。</p><h4 id="N方程"><a href="#N方程" class="headerlink" title="N方程"></a>N方程</h4><p>N方程的主要用途是为水平方程赋予初始值。</p><p>在模型程序中，N方程通常紧跟着水平方程。</p><script type="math/tex; mode=display">L  \qquad  INV.K＝INV.J+(DT)*(ORRE.JK-SH.JK) \\N  \qquad  INV＝1000</script><p>上述方程表明库存的初值为1000件，模拟应从INV=1000开始。</p><h4 id="C方程"><a href="#C方程" class="headerlink" title="C方程"></a>C方程</h4><p>C方程的主要用途是为常数赋值。</p><script type="math/tex; mode=display">C  \qquad  OPL = 3</script><h2 id="4-2-库存与劳动力模型—应用例举"><a href="#4-2-库存与劳动力模型—应用例举" class="headerlink" title="4.2 库存与劳动力模型—应用例举"></a>4.2 库存与劳动力模型—应用例举</h2><p>库存与劳动力模型为一个二阶系统模型，属于复合模拟（SyntheSim）</p><p>二阶系统中，一般包括2个独立的状态变量，并且在同一回路中。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/27.png" alt></p><p><strong>建模步骤：</strong></p><ol><li><p>确定问题 </p><ul><li><p>问题的定义 </p></li><li><p>参考模式 </p></li><li>构模目的与使用模型的用户持点（关注两者的变化关系）</li></ul></li><li><p>模型结构的构思 </p><ul><li><p>系统的界限 （库存、劳动力）</p></li><li><p>系统的反馈结构 （以库存和劳动力为主的因果反馈回路分析） </p></li></ul></li><li><p>反馈结构流图与建立模型的方程式 </p></li></ol><h3 id="4-2-1-确定问题（数学描述）"><a href="#4-2-1-确定问题（数学描述）" class="headerlink" title="4.2.1 确定问题（数学描述）"></a>4.2.1 确定问题（数学描述）</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/28.png" alt></p><blockquote><p>注：图中红色圈标出的：</p><p>STEP(height, step time)：阶跃函数</p><p>height：阶跃幅度</p><p>step time：从0到height所用的时间</p></blockquote><h3 id="4-2-2-系统的界限"><a href="#4-2-2-系统的界限" class="headerlink" title="4.2.2 系统的界限"></a>4.2.2 系统的界限</h3><p>系统的界限 （库存、劳动力）</p><ul><li>库存</li><li>劳动力</li><li>销售</li><li>生产能力</li></ul><h3 id="4-2-3-反馈结构"><a href="#4-2-3-反馈结构" class="headerlink" title="4.2.3 反馈结构"></a>4.2.3 反馈结构</h3><p>库存与劳动力模型</p><ul><li>系统的反馈结构</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/29.png" alt></p><h3 id="4-2-4-系统流图"><a href="#4-2-4-系统流图" class="headerlink" title="4.2.4 系统流图"></a>4.2.4 系统流图</h3><p>库存与劳动力模型</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/30.png" alt></p><h3 id="4-2-5-模型基本参数"><a href="#4-2-5-模型基本参数" class="headerlink" title="4.2.5 模型基本参数"></a>4.2.5 模型基本参数</h3><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>01</td><td>FINAL  TIME = 100  Units:  Month  The  final time for the simulation.</td></tr><tr><td>02</td><td>INITIAL  TIME = 0  Units:  Month  The  initial time for the simulation</td></tr><tr><td>03</td><td>SAVEPER = TIME STEP  Units:  Month  The  frequency with which output is stored</td></tr><tr><td>04</td><td>TIME  STEP = 1  Units:  Month  The  time step for the simulation</td></tr></tbody></table></div><h3 id="4-2-6-模型方程"><a href="#4-2-6-模型方程" class="headerlink" title="4.2.6 模型方程"></a>4.2.6 模型方程</h3><div class="table-container"><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>01</td><td>库存  =  INTEG(产品生产率-产品销售率,300)  Units:  Widget</td><td>07</td><td>库存周期  = 3  库存调节时间  = 2  Units:  Month</td></tr><tr><td>02</td><td>产品生产率=劳动力×生产能力  Units:  Widget/Month</td><td>08</td><td>库存调节  = (目标库存量  - 库存)/  库存调节时间  Units:  Widget/Month</td></tr><tr><td>03</td><td>产品销售率  =  100 + STEP(50,20)  Units:  Widget/Month</td><td>09</td><td>劳动力  =  INTEG(纯雇用率,  目标劳动力)  Units:  Person</td></tr><tr><td>04</td><td>生产能力=  1  Units:  Widget/Month/Person</td><td>10</td><td>目标劳动力=目标生产量 /生产能力   Units:  Person</td></tr><tr><td>05</td><td>目标库存量=产品销售×库存周期  Units:  Widget</td><td>11</td><td>劳动力调整时间  = 3  Units:  Month</td></tr><tr><td>06</td><td>目标生产量=产品销售+库存调节  Units:  Widget/Month</td><td>12</td><td>纯雇用率=(目标劳动力-劳动力)/劳动力调整时间     Units:  Person/Month</td></tr></tbody></table></div><h3 id="4-2-7-库存与劳动力模型-系统的行为"><a href="#4-2-7-库存与劳动力模型-系统的行为" class="headerlink" title="4.2.7 库存与劳动力模型-系统的行为"></a>4.2.7 库存与劳动力模型-系统的行为</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/31.png" alt></p><h1 id="五、简单系统与行为模式"><a href="#五、简单系统与行为模式" class="headerlink" title="五、简单系统与行为模式"></a>五、简单系统与行为模式</h1><p>本节讨论简单系统的结构和行为，及两者之间的关系。</p><ul><li>一阶系统的行为模式</li><li>二阶系统的行为模式</li></ul><h2 id="5-1-一阶系统与行为"><a href="#5-1-一阶系统与行为" class="headerlink" title="5.1 一阶系统与行为"></a>5.1 一阶系统与行为</h2><h3 id="5-1-1-概述"><a href="#5-1-1-概述" class="headerlink" title="5.1.1 概述"></a>5.1.1 概述</h3><p>SD中系统的阶（order）是指系统中状态变量的个数。一阶系统只有1个状态变量。</p><p>一阶系统系统行为</p><ul><li>一阶系统的数学描述</li><li>正反馈;</li><li>负反馈;</li><li>S增长;</li><li>一阶系统与振荡</li></ul><h3 id="5-1-2-一阶系统的数学描述"><a href="#5-1-2-一阶系统的数学描述" class="headerlink" title="5.1.2 一阶系统的数学描述"></a>5.1.2 一阶系统的数学描述</h3><p>一般系统情况下，系统的状态方程模型可表示为：</p><script type="math/tex; mode=display">\dot{𝒙}(𝒕)=𝑨𝒙(𝑡) +𝑩𝑢(𝑡)  \\                 𝒚(𝑡)=𝐶𝒙(𝑡)+𝑫𝑢(𝑡)</script><p>其中，</p><p>$x(t)=[x_1(t)]^T$，是1维状态向量,</p><p>$u(t)=[u_1(t),…,u_m(t)]^T$，是m维输入向量,</p><p>$ y(t)=[y_1(t),…,y_r(t)]^T$，是r维输出向量,</p><p>$A(1×1),B (1×m),C (r×1),D (r×m)$是系数矩阵。当单输入/单输出时，m=r=1，u和y均为标量。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/32.png" alt></p><h3 id="5-1-3-一阶系统的结构形式"><a href="#5-1-3-一阶系统的结构形式" class="headerlink" title="5.1.3 一阶系统的结构形式"></a>5.1.3 一阶系统的结构形式</h3><p>系统动力学对一阶系统的认识</p><ul><li>系统动力学认为一阶反馈回路是构成系统的基本结构。一个复杂系统则是由这些相互作用的反馈回路组成的。</li><li>一阶系统的基本结构</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/33.png" alt></p><h3 id="5-1-4-一阶正反馈回路"><a href="#5-1-4-一阶正反馈回路" class="headerlink" title="5.1.4 一阶正反馈回路"></a>5.1.4 一阶正反馈回路</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/34.png" alt></p><h3 id="5-1-5-一阶负反馈回路"><a href="#5-1-5-一阶负反馈回路" class="headerlink" title="5.1.5 一阶负反馈回路"></a>5.1.5 一阶负反馈回路</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/35.png" alt></p><h3 id="5-1-6-一阶系统与行为"><a href="#5-1-6-一阶系统与行为" class="headerlink" title="5.1.6 一阶系统与行为"></a>5.1.6 一阶系统与行为</h3><p>S增长理论应用举例（多反馈回路）</p><ul><li>Hype Cycle for IT Services（ Source: Gartner, Hype Cycle for IT Services, 2003 ）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/36.png" alt></p><h2 id="5-2-二阶系统与行为"><a href="#5-2-二阶系统与行为" class="headerlink" title="5.2 二阶系统与行为"></a>5.2 二阶系统与行为</h2><h3 id="5-2-1-二阶系统系统概述"><a href="#5-2-1-二阶系统系统概述" class="headerlink" title="5.2.1 二阶系统系统概述"></a>5.2.1 二阶系统系统概述</h3><p>二阶系统的数学描述:</p><p>一般系统情况下，系统的状态方程模型可表示为：</p><script type="math/tex; mode=display">\dot{𝒙}(𝒕)=𝑨𝒙(𝑡) +𝑩𝑢(𝑡)  \\                 𝒚(𝑡)=𝐶𝒙(𝑡)+𝑫𝑢(𝑡)</script><p>其中，</p><p>$x(t)=[x_1(t),x_2(t)]^T$，是2维状态向量,</p><p>$u(t)=[u_1(t),…,u_m(t)]^T$，是m维输入向量,</p><p>$ y(t)=[y_1(t),…,y_r(t)]^T$，是r维输出向量,</p><p>$A(2×2),B (2×m),C (r×2),D (r×m)$是系数矩阵。当单输入/单输出时，m=r=1，u和y均为标量。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/37.png" alt></p><h3 id="5-2-2-二阶系统的行为模式"><a href="#5-2-2-二阶系统的行为模式" class="headerlink" title="5.2.2 二阶系统的行为模式"></a>5.2.2 二阶系统的行为模式</h3><p>常系数二阶系统系统的行为模式</p><ul><li>非震荡模式：阶跃、渐进增长、超调</li><li>震荡模式：减幅震荡、等幅震荡、增幅震荡 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/38.png" alt></p><p>典型的二阶系统举例（库存与劳动力模型）：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/39.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/40.png" alt></p><h1 id="六、系统结构与动态：延迟"><a href="#六、系统结构与动态：延迟" class="headerlink" title="六、系统结构与动态：延迟"></a>六、系统结构与动态：延迟</h1><h2 id="6-1-延迟的定义"><a href="#6-1-延迟的定义" class="headerlink" title="6.1 延迟的定义"></a>6.1 延迟的定义</h2><p>延迟是一种过程，其输出以某种模式滞后其输入。</p><p>任何延迟都包括一个存量，它用来积累输入与输出之间的差异</p><ul><li>物质延迟（material delay）：物质流动过程中产生的，如库存系统。物质延迟系统是守恒系统。</li><li>信息延迟（information delay）：感知（perception）和认定（beliefs）的逐渐调整，其存量在于对过去信息的认知，如销售量预测。信息延迟系统是非守恒系统。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/41.png" alt></p><h2 id="6-2-物质延迟系统的结构和行为"><a href="#6-2-物质延迟系统的结构和行为" class="headerlink" title="6.2 物质延迟系统的结构和行为"></a>6.2 物质延迟系统的结构和行为</h2><h3 id="6-2-1-概述"><a href="#6-2-1-概述" class="headerlink" title="6.2.1 概述"></a>6.2.1 概述</h3><p>由前图的存量、流量结构，分析决定输出速率的规则。</p><ol><li>存量的输出流受到各种资源的限制。如：生产系统中，劳动力、资本、原材料影响了生产系统的输出。</li><li>输出速率与输入速率高度相关，不受其它因素影响。如：管道延迟的情况，延迟的时间是一个常数。</li><li>输出速率受到存量、延迟时间的影响，与其它因素无关。这种过程被称为纯粹延迟（pure delay）。</li></ol><p>延迟的分析，包括：输出流的规则，平均延迟时间、输出流在平均延迟时间附近的分布。</p><h3 id="6-2-2-平均延迟时间"><a href="#6-2-2-平均延迟时间" class="headerlink" title="6.2.2 平均延迟时间"></a>6.2.2 平均延迟时间</h3><p>延迟时间指物质平均需要多长时间来通过这个过程。</p><p>一个单位物质的平均之流时间（average residence time）6.2.3 </p><h3 id="6-2-3-输出流在平均延迟时间附近的分布"><a href="#6-2-3-输出流在平均延迟时间附近的分布" class="headerlink" title="6.2.3 输出流在平均延迟时间附近的分布"></a>6.2.3 输出流在平均延迟时间附近的分布</h3><p>描述物品通过延迟的过程。</p><p>首选是服务规则，包括<strong>先进先出（FIFO）</strong>、<strong>后进先出（LIFO）</strong>、<strong>随机选择</strong>等规则。</p><p>其次，和处理的时间长短有关。</p><p>所以，分析延迟时，除了要确定平均延迟时间外，还要确定输出流在平均延迟时间附近的分布情况。</p><h3 id="6-2-4-管道延迟"><a href="#6-2-4-管道延迟" class="headerlink" title="6.2.4 管道延迟"></a>6.2.4 管道延迟</h3><p>物品进入顺序与输出顺序是一致的，延迟时间为常数，这种延迟称为管道延迟（pipeline delay）或运输滞后（transportation lag）。如：工件进入汽车装配线。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/42.png" alt></p><p>例：途中的在途货物，用存量、流量表达式：</p><script type="math/tex; mode=display">MT(t) = Integral（Inflow(t) – Outflow(t), MT(0))</script><p>对于管道延迟，输出流如下，D为平均延迟时间：</p><script type="math/tex; mode=display">Outflow(t)＝ Inflow(t-D)</script><h2 id="6-3-信息延迟的结构与行为"><a href="#6-3-信息延迟的结构与行为" class="headerlink" title="6.3 信息延迟的结构与行为"></a>6.3 信息延迟的结构与行为</h2><h3 id="6-3-1-概述"><a href="#6-3-1-概述" class="headerlink" title="6.3.1 概述"></a>6.3.1 概述</h3><p>在信息反馈渠道中也存在许多延迟，即信息延迟。</p><p>如：对一个变量的度量感知（perception）存在延迟；更新判断（beliefs）和预测（forecast）需要时间。</p><p>由于没有实实在在的存量，所以信息延迟不能使用物料延迟那样的模型结构。</p><p>特点：非守恒，将影响延迟速率的信息加入到延迟过程中。</p><h3 id="6-3-2-为感知建模"><a href="#6-3-2-为感知建模" class="headerlink" title="6.3.2 为感知建模"></a>6.3.2 为感知建模</h3><p>最广泛最简单的信息延迟模型，是指数平滑（exponential smoothing），或自适应预期（adaptive expectation）。它是指一个判断向变量的实际值逐渐调整。如图为模型的反馈结构：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/43.png" alt></p><p>输入量的感知值Y是一个存量：</p><script type="math/tex; mode=display">Y(t) = Integral（感知值的变化速率, Y(0))</script><p>感知值的变化速率：与X，Y之间的差距成正比：</p><script type="math/tex; mode=display">感知值的变化速率(t)＝ (X- Y)/D</script><h2 id="6-4-估计延迟的长度及分布"><a href="#6-4-估计延迟的长度及分布" class="headerlink" title="6.4 估计延迟的长度及分布"></a>6.4 估计延迟的长度及分布</h2><h3 id="6-4-1-延迟的一般数学描述"><a href="#6-4-1-延迟的一般数学描述" class="headerlink" title="6.4.1 延迟的一般数学描述"></a>6.4.1 延迟的一般数学描述</h3><p>设有一个单位脉冲输入，在离散时间下，其时间t的延迟输出是到时间t为之的所有历史输入的加权平均：</p><script type="math/tex; mode=display">Output(t) = ω_0×Input(t)+ ω1×Input(t-1) +ω2×Input(t-2) + ... =  \sum_{i=0}^\infty Input(𝑡−𝑖))</script><p>其中，之后权重$ω_i$表示一个输入在经过i个时间单位后离开延迟的概率。所有$ω_i$的和必为1。这样保证了物质延迟系统的守恒。</p><script type="math/tex; mode=display">\sum_{i=0}^\infty ω_i=1</script><p>在连续时间下，延迟输出是历史输入的积分。积分的权重等于在t-s时刻离开延迟的概率p(s)：</p><script type="math/tex; mode=display">Output(t) =\int _0 ^ \infty 𝑝(𝑠)𝐼𝑛𝑝𝑢𝑡(𝑡−𝑠)𝑑𝑠) \\ \quad \int_{i=0}^ \infty (i=0)p(𝑠)𝑑𝑠=1</script><h3 id="6-4-2-一阶延迟的参数估计"><a href="#6-4-2-一阶延迟的参数估计" class="headerlink" title="6.4.2 一阶延迟的参数估计"></a>6.4.2 一阶延迟的参数估计</h3><p>一阶延迟假设物料存量是完美混合的，离开顺序完全随机化。</p><p>一阶延迟等价于一阶线性反馈系统，对脉冲输入的特征曲线是一个指数衰减，即物料延迟的概率由指数分布决定。</p><script type="math/tex; mode=display">p(t) = (1/D)exp(-t/D)</script><p>物料平均延迟时间 $Tr = (\int_0^ \infty 𝑡<em>𝑜𝑢𝑡𝑝𝑢𝑡(𝑡)𝑑𝑡)=  (\int_0^\infty 𝑡</em>𝑝(𝑡)𝑑𝑡) ̇= (∫_0^∞ exp⁡(−𝑡/𝐷) 𝑑𝑡 )= D$ </p><h3 id="6-4-3-物质延迟和信息延迟的关系"><a href="#6-4-3-物质延迟和信息延迟的关系" class="headerlink" title="6.4.3 物质延迟和信息延迟的关系"></a>6.4.3 物质延迟和信息延迟的关系</h3><p>设物质延迟和信息延迟的时间常数相等，则其输出是一样的。</p><script type="math/tex; mode=display">𝑑O/𝑑𝑡=(𝐼−𝑂)/𝐷</script><p>含义不同，</p><ul><li>物质延迟：输出是物料离开存量的速率；</li><li>信息延迟：输出就是存量。</li></ul><p>注意事项：</p><ul><li>针对经济学分析，往往采用离散时间估计；</li><li>在模型中，实际延迟时间不是常数，是个变量；</li><li>注意区分物质延迟和信息延迟的含义。</li></ul><h1 id="七-、系统结构与动态：路径依赖与正反馈"><a href="#七-、系统结构与动态：路径依赖与正反馈" class="headerlink" title="七 、系统结构与动态：路径依赖与正反馈"></a>七 、系统结构与动态：路径依赖与正反馈</h1><h2 id="7-1-概念"><a href="#7-1-概念" class="headerlink" title="7.1 概念"></a>7.1 概念</h2><p>路径依赖（path dependence）是一种系统演化模式，系统前期微小的、随机的事件往往能够决定系统运行的最终结果。</p><p>在存在路径依赖的系统中，系统平衡的最终结果取决于初始条件和随机扰动。</p><p>这和系统的结构特性有关：</p><ul><li>稳定系统：不取决于初始状态，具有负反馈。</li><li>不稳定系统：取决于初始状态，具有正反馈。</li></ul><p>路径依赖特点：</p><ul><li>一是蝴蝶效应：系统对初始条件的敏感特性；</li><li>二是锁定效应：系统失去平衡后恢复平衡的困难特性。</li></ul><h2 id="7-2-路径依赖的现实例子"><a href="#7-2-路径依赖的现实例子" class="headerlink" title="7.2 路径依赖的现实例子"></a>7.2 路径依赖的现实例子</h2><p>汽车行驶规则：左侧行驶，右侧行驶。瑞典从左行改右行易于成功，而日本则至今保持左侧行驶规则。系统条件不同，系统的锁定效应就不同，</p><p>计算机操作系统：大多数人使用Windows操作系统，应用软件也越来越多，人们转向其它才做系统就越困难。</p><p>社会：富者越富，穷者越穷效应。</p><p>体育比赛：马太效应。</p><p>网络经济效应：网站使用人数越多，越能生存，越有竞争力。</p><h1 id="八、系统结构与动态：老化链与协流"><a href="#八、系统结构与动态：老化链与协流" class="headerlink" title="八、系统结构与动态：老化链与协流"></a>八、系统结构与动态：老化链与协流</h1><h2 id="8-1-老化链定义"><a href="#8-1-老化链定义" class="headerlink" title="8.1 老化链定义"></a>8.1 老化链定义</h2><p>系统动态性取决于系统的存量流量结构。如延迟特性来源于输入输出之间的差异。很多情况下，系统的某些中间阶段也会存在输入流和输出流，这种存量流量结构称之为老化链（aging chains）。如图，两个存量流量结构上都有各自的输入流和输出流。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/44.png" alt></p><h2 id="8-2-老化链一般结构"><a href="#8-2-老化链一般结构" class="headerlink" title="8.2 老化链一般结构"></a>8.2 老化链一般结构</h2><p>一个老化链可以包含任意多个存量，这些存量成为群。每个群可以有任意多个输入或输出流。</p><p>设有n个群，第i个群的存量C(i)，输入流I(i)和输出流O(i)。群i的物品以转换率T(I,i+1)移动到i+1中，则有以下表达式：</p><script type="math/tex; mode=display">C(i) = INTERAL( I(i) + T(i-1,i) - O(i) - T(i,i+1), C(i)t_0 )</script><p>第一个群没有从上一个群到该群的转换率，最后一个群没有从该群到下一个群的转换率，即：T(0,1) =0 ， T(n,n+1) = 0<br>转换率可正可负。转换率通常用一个延迟表示：</p><p>YPC(i)为群i中的物品移动到下一个群之前，在群i的平均停留时间。一个有n个群的老化链的整体行为近似于一个n阶物质延迟。<br>流出率通常指死亡率：O(i) = C(i)×FDR(i) </p><script type="math/tex; mode=display">T(i,i+1) = C(i)/YPC(i)</script><p>YPC(i)为群i中的物品移动到下一个群之前，在群i的平均停留时间。一个有n个群的老化链的整体行为近似于一个n阶物质延迟。</p><p>流出率通常指死亡率：$O(i) = C(i)×FDR(i)$ </p><h2 id="8-3-老化链举例"><a href="#8-3-老化链举例" class="headerlink" title="8.3 老化链举例"></a>8.3 老化链举例</h2><ul><li>城市动态学中的商业、住房和人口老化链。</li><li>人口金字塔和人口结构过渡。</li><li>人口惯性老化链。</li><li>人口和经济增长</li><li>组织增长和年龄结构</li><li>晋升链和学习曲线 </li><li>员工培训</li></ul><h2 id="8-4-协流：为存量的属性建模"><a href="#8-4-协流：为存量的属性建模" class="headerlink" title="8.4 协流：为存量的属性建模"></a>8.4 协流：为存量的属性建模</h2><p>协流（coflow）结构用来记录一个系统的存量流量结构中流动的物品属性。例：员工的技能、生产率、经验水平、年龄等属性。</p><p>例：企业采购新设备——追加职工人数；设备不断自动化——所需工人数越来越少；试预测未来设备投资和职工人数减少带来的成本与效益关系。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-8/45.png" alt></p><h1 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h1><p>主要介绍了系统动力学的基本概念，建模初期、中期的知识细节，简单系统与行为模式，系统结构与动态的相关知识，如延迟、路径依赖、老化链等</p>]]></content>
      
      
      <categories>
          
          <category> 仿真模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统仿真笔记（七）连续系统仿真方法</title>
      <link href="/post/System-Simulation-7/"/>
      <url>/post/System-Simulation-7/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>之前内容请回顾：<a href="/post/System-Simulation-6/">系统仿真笔记（六）基于Agent的仿真建模</a></p><p>本节内容较少，主要介绍连续系统建模概述和方法，连续系统仿真方法。</p><h1 id="一、连续系统建模概"><a href="#一、连续系统建模概" class="headerlink" title="一、连续系统建模概"></a>一、连续系统建模概</h1><h2 id="1-1-连续系统的数学模型"><a href="#1-1-连续系统的数学模型" class="headerlink" title="1.1 连续系统的数学模型"></a>1.1 连续系统的数学模型</h2><p>连续系统是指系统的状态变量随时间连续变化的系统。一般用微分方程描述。</p><ul><li>对于集中参数系统，一般用一组微分方程描述。</li><li>对于分布参数系统，一般用一组偏微分方程描述。</li></ul><p>连续系统的数学模型有三类：</p><ul><li>微分方程模型</li><li>传递函数模型</li><li>状态空间模型</li></ul><h2 id="1-2-相关术语"><a href="#1-2-相关术语" class="headerlink" title="1.2 相关术语"></a>1.2 相关术语</h2><h4 id="状态变量（state-variable）"><a href="#状态变量（state-variable）" class="headerlink" title="状态变量（state variable）"></a>状态变量（state variable）</h4><p>足以完全表征系统状态的最小个数的一组变量。一般包括水平变量（level variable）、速率变量（rate variable）。一个用n阶微分方程描述的系统就有n个独立变量。</p><h4 id="状态向量（state-vector）"><a href="#状态向量（state-vector）" class="headerlink" title="状态向量（state vector）"></a>状态向量（state vector）</h4><p>用  $x^T(t)=[x_1(t), …, x_n(t)]$ 表示状态向量/状态矢量，状态变量$x_i(t)$是矢量$x^T(t)$的分量。</p><h4 id="状态空间（state-space）"><a href="#状态空间（state-space）" class="headerlink" title="状态空间（state space）"></a>状态空间（state space）</h4><p>由系统状态变量$x_1(t), …, x_n(t)$为坐标轴所构成的n维空间，称为状态空间。在某一时刻t，状态向量  $x^T(t)$在状态空间中是一点。随时间的推移， $x^T(t)$在状态空间中描绘出一条曲线，称为轨迹曲线。</p><h4 id="状态方程（state-equation）"><a href="#状态方程（state-equation）" class="headerlink" title="状态方程（state equation）"></a>状态方程（state equation）</h4><p>由系统状态变量构成的一阶微分方程组。是描述连续系统的学数学模型。如果系统的输入量u(t)，输出量y(t)，系统内部状态变量x(t)都是时间的连续函数，则可用连续时间模型。<br>否则，用离散模型表示上述离散时间序列。</p><h4 id="模拟时间-模拟时钟（simulation-clock）"><a href="#模拟时间-模拟时钟（simulation-clock）" class="headerlink" title="模拟时间/模拟时钟（simulation clock）"></a>模拟时间/模拟时钟（simulation clock）</h4><p>与离散事件系统的概念相同。对于连续系统仿真，一般采用固定步长时间推进机制。</p><h2 id="1-3-连续系统模型分类"><a href="#1-3-连续系统模型分类" class="headerlink" title="1.3 连续系统模型分类"></a>1.3 连续系统模型分类</h2><div class="table-container"><table><thead><tr><th>模型分类</th><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>微分方程模型</td><td>设定系统的输入、输出参数。  微分方程模型  偏微分方程模型  差分方程模型</td><td>求出输入参数和输出参数之间的关系。往往是一个高阶微分方程。  面向集中参数系统。  面向分布参数系统。  面向连续时间离散化的系统。</td></tr><tr><td>传递函数模型</td><td>用传递函数表示上述方程</td><td>简便，但对于动态系统不适合。</td></tr><tr><td>状态空间模型</td><td>由系统的状态变量表示的一组微分方程组。</td><td>求出由系统状态变量表示的一组微分方程组。</td></tr></tbody></table></div><h1 id="二、连续系统建模方法"><a href="#二、连续系统建模方法" class="headerlink" title="二、连续系统建模方法"></a>二、连续系统建模方法</h1><h2 id="2-1-基于机理建模方法"><a href="#2-1-基于机理建模方法" class="headerlink" title="2.1 基于机理建模方法"></a>2.1 基于机理建模方法</h2><p>建立系统数学模型的主要方法有两种：</p><p>（<strong>1）机理建模法：</strong></p><p>跟据物理定律，列出系统个变量之间的关系的动力学方程，然后得到所需要的微分方程。通常有高阶微分方程、一阶微分方程组、状态方程、传递函数等。</p><p><strong>（2）系统辨识建模法：</strong></p><p>对系统施加一定的实验信号，跟据输入、输出数据进行分析，得到较好描述输入-输出关系的数学模型。</p><p>本课程学习基于机理建模的微分方程建模法，下面举例说明。</p><h2 id="2-2-微分方程建模例子"><a href="#2-2-微分方程建模例子" class="headerlink" title="2.2 微分方程建模例子"></a>2.2 微分方程建模例子</h2><p><strong>例7.1</strong>：如图的RLC电路系统，其中：系统的输入量$u(t)$，输出量$u_c(t)$，试建立该系统的微分方程模型。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/9.png" alt></p><p>解：</p><p>根据电路基本定律，列出如下的微分方程</p><script type="math/tex; mode=display">u(t) = Ldi(t)/dt + Ri(t) + u_c(t) \\ i(t) = Cduc (t)/dt</script><p>整理上述方程，用两种方式：高阶微分方程、一阶微分方程组。</p><p><strong>（1）高阶微分方程：</strong></p><p>​     将所有原始微分方程合并为一个总微分方程。在该微分方程中只包括输入量、输出项、导数项。<br>   消去中间变量$Ri(t)$，得到：</p><script type="math/tex; mode=display">LCd^2uc (t)/dt^2 + RCdu_c (t)/dt + u_c(t) = u(t)</script><p>该微分方程的最高阶导数为2，于是该微分方程为2阶微分方程，进而该系统为2阶系统。</p><p>​     系统的阶次  = 微分方程的阶次。</p><p><strong>（2）一阶微分方程组：</strong></p><p>​     一阶微分方程组中的每一个方程只包含一个未知量，其最高阶导数为1，方程个数 = 未知变量个数。</p><p>​     这些未知变量称为状态变量，他们是系统中的独立变量。这些状态变量完全确定了系统的状态，其个数等于系统的阶次。</p><p>​     选$i(t)$、 $u(t)$为状态变量，可求得如下的微分方程组：</p><script type="math/tex; mode=display">\frac{di(t)}{dt}=-\frac{R}{L} \frac{du_c(t)}{dt}-\frac{1}{L}u_c(t)+\frac{1}{L}u(t) \\ \\ \frac{du_c(t)}{dt}=\frac{1}{c}i(t)</script><p>高阶微分方程:已知输入$u(t)$、初始条件$u_c (0)$、 $du_c (0)/dt$ ，即可得出输出 $u_c(t)$ 。便于手工解析。</p><p>一阶微分方程组：已知输入$u(t)$、初始条件$u_c (0)$和$i(0)$ ，即可得出输出$i(t)$ 、 $u_c(t)$ 。便于计算机数值求解。</p><p><strong>（3）传递函数表示法</strong></p><p>微分方程模型的求解往往比较困难，也不便于系统的分析与设计。如不需要准确解，可采用传递函数表示方法。</p><p>传递函数的主要性质：</p><ul><li>适用于线性、定常、集总参数系统；</li><li>只与系统的结构有关，与系统的变量无关。可用来分析系统的稳定性。</li><li>系统的传递函数等于系统单位脉冲相应的拉普拉斯函数。</li><li>可由系统的高阶微分方程转换到传递函数形式。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/10.png" alt></p><h2 id="2-3-状态方程建模"><a href="#2-3-状态方程建模" class="headerlink" title="2.3 状态方程建模"></a>2.3 状态方程建模</h2><p><strong>（1）状态方程</strong></p><p>状态方程实际上就是前述的一阶微分方程组，只不过表示成矩阵和向量的形式，因而更加简洁。<br>前述一阶微分方程组为：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/11.png" alt></p><p>则上式可以写成如下矩阵形式：</p><script type="math/tex; mode=display">\frac{dx(t)}{dt} =Ax(t) + Bu(t)</script><p>其中，x称为状态向量，其中的元素称为状态变量。一般输出用$y$表示，则$y (t) =u_c (t)$, 则输出可表示为：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/12.png" alt></p><p>于是，本系统的状态方程为：</p><script type="math/tex; mode=display">\dot{x}(t)=Ax(t)+Bu(t) \\ y(t)=Cx(t)</script><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/13.png" alt></p><p>一般系统情况下，系统的状态方程模型可表示为：</p><script type="math/tex; mode=display">\dot{x}(t)=Ax(t)+Bu(t) \\ y(t)=Cx(t)+Du(t)</script><p>其中，</p><ul><li><p>$x(t)=[x1(t),…,xn(t)]^T$，是n维状态向量,</p></li><li><p>$u(t)=[u1(t),…,um(t)]^T$，是m维输入向量,</p></li><li><p>$y(t)=[y1(t),…,yr(t)]^T$，是r维输出向量,</p></li><li><p>$A(n×n)$,$B (n×m)$,$C (r×n)$,$D (r×m)$是系数矩阵。</p></li></ul><p>当单输入/单输出时，$m=r=1$，u和y均为标量。</p><p><strong>（2）几点说明</strong></p><p>状态方程模型的表示方式比较标准，因此常常简记为：</p><p>$Σ(A,B,C,D)$。若D=0，则简记为： $Σ(A,B,C)$。</p><p>状态方程模型的表示方式比较简洁，适于用计算机求解。</p><p>状态方程模型本质上就是一阶微分方程组，属于时域的模型表示。</p><h1 id="三、连续系统仿真方法"><a href="#三、连续系统仿真方法" class="headerlink" title="三、连续系统仿真方法"></a>三、连续系统仿真方法</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>一般连续系统模型用微分方程形式给出，因此，连续系统仿真算法可归结为用计算机求解微分方程问题。</p><p>数值积分法：就是对常微分方程建立起离散形式的数学模型—差分方程，然后求出其数值解。</p><p>基本步骤：</p><ol><li>求得系统的高阶微分方程模型；</li><li>将其转换为一阶微分方程组或状态方程形式；</li><li>利用数值积分求解。</li></ol><h2 id="3-2-数值积分法"><a href="#3-2-数值积分法" class="headerlink" title="3.2 数值积分法"></a>3.2 数值积分法</h2><p>设：已知某系统的一阶向量微分方程及其初值为：</p><script type="math/tex; mode=display">\dot{y}=f(𝑡,𝑦) \\𝒚(𝑡_0)=𝑦_0</script><p>其中，y为n维状态向量，f(t,y)为n维向量。</p><p>数值积分法是解决在已知初值的情况下，对f(t,y)进行近似积分，对y(t)进行数值求解的方法。</p><p>设上述方程在$t = t_0, t_1, … , t_n, …$处的形式上的连续解为</p><script type="math/tex; mode=display">y(t_{n+1}) =y(t_0)+\int_{t_0}^{t_{n+1}}f(t,y)dt=y(t_n)+\int_{t_n}^{t_{n+1}}f(t,y)dt</script><p>令：</p><script type="math/tex; mode=display">Q_n=\int_{t_n}^{t_{n+1}}f(t,y)dt</script><p>希望能够找到一个近似公式来近似连续解：</p><script type="math/tex; mode=display">𝒚_{𝒏+𝟏})≈𝒚_𝒏+𝑸_𝒏</script><p>其中，$y_n$为准确解$y(t_n)$的近似解，$Q_n$是准确积分的近似值。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/14.png" alt></p><p><strong>数值积分法的分类：</strong></p><p>数值积分解法分类：单步法、多步法、预估-校正法。</p><ul><li>单步法：只由前一时刻的数值<script type="math/tex">y_n</script>来求得后一时刻的数值<script type="math/tex">y_{n+1}</script>。</li><li>多步法：计算$y_{n+1}$需要用到以前的多个时刻的y值。</li><li>预估-校正法。</li></ul><p>计算公式包括：显式公式、隐式公式。</p><ul><li>显式公式：计算$y_n$的公式中所用数值均已算出。</li><li>隐式公式：在计算<script type="math/tex">y_n</script>的公式中含有未知量<script type="math/tex">y_{n+1}</script>的递推公式。</li></ul><p>误差和精度：截断误差、舍入误差。</p><p>隐式公式具有更高的精度和稳定性。</p><p><strong>主要数值积方法:</strong></p><div class="table-container"><table><thead><tr><th>大类</th><th>方法说明</th><th>计算公式</th></tr></thead><tbody><tr><td>欧拉法</td><td>矩形法。简单、精度低，但反映一般原理。</td><td>显式公式。</td></tr><tr><td>梯形法</td><td>用梯形代替矩形计算。</td><td>隐式公式。常综合采用预估-校正法。</td></tr><tr><td>龙格-库塔法</td><td>间接利用泰勒展开计算。</td><td>显式、隐式、半隐式公式。</td></tr><tr><td>线性多步法</td><td>利用前面多步的信息进行计算。</td><td>显式、隐式。常综合采用预估-校正法。</td></tr><tr><td>变步长法</td><td>计算过程中不断改变步长。</td><td>显式、隐式、半隐式公式。</td></tr></tbody></table></div><h2 id="3-3-欧拉法"><a href="#3-3-欧拉法" class="headerlink" title="3.3 欧拉法"></a>3.3 欧拉法</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/15.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/16.png" alt></p><h2 id="3-4-梯形法"><a href="#3-4-梯形法" class="headerlink" title="3.4 梯形法"></a>3.4 梯形法</h2><p>基于欧拉公式的思想，用梯形面积替代矩形面积：</p><script type="math/tex; mode=display">y_{n+1}=y_n+\frac{h}{2}[f(t_n,y_n)+f(t_{n+1},y_{n+1})]</script><p>显然，该计算公式为隐式。为求<script type="math/tex">𝑓(𝑡_{𝑛+1},𝑦_{𝑛+1} )</script>，可用欧拉公式求出<script type="math/tex">y(t_{n+1})</script>的近似值然后<script type="math/tex">y_{n+1}^p</script>带回微分方程。</p><p>于是，改进的欧拉公式如下：</p><script type="math/tex; mode=display">y_{n+1}^p=y_n+hf(t_n,y_n) \\ y_{n+1}=y_n+\frac{h}{2}[f(t_n,y_n)+f^p(t_{n+1},y_{n+1}^p)]</script><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/17.png" alt></p><h2 id="3-5-龙格-库塔法"><a href="#3-5-龙格-库塔法" class="headerlink" title="3.5 龙格-库塔法"></a>3.5 龙格-库塔法</h2><p>（1）基本思想</p><p>德国数学家Runge和Kutta先后提出间接利用泰勒展开式的方法，即用几个点上函数$y(t)$的一阶导数值得线性组合来近似代替$y(t)$在某点的各阶导数，然后用泰勒展开式确定线性组合中的各加权系数。以上方法就是龙格-库塔法（RK法）的基本思想。</p><p>RK法的计算式有显式、隐式和半隐式。</p><p>（2）显式RK法</p><p>考虑一阶微分方程及其初值问题：</p><script type="math/tex; mode=display">\dot{y}=𝑓(𝑡,𝑦)\\𝒚(𝑡_0)=𝑦_0</script><p>将$y(t)$展开称泰勒级数</p><script type="math/tex; mode=display">y(t+h)=y(t)+hy(t)+\frac{h^2}{2!} \ddot{y}(t)+ ···</script><p>​     <img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/18.png" alt="18"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/19.png" alt="19"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-7/20.png" alt="20"></p>]]></content>
      
      
      <categories>
          
          <category> 仿真模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统仿真笔记（六）基于Agent的仿真建模</title>
      <link href="/post/System-Simulation-6/"/>
      <url>/post/System-Simulation-6/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>之前内容请回顾：<a href="/post/System-Simulation-5/">系统仿真笔记（五）离散事件系统仿真原理</a></p><p>本节笔记主要介绍复杂系统仿真的基本概念、微观仿真技术、Agent的基本概念、多Agent仿真的基本概念、多Agent仿真建模的方法和元胞自动机模型，同时也简要介绍了基于Agent的仿真软件。</p><h1 id="一、复杂系统仿真的基本概念"><a href="#一、复杂系统仿真的基本概念" class="headerlink" title="一、复杂系统仿真的基本概念"></a>一、复杂系统仿真的基本概念</h1><h2 id="1-1复杂系统的定义和特征"><a href="#1-1复杂系统的定义和特征" class="headerlink" title="1.1复杂系统的定义和特征"></a>1.1复杂系统的定义和特征</h2><h3 id="1-1-1-复杂系统的定义"><a href="#1-1-1-复杂系统的定义" class="headerlink" title="1.1.1 复杂系统的定义"></a>1.1.1 复杂系统的定义</h3><p>首先来看几个复杂系统：</p><ul><li>生物系统：神经网络及思维过程、动物种群的消长过程、生命起源、DNA的形成、物种的进化、免疫系统、鸟群的运动等等。</li><li>经济系统：全球经济系统、国家经济系统、金融股市系统。</li><li>环境生态系统：沙暴的形成、飓风的形成、黄河断流、土地沙化、水土流失、厄尔尼诺现象等。</li><li>社会系统：不同层次的管理系统也是一个演化的复杂系统。</li><li>工程系统：因特网、大型工程（三峡工程）、两弹一星。</li><li>自然系统：大如宇宙、小如原子结构。 </li></ul><p>以上的例子都强调“过程”二字，是因为复杂系统是一个演化的动态过程。</p><p>复杂系统是这样定义的：复杂系统是具有众多数目、可基于局部信息做出行动的智能性、自适应性主体的系统。</p><h3 id="1-1-2-复杂系统的特征"><a href="#1-1-2-复杂系统的特征" class="headerlink" title="1.1.2 复杂系统的特征"></a>1.1.2 复杂系统的特征</h3><p>复杂系统具有以下特征：</p><ul><li>由大量的作用者（agent）（单元）组成。 </li><li>系统是开放的，受外界影响 。</li><li>作用者相互作用 。</li><li>相互作用开始，将有微小变化。但系统能自组织，自加强，自协调，并随之扩大、发展，发生质变。这种质变，在复杂系统中称为涌现（或“突现”）（emergence）</li><li>不同的微小变化，可导致重大差异的结局 。</li></ul><h3 id="1-1-3-涌现的定义"><a href="#1-1-3-涌现的定义" class="headerlink" title="1.1.3 涌现的定义"></a>1.1.3 涌现的定义</h3><p>涌现（emergence）涌现是复杂适应系统（Complex Adaptive Systems，简称CAS）的一个重要特征。 不同的复杂系统研究领域有不同的认识。通常，人们将它用来指称这样的微-宏观效应现象——“因局部组分之间的交互而产生系统全局行为”或“缘起于微观的宏观效应” 。</p><p>上述对涌现概念的描述是比较模糊的。但是，由于研究的开放性，试图给出一个精确而普适的定义不是很现实。 </p><h3 id="1-1-4-涌现的判据"><a href="#1-1-4-涌现的判据" class="headerlink" title="1.1.4 涌现的判据"></a>1.1.4 涌现的判据</h3><p>穆勒给出了涌现的三个判据：</p><ol><li>一个整体的涌现特征不是其部分的特征之和；</li><li>系统涌现特征的种类与系统组分特征的种类完全不同；</li><li>涌现特征不能从独立考察组分的行为中推导或预测出来。</li></ol><p>这三个判据也称之为<strong>可加性判据</strong>、<strong>新奇性判据</strong>和<strong>可演绎性判据</strong>。这三个判据都是从特征的微-宏观联系来展开的。</p><p>可演绎性判据往往被解释成涌现特征的不可解释性或神秘性，这对于复杂系统研究者来说，是不可接受的。他们的重要目标之一就是要建立起涌现特征与微观机制的联系，认识并控制涌现特征。 </p><h3 id="1-1-5-CAS的定义"><a href="#1-1-5-CAS的定义" class="headerlink" title="1.1.5 CAS的定义"></a>1.1.5 CAS的定义</h3><p><strong>定义</strong> </p><p>复杂适应系统（Complex Adaptive Systems，简称CAS），也称复杂性科学（Complexity Science），是20世纪末叶兴起的前沿科学阵地。对复杂适应系统的定义也是“复杂”的，至今尚无统一的公认定义。</p><p><strong>CAS理论的基本思想</strong>： </p><p>系统中的成员称为具有适应性的主体(Adaptive Agent)，简称为主体。所谓具有适应性，就是指它能够与环境以及其它主体进行交互作用。主体在这种持续不断的交互作用的过程中，不断地“学习”或“积累经验”，并且根据学到的经验改变自身的结构和行为方式。整个宏观系统的演变或进化，包括新层次的产生，分化和多样性的出现，新的、聚合而成的、更大的主体的出现等等，都是在这个基础上逐步派生出来的。</p><p><strong>CAS系统的主要特征</strong>：</p><ul><li>适应性主体 </li><li>共同演化</li><li>趋向混沌的边缘 （平衡点）</li><li>涌现现象 </li></ul><h3 id="1-1-6-CAS模型的七个基本特征"><a href="#1-1-6-CAS模型的七个基本特征" class="headerlink" title="1.1.6 CAS模型的七个基本特征"></a>1.1.6 CAS模型的七个基本特征</h3><p>霍兰提出了在复杂适应系统模型中应具备的七个基本特性：</p><ol><li>聚集： 较小的、较低层次的个体通过某种特定的方式结合起来, 形成较大的、较高层次的个体。</li><li>非线性：主体以及它们的属性在发生变化时, 并非遵从简单的线性关系。归之于个体的主动性和适应能力。</li><li>流：有着众多节点与连接者的某个网络上的某种资源的流动。 </li><li>多样性：复杂适应系统的多样性是一种动态模式。 </li><li>标志：聚集和边界生成过程中存在的机制，能够促进选择性相互作用。 </li><li>内部模型： 当适应性主体接收到大量涌入的输入时, 就会选择相应的模式去响应这些输入, 而这些模式最终会凝固成具有某项功能的结构———内部模型。 </li><li>积木：复杂系统常常是在一些相对简单的部件的基础上, 通过改变它们的组合方式而形成的。</li></ol><blockquote><p>前四个是CAS的通用特性, 在适应和进化中发挥作用；后三个是个体与环境进行交流时的机制和有关概念。 </p></blockquote><h3 id="1-1-7-复杂系统的研究状况"><a href="#1-1-7-复杂系统的研究状况" class="headerlink" title="1.1.7 复杂系统的研究状况"></a>1.1.7 复杂系统的研究状况</h3><p><strong>中国</strong> </p><ul><li>80年代，钱学森教授组织领导了复杂系统的研讨班，提出了“开放的复杂巨系统”的概念；</li><li>1992年，钱学森教授提出了“从定性到定量的综合集成研讨厅体系”的设想。</li></ul><p><strong>外国</strong></p><ul><li>80年代，美国有几位在物理学和经济学领域的诺贝尔奖获得者，盖尔曼（Marray Gell-Mann）、安德森（Philip Anderson）、阿诺（Kenneth Arrow）等认识到复杂系统的重要意义，并聚集了一批物理、经济、生物、计算机等方面的研究人员，成立了著名的圣塔费研究所（Santa Fe Institute，简称SFI），并将研究复杂系统的这一学科称为复杂性科学（Complexity Science）。</li></ul><p>复杂性科学是二十一世纪的科学，是一门具有重大理论及实际意义并亟待开展研究的崭新科学。</p><h3 id="1-1-8-复杂系统的研究方法"><a href="#1-1-8-复杂系统的研究方法" class="headerlink" title="1.1.8 复杂系统的研究方法"></a>1.1.8 复杂系统的研究方法</h3><p><strong>自下而上的“涌现”方法</strong></p><p>自下而上的“涌现”方法是利用计算机仿真的方法通过模拟复杂系统中个体的行为，让一群这样的个体在计算机所营造的虚拟环境下进行相互作用并演化，从而让整体系统的复杂性行为自下而上的“涌现”出来。这就是圣塔菲（Santa Fe）研究所研究复杂系统的主要方法。</p><p><strong>自上而下的“控制”方法</strong></p><p>另一方面，人脑面对复杂系统可以通过有限的理性和一些不确定信息做出合理的决策，得到满意的结果，因此，研究人脑面对复杂系统是如何解决问题的则采用另一种“自上而下”的解决问题的方法，称为“控制”方法。 </p><p>目前，大部分研究采用“涌现”方法。虽然“控制”方法在人工智能学科诞生的时候已经开始使用了，但用于复杂系统的研究还很少。 </p><h1 id="二、微观仿真技术"><a href="#二、微观仿真技术" class="headerlink" title="二、微观仿真技术"></a>二、微观仿真技术</h1><h2 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h2><p>20世纪60年代开始，仿真技术开始应用于各类社会经济复杂系统的分析，它们都是“自上而下”的建模方法。其基本思想是：选取构成系统的有代表性的多个微观个体作为研究对象，模拟这些微观个体的行为和他们之间的交互。微观个体的行为改变其属性值，而系统的宏观层次的属性值是由这些微观个体的属性值的加总（Aggregate）得出的。</p><p>这种方法的仿真成为“微观仿真”（Micro-simulation or Microscopic simulation）</p><h2 id="2-2-微观仿真技术方法"><a href="#2-2-微观仿真技术方法" class="headerlink" title="2.2 微观仿真技术方法"></a>2.2 微观仿真技术方法</h2><p><strong>1）微观分析模拟（Micro-analytical simulation）</strong></p><p>1957年提出，用微观角度研究大的社会经济行为。建立在一个较大的随机样本之上，事件决定每一年样本的变化。从而预测总体的发展趋势。</p><p><strong>2）元胞自动机（Cellualar Automata, CA）</strong></p><p>是一种空间离散、时间离散、状态离散的模型。模型由大量简单的、具有局部相互作用的基本构件（元胞）构成。在每一个仿真时刻，元胞根据目前的状态决定下一个时刻的状态，逐次推进，产生整个系统的演化过程。</p><p><strong>3）多主体仿真（Multi-agent simulation）</strong></p><p>20世纪90年代提出。研究对象为多个具有一定自治性、智能性、适应性的微观个体通过相互作用形成的复杂系统。</p><h2 id="2-3-三种微观仿真方法的比较"><a href="#2-3-三种微观仿真方法的比较" class="headerlink" title="2.3 三种微观仿真方法的比较"></a>2.3 三种微观仿真方法的比较</h2><div class="table-container"><table><thead><tr><th>比较项目</th><th>微观分析仿真</th><th>元胞自动机</th><th>多主体仿真</th></tr></thead><tbody><tr><td>描述微观个体</td><td>√</td><td>√</td><td>√</td></tr><tr><td>得到宏观特性</td><td>√</td><td>√</td><td>√</td></tr><tr><td>离散性</td><td>√</td><td>√</td><td>√</td></tr><tr><td>随机性</td><td>√</td><td>√</td><td>√</td></tr><tr><td>个体间交互</td><td>×</td><td>√（简单）</td><td>√（多样）</td></tr><tr><td>自治性</td><td>×</td><td>×</td><td>√</td></tr><tr><td>智能性</td><td>×</td><td>×</td><td>√</td></tr><tr><td>驱动</td><td>数据</td><td>规则（规则网格）</td><td>规则</td></tr><tr><td>应用</td><td>经济社会预测</td><td>如何涌现</td><td>如何涌现</td></tr></tbody></table></div><h2 id="2-4-微观仿真方法的适用性"><a href="#2-4-微观仿真方法的适用性" class="headerlink" title="2.4 微观仿真方法的适用性"></a>2.4 微观仿真方法的适用性</h2><p>复杂系统的研究分为宏观方法和微观方法。</p><p>由于社会系统的复杂性，研究个体行为引发整体效果时，微观方法比较有效。注意：微观方法的应用特点是针对那些没有集中控制（交互、自治）的社会过程。</p><p>微观方法研究的四个假设：</p><ol><li>微观个体之间进行自主交互，无全局控制者</li><li>微观个体之间相互依赖、相互影响</li><li>微观个体的规则比较简单</li><li>微观个体具有适应性、能通过经验学习</li></ol><h2 id="2-5-微观仿真方法的局限性"><a href="#2-5-微观仿真方法的局限性" class="headerlink" title="2.5 微观仿真方法的局限性"></a>2.5 微观仿真方法的局限性</h2><ol><li><p>没有形成一套规范的研究方法论</p><ul><li><p>具体问题具体分析，具体建模，无统一过程；</p></li><li><p>统一问题有时建模结果不同，结论甚至相反；</p></li><li>无统一的模型验证方法。</li></ul></li><li><p>微观因素—宏观模式之间的复杂联系难以得到高度可信的关系，加之随机因素的存在，仿真实验及仿真结果的分析较为复杂和困难。</p></li><li><p>模型的有效性验证困难。</p></li></ol><h1 id="三、Agent的概念"><a href="#三、Agent的概念" class="headerlink" title="三、Agent的概念"></a>三、Agent的概念</h1><h2 id="3-1-Agent的概念"><a href="#3-1-Agent的概念" class="headerlink" title="3.1 Agent的概念"></a>3.1 Agent的概念</h2><p>Agent的名称有多种版本，常见的有 “主体”，“智能体”和“代理”等。 Agent准确定义尚不明确，一般认为，Agent是一种具有自组织性、反应机制和同步执行能力的系统模型。</p><p>Agent系统的特征：</p><ul><li>自治性（autonomy）:主体自己控制自己的运行；</li><li>社会能力（social ability）：主体间交互；</li><li>反应能力（reactivity）：对环境感知和影响；</li><li>预动性（pro-activeness）：主动、有目标性地对环境反应。</li></ul><p>随着计算机网络及分布式计算的普及，通过对个体行为准则进行建模，创建仿真环境的方法逐渐受到重视。这种建模方式被称作Agent Based Simulation。</p><h2 id="3-2-Agent的构成"><a href="#3-2-Agent的构成" class="headerlink" title="3.2 Agent的构成"></a>3.2 Agent的构成</h2><ol><li><p>单个Agent的基本结构主要包括以下几个部分：</p></li><li><p>角色列表：是该Agent在整个系统中所扮演角色（功能）的列表。</p></li><li><p>知识处理模块：包括知识库、任务存储器和推理机制。</p><ul><li><p>知识库是Agent的知识管理系统，主要存储Agent自身能力及其所处环境的知识并对其进行动态维护；</p></li><li><p>任务存储器存放Agent求解过程中需要和产生的一些动态信息；</p></li><li>推理机制根据获得的外部信息和具备的领域知识对问题进行求解。</li></ul></li><li><p>自学习/自适应：是对Agent的行为进行优化。</p></li><li><p>协调与决策模块：是对各模块的工作进行协调，并作出判断，并将结果由通讯管理告知其他Agent。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-6/1.png" alt></p><h2 id="3-3-Agent结构类型"><a href="#3-3-Agent结构类型" class="headerlink" title="3.3 Agent结构类型"></a>3.3 Agent结构类型</h2><p>有三种agent类型</p><p>(a) deliberative agent(认知型/慎思型)</p><ul><li>belief-desire-intention (BDI) agent</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-6/2.png" alt></p><p>(b) reactive agent (反应型)</p><ul><li>only needs to react to outer impulses   </li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-6/3.png" alt></p><p>(c) hybrid agent(混合型)</p><ul><li>combine the advantages of deliberative agents and reactive agents, more agile and faster responsible . </li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-6/4.png" alt></p><h2 id="3-4-Agent的定义分类"><a href="#3-4-Agent的定义分类" class="headerlink" title="3.4 Agent的定义分类"></a>3.4 Agent的定义分类</h2><p><strong>Weak Notion of Agency</strong></p><ul><li>Autonomy</li><li>Social ability: agents interact with other agents</li><li>Reactivity: agents perceive their</li><li>Pro-activeness: agents exhibit goal-directed behavior by taking the initiative.</li></ul><p><strong>Stronger</strong> <strong>notion of agency</strong></p><ul><li>Mobility: ability to move around a network</li><li>Veracity: not knowingly communicate false information</li><li>Benevolence: agents do not have conflicting goals</li><li>Rationality: an agent will act in order to achieve its goals</li></ul><div class="table-container"><table><thead><tr><th></th><th>Weak  notion</th><th>Stronger  notion</th></tr></thead><tbody><tr><td>Autonomy</td><td>√</td><td>√</td></tr><tr><td>Social  ability</td><td>√</td><td>√</td></tr><tr><td>Reactivity</td><td>√</td><td>√</td></tr><tr><td>Pro-activeness</td><td>√</td><td>√</td></tr><tr><td>Mobility</td><td></td><td>√</td></tr><tr><td>Veracity</td><td></td><td>√</td></tr><tr><td>Benevolence</td><td></td><td>√</td></tr><tr><td>Rationality</td><td></td><td>√</td></tr></tbody></table></div><h1 id="四、基于Agent的仿真建模"><a href="#四、基于Agent的仿真建模" class="headerlink" title="四、基于Agent的仿真建模"></a>四、基于Agent的仿真建模</h1><p>在基于Agent的仿真中，每个个体都按照一定规则运转，而整体却呈现出有序模式，反映出演化规律。其特点是：</p><ul><li>确定性与随机性相结合</li><li>动态仿真</li><li>宏观与微观 </li></ul><p>基于多Agent仿真建模相对于一般数学建模而言，在解决离散、非线性系统模拟方面有显著优势，是研究此类复杂系统产生的全局、自适应行为的一个基本方法。其应用领域包括：生命科学、环境科学、信息科学、社会学、经济学、地理、生物、数理、管理等。</p><h2 id="4-1-基于Agent的建模方法"><a href="#4-1-基于Agent的建模方法" class="headerlink" title="4.1 基于Agent的建模方法"></a>4.1 基于Agent的建模方法</h2><p>Agent的概念20世纪70年代源于人工智能。目前已应用到许多领域。但目前尚无一个一般意义上的Agengt定义。</p><p>Agent的特点：任务性、自主性、反应性、主动性、社会性。</p><p>多Agent系统（multi-agent system，MAS）目前已应用与仿真领域来分析非线性、复杂的系统。</p><h2 id="4-2-基于Agent的仿真的核心思想"><a href="#4-2-基于Agent的仿真的核心思想" class="headerlink" title="4.2 基于Agent的仿真的核心思想"></a>4.2 基于Agent的仿真的核心思想</h2><p>基于多Agent系统建模的核心思想可概括为以下几点：</p><p>对系统进行Agent抽象。根据组成实际系统的物理系统和系统目标的要求，将系统的相应实体（或特定功能）抽象为Agent。这里，Agent是一个自治的计算实体（即软件Agent），它能真实或合理地反映相应实体的自治特性（有、没有或自治程度等）以及相应的行为和状态。</p><p>Agent之间的交互。组成系统的Agent为实现自己的和系统的特定功能，它们之间需要交换信息和提供服务，所以必须要进行交互，协同运作（Agent之间可能有冲突，必须相互协调）。系统的Agent可能只需要局部的信息就可以完成相应的使命，它们在地理上允许是分布的。</p><p>Agent的智能。根据研究需要和技术的可行性，使Agent具有合适的智能特性。</p><p>下图是一个供应链MAS仿真的例子</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-6/5.png" alt></p><h1 id="五、基于Agent的仿真软件"><a href="#五、基于Agent的仿真软件" class="headerlink" title="五、基于Agent的仿真软件"></a>五、基于Agent的仿真软件</h1><h2 id="5-1-Agent仿真软件介绍"><a href="#5-1-Agent仿真软件介绍" class="headerlink" title="5.1 Agent仿真软件介绍"></a>5.1 Agent仿真软件介绍</h2><p>目前支持Agent Based Simulation的软件平台有Swarm，Repast，NetLog和TNG Lab等。大多数的平台支持对模型的可视化观察，可以通过调整参数进行比较研究。</p><div class="table-container"><table><thead><tr><th>软件</th><th>介绍</th><th>时间</th></tr></thead><tbody><tr><td>NetLog</td><td>NetLogo是美国西北大学网络学习和计算机建模中心推出的可编程建模环境。该系统采用Java语言编写，能够在多种主流平台上运行。它同时提供单机和网络环境两种版本，每个模型还可以保存为Java  applets，可嵌入到网页上运行。</td><td>2004.08 2.0.2 ver.  2004.09 2.1.2b ver.</td></tr><tr><td>StarLog</td><td>StarLogo是在美国自然科学基金会和乐高集团(LEGO  Group)赞助下，由麻省理工学院  多媒体实验室开发的基于主体的可编程建模环境。</td><td>2000.02 Java ver.  2004.06 2.1 ver。</td></tr><tr><td>Swarm</td><td>Swarm是一个多主体复杂系统仿真软件工具集，最初是由桑塔费研究所于1994年用一种被称为GNU  Objective-C的扩展C语言开发的.</td><td>Unix/Linux  ver.  1998 95/98/NTver.   1999 Java ver.  2004 XP 2.1.1 ver.</td></tr><tr><td>Repast</td><td>Repast(Recursive  Porus  Agent Simulation)是用Java开发的基于主体的模拟框架。Repast  从Swarm中借鉴了很多设计理念，形成一个“类Swarm”的模拟软件架构。Repast由芝加哥大学社会科学计算实验室开发研制，后来俄勒岗国家实  验室维护了一段时间，现在由来自政府、教育界和行业组织组成的非赢利机构管理.</td><td>2004.11 3.0 ver.</td></tr><tr><td>TNG Lab</td><td>TNG  Lab 代表Trade  Network Game Laboratory(商业网络博弈实验室)，它是美国爱荷  华州立大学的McFadzean、Stewart和Tesfatsion用C++开发的软件包。</td><td>暂无版本更新</td></tr><tr><td>JES</td><td>JES是意大利都灵大学Pietro  Terna用Java开发的企业仿真项目，JES就是由Java  Enterprise Simulator(Java企业仿真器)三个字的首字母组成的。</td><td>暂无版本更新</td></tr><tr><td>Ascape</td><td>Ascape代表Agent  Landscape的意思，它是美国布鲁金斯研究所的Miles  T. Parker开  发的基于主体建模平台。</td><td>2000.10 1.9.1 ver.</td></tr><tr><td>MASON</td><td>MASON代表多主体邻里或网络仿真(Multi-Agent  Simulator of Neighborhoods or Networks),是乔治梅森大学用Java开发的离散事件多主体仿真核心库，具有快速、灵活和便携的特点。</td><td>暂无版本更新</td></tr><tr><td>ABLE</td><td>ABLE  (Agent Building and Learning Environment)表示主体建模和学习环境，是 IBM公司用Java语言开发的框架，包括构件库和工具包，用于支持智能主体建模。</td><td>2000.05  alpha ver.</td></tr><tr><td>Cougaar</td><td>Cougaar 是用Java  构建的体系结构，适用于构筑基于主体的大规模分布式应用模  型。它本身是一个开放源代码项目，从DARPA 研究项目到大规模主体系统，用了8年的  时间。</td><td>暂无版本更新</td></tr></tbody></table></div><h2 id="5-2-Agent仿真软件Swarm简介"><a href="#5-2-Agent仿真软件Swarm简介" class="headerlink" title="5.2 Agent仿真软件Swarm简介"></a>5.2 Agent仿真软件Swarm简介</h2><p>Swarm是圣塔非研究所(Santa Fe Institute)开发的多Agent仿真建模工具，目的是构建一个仿真模拟的共享计算机平台，使研究者可以将精力集中于模型本身的构建。Agent是指仿真系统中具有自主性、自适应性的智能个体，是仿真活动的具体执行者，由内部数据表征—状态、改变状态的方法—感知、改变外部环境的方法—行为三部分组成。</p><p>Swarm是开放源代码的免费软件，最初为UNIX系统设计，现在已经支持Windows系统，并可用Java语言进行编程。由于在计算机仿真模拟领域中所表现出的卓越性能，渐渐被越来越多的人所接受，被应用于物理学、生态学、经济学等学科领域。</p><h3 id="5-2-1-Swarm的结构"><a href="#5-2-1-Swarm的结构" class="headerlink" title="5.2.1 Swarm的结构"></a>5.2.1 Swarm的结构</h3><p>Swarm应用是围绕Swarm这个概念构建起来的。Swarm仿真模拟是由若干个Swarm组成的，而每一个Swarm是由蕴涵在其中的多个Agent和作用于这些Agent的时间表(Schedule)组成的。Agent好比是Swarm虚拟世界中的物质，而时间表负责移动Agent按时序向前运动。时间表解决了如何在虚拟世界中建立时间概念的问题。</p><p>Swarm应用包含两种Swarm：</p><ul><li><p>模型Swarm</p><ul><li><p>模型Swarm处于核心地位，仿真模型封装于其中。</p></li><li><p>模型Swarm中的对象与要被建模的真实世界中的事物一一对应。</p></li></ul></li><li><p>观察者Swarm</p><ul><li><p>Swarm主要是对模型Swarm进行观察和测量。</p></li><li><p>观察者对象可以向模型Swarm中输入数据(参数设置)或者从模型Swarm中读数据(收集Agent的动作数据)。</p></li><li><p>观察者Swarm好比是一个培养皿，而模型Swarm就是其中培养的一个生物世界。</p></li></ul></li></ul><h3 id="5-2-2-如何用Swarm进行仿真"><a href="#5-2-2-如何用Swarm进行仿真" class="headerlink" title="5.2.2 如何用Swarm进行仿真"></a>5.2.2 如何用Swarm进行仿真</h3><p>步骤：</p><ol><li>创建一个人工的虚拟世界，其中有空间、时间的概念，以及存在于时空中的对象，称之为模型对象，而且允许这些对象根据自身的规则和内部状态来决定自身的行为；</li><li>创建另一些对象，称之为观察者对象，作用是观察、记录和分析由模型对象的行为所生成的数据；</li><li>运行实验；</li><li>通过观察者对象获得实验数据；</li><li>依据4的结果，改变模型对象的初始状态，返回3；</li><li>验证结论。</li></ol><h2 id="5-3-Agent仿真软件Repast简介"><a href="#5-3-Agent仿真软件Repast简介" class="headerlink" title="5.3 Agent仿真软件Repast简介"></a>5.3 Agent仿真软件Repast简介</h2><p>REPAST(REursive Porus Agent Simulation Toolkit)起源于芝加哥大学的社会科学计算研究所。其最初的设计目标是为社会仿真提供一个易于使用、易于扩展且功能强大的仿真工具包，现在REPAST已发展成一个通用的多Agent仿真平台。</p><p>2000年1月REPAST发布1.0版本，目前的最新版为3.1 版。REPAST最初只有JAVA语言版本，从版本3.0开始，还提供了C#和Python语言版本。</p><p>REPAST从SWARM借鉴了很多设计经验，两者的图形用户界面也很相似，因此被认为是类SWARM仿真工具包。</p><p>REPAST的应用大致可以分成理论研究、社会系统仿真、经济系统仿真、综合应用。</p><h3 id="5-3-1-Repast结构"><a href="#5-3-1-Repast结构" class="headerlink" title="5.3.1 Repast结构"></a>5.3.1 Repast结构</h3><p>REPAST大量采用了模板方法、抽象工厂等软件设计模式来提高编程框架的通用性，软件设计模式的采用也提高了仿真模型的模块化程度。REPAST的仿真程序的构成如下表所示。</p><div class="table-container"><table><thead><tr><th>核心部分</th><th>可选部分</th></tr></thead><tbody><tr><td>Agent类  Model类  Action类  Data  Source类</td><td>Space类  Display类  Chart类  Etc</td></tr></tbody></table></div><ul><li>Agent类：定义Agent的属性与行为。如果仿真模型中的Agent为homogenous（同质的），只需要一个Agent类。如果仿真模型中的Agent为heterogeneous（异质的），则对每种不同的Agent都需要有对应的Agent类。</li><li>Model类：REPAST仿真程序的核心。一个仿真程序一般只有一个模型定义类。由于模板方法设计模式的使用，模型定义类的结构化程度也很高。</li><li>Action类：行为类是仿真调度器与Agent类之间的解耦器。</li><li>DataSource类：根据仿真数据处理的不同需要，数据源类必须继承或实现某个类或接口。在仿真程序运行时，数据源对象记录、收集Agent对象所产生的数据并提供给分析、显示对象使用。即数据源类在仿真程序的分析、显示类与Agent类之间也起解耦作用。</li></ul><p>可选部分的类不是必须的，可以根据仿真模型的需要来决定是否创建这些类。</p><h1 id="六、元胞自动机模型"><a href="#六、元胞自动机模型" class="headerlink" title="六、元胞自动机模型"></a>六、元胞自动机模型</h1><h2 id="6-1-元胞自动机的基本概念"><a href="#6-1-元胞自动机的基本概念" class="headerlink" title="6.1 元胞自动机的基本概念"></a>6.1 元胞自动机的基本概念</h2><p>元胞自动机(Cellular Automaton，复数为Cellular Automata，简称CA），是一种计算机模型，许多相同的元胞(即点格) 以均匀的方式排列, 每个元胞只有几种可能的状态, 并且只和周围的几个元胞有相互作用。</p><p>为了更好理解元胞自动机, 需要假设元胞网中的每个元胞都由一个初级计算机控制。另外还需要一个时钟，时钟“滴答”一下，每台计算机就开始检查周围的情况，并根据所发现的情况，决定下一时刻的状态，这实际上就构成了一台自动机。</p><p> 一台CA由3 个因素组成: 初始构型、元胞自动机的几何、演化规则。</p><p>初始构型：可以理解成染色体或染色体的载体, 含有各种基因. 但在传统元胞自动机的研究中, 初始构型被设定为随机的初值, 此时, 主要研究的不是某个初始位型的变化, 而是可能出现的位型, 称为斑图(Pattern)。</p><p>元胞自动机的几何：是指点格的排列方式以及相关方式. </p><p>演化规则：指定状态的转换, 这里遇到了组合爆炸问题, 即规则的个数是个天文数字. 迄今为止,人们能考察到的规则是微不足道的。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-6/6.png" alt></p><p>在正方形网格中, 存在两种相邻, 即(a) Von Neumann 相邻和(b)Moore 相邻, 如图所示。</p><h2 id="6-2-元胞自动机的发展史"><a href="#6-2-元胞自动机的发展史" class="headerlink" title="6.2 元胞自动机的发展史"></a>6.2 元胞自动机的发展史</h2><p>元胞自动机最早由冯·诺依曼在1950年代为模拟生物细胞的自我复制而提出的。但是并未受到学术界重视。直到1970年，剑桥大学的约翰·何顿·康威设计了一个电脑游戏《生命游戏》后才吸引了科学家们的注意。此后，S.Wolfram对初等元胞机256种规则所产生的模型进行了深入研究，并用熵来描述其演化行为，将细胞自动机分为平稳型、周期型、混沌型和复杂型。</p><p>相关游戏：</p><ul><li>生命游戏</li><li>兰顿蚂蚁</li><li>Wireworld</li></ul><h3 id="6-2-1-Von-Neumann-元胞自动机"><a href="#6-2-1-Von-Neumann-元胞自动机" class="headerlink" title="6.2.1 Von Neumann 元胞自动机"></a>6.2.1 Von Neumann 元胞自动机</h3><p>50 年代初, 为了研究象生物体那样自我繁衍的简单系统, 在Ulam 的协助下, Von N eumann使用了称为元胞自动机的模型工具, 这是最早的元胞自动机.</p><p>1954 年, 元胞自动机的概念被Burks正式提出, 他指出Von Neumann 证明存在自我繁衍自动机, 其元胞具有29 个状态. </p><p>之后, Codd给出了构成自我繁衍自动机的组件, 其中有著名的数据通道、T 型连接和周期发射器等, 这为Langton发现我繁衍动机奠定了基础.</p><h3 id="6-2-2-生命游戏"><a href="#6-2-2-生命游戏" class="headerlink" title="6.2.2 生命游戏"></a>6.2.2 生命游戏</h3><p>20 世纪70 年代, 人们发现能够自我繁衍的自动机可能不是很复杂. 最有代表性的是Conway的生命游戏. 生命游戏将人们带进一个全新的世界, 由此引发元胞自动机热. 如图给出了生命游戏的一个构型,出现“滑翔机”和“闪光灯”。在这期间, 另一个值得关注的是Winfree 关于螺旋波的元胞自动机模型. 人们发现元胞自动机中存在自组织机制.</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-6/7.png" alt></p><h3 id="6-2-3-Langton-自我繁衍元胞自动机"><a href="#6-2-3-Langton-自我繁衍元胞自动机" class="headerlink" title="6.2.3 Langton 自我繁衍元胞自动机"></a>6.2.3 Langton 自我繁衍元胞自动机</h3><p>1984 年, Langton给出了一个真正实现自我繁衍的元胞自动机. 他利用Codd 通道构造了初始构型, 并利用T型结构实现信号的复制. 他将Codd 通道加上一个带有塞子的臂, 同时将通道做成环路用于存储信号, 这样周期性产生、发射信号。151 个迭代步后, 出现了自我繁衍(见图). 之后这个构型逐渐消失, 但是, 新繁衍出的构型将逐渐扩大它们的殖民地. Langton的这个自我繁衍元胞自动机实际上就是后来“人工生命”的基础。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-6/8.png" alt></p><h2 id="6-3-元胞自动机的主要应用"><a href="#6-3-元胞自动机的主要应用" class="headerlink" title="6.3 元胞自动机的主要应用"></a>6.3 元胞自动机的主要应用</h2><p>元胞自动机可用来研究很多一般现象。其中包括通信、信息传递（Communication）、计算（Computation）、构造 (Construction）、生长 (Growth）、复制 (Reproduction）、竞争（Competition）与进化（Evolution）等。</p><p>同时，它为动力学系统理论中有关秩序 (Ordering）、紊动 (Turbulence）、混沌 (Chaos）、非对称（Symmetry-Breaking）、分形（Factuality）等系统整体行为与复杂现象的研究提供了一个有效的模型工具 。</p><p>元胞自动机自产生以来，被广泛地应用到社会、经济、军事和科学研究的各个领域。应用领域涉及社会学、生物学、生态学、信息科学、计算机科学、数学、物理学、化学、地理、环境、军事学等。</p><h3 id="6-3-1-社会学应用"><a href="#6-3-1-社会学应用" class="headerlink" title="6.3.1 社会学应用"></a>6.3.1 社会学应用</h3><p>元胞自动机用于研究经济危机的形成与爆发过程、个人行为的社会性，流行现象，如服装流行色的形成等。在生物学中，元胞自动机的设计思想本身就来源于生物学自繁殖的思想，因而它在生物学上的应用更为自然而广泛。</p><p>例如：元胞自动机用于肿瘤细胞的增长机理和过程模拟、人类大脑的机理探索（Victor.Jonathan.D.，1990）、艾滋病病毒HIV的感染过程（Sieburg，H.B.,1990）、自组织、自繁殖等生命现象的研究以及最新流行的克隆 (Clone）技术的研究等 (ErmentroutG. B.,1993）。 </p><h3 id="6-3-2-生态学应用"><a href="#6-3-2-生态学应用" class="headerlink" title="6.3.2 生态学应用"></a>6.3.2 生态学应用</h3><p>元胞自动机用于兔子-草，鲨鱼-小鱼等生态动态变化过程的模拟，展示出令人满意的动态效果；元胞自动机还成功地应用于蚂蚁、大雁、鱼类洄游等动物的群体行为的模拟；另外，使用元胞自动机模型研究生物群落的扩散模拟也是当前的一个应用热点。在信息学研究中，元胞自动机用于研究信息的保存、传递、扩散的过程。另外，Deutsch(1972）、Sternberg(1980）和Rosenfeld(1979）等人还将二维元胞自动机应用到图像处理和模式识别中 (WoIfram.S.,1983）。</p><h3 id="6-3-3-计算机科学中的应用"><a href="#6-3-3-计算机科学中的应用" class="headerlink" title="6.3.3 计算机科学中的应用"></a>6.3.3 计算机科学中的应用</h3><p>元胞自动机可以被看作是并行计算机而用于并行计算的研究（Wolfram.S.1983）。另外，元胞自动机还应用于计算机图形学的研究中。</p><p>在数学中，元胞自动机可用来研究数论和并行计算。例如Fischer(1965）设计的素数过滤器（Prime Number Sieves)(Wolfram,S.1983）。</p><h3 id="6-3-4-物理学应用"><a href="#6-3-4-物理学应用" class="headerlink" title="6.3.4 物理学应用"></a>6.3.4 物理学应用</h3><p>除了格子气元胞自动机在流体力学上的成功应用。元胞自动机还应用于磁场、电场等场的模拟，以及热扩散、热传导和机械波的模拟。另外。元胞自动机还用来模拟雪花等枝晶的形成。</p><h3 id="6-3-5-化学中的应用"><a href="#6-3-5-化学中的应用" class="headerlink" title="6.3.5 化学中的应用"></a>6.3.5 化学中的应用</h3><p>元胞自动机可用来通过模拟原子、分子等各种微观粒子在化学反应中的相互作用，而研究化学反应的过程。例如李才伟 (1997）应用元胞自动机模型成功模拟了由耗散结构创始人I·Prgogine所领导的Brussel学派提出的自催化模型——Brusselator模型，又称为三分子模型。Y·BarYam等人利用元胞自动机模型构造了高分子的聚合过程模拟模型，在环境科学上，有人应用元胞自动机来模拟海上石油泄露后的油污扩散、工厂周围废水、废气的扩散等过程的模拟。</p><h2 id="6-4-元胞自动机的特点"><a href="#6-4-元胞自动机的特点" class="headerlink" title="6.4 元胞自动机的特点"></a>6.4 元胞自动机的特点</h2><p>元胞自动机不是由严格定义的物理方程或函数确定，而是用一系列模型构造的规则构成。凡是满足这些规则的模型都可以算作是元胞自动机模型。因此，元胞自动机是一类模型的总称，或者说是一个方法框架。其特点是时间、空间、状态都离散，每个变量只取有限多个状态，且其状态改变的规则在时间和空间上都是局部的。 由于元胞自动机的构建没有固定的数学公式，构成方式繁杂，变种很多，行为复杂，故其分类难度也较大。</p><p>基于不同的出发点，元胞自动机可有多种分类，其中，最具影响力的当属S. Wolfram在80年代初做的基于动力学行为的元胞自动机分类，而基于维数的元胞自动机分类也是最简单和最常用的划分。除此之外，在1990年，Howard A.Gutowitz提出了基于元胞自动机行为的马尔科夫概率量测的层次化、参量化的分类体系（Gutowitz,H. A.,1990）。</p><p>S. Wolfrarm在详细分析研究了一维元胞自动机的演化行为，并在大量的计算机实验的基础上，将所有元胞自动机的动力学行为归纳为四大类（1986):</p><ul><li><strong>平稳型( homogeneous)</strong>；自任何初始状态开始，经过一定时间运行后，元胞空间趋于一个空间平稳的构形，每一个元胞处于固定（stable）状态，不随时间变化而变化。</li><li><strong>周期型(periodic)</strong>：经过一定时间运行后，元胞空间趋于一系列简单的固定结构（Stable）或周期结构（Periodical Patterns)。这些结构可看作是一种滤波器（Filter）。</li><li><strong>混沌型(chaotic)</strong>：自任何初始状态开始，经过一定时间运行后，元胞自动机表现出混沌的非周期行为，所生成的结构的统计特征不再变止，通常表现为分形分维特征。</li><li><strong>复杂型(complex)</strong>：出现复杂的局部结构，或者说是局部的混沌，其中有些会不断地传播。</li></ul><h2 id="6-5-CA模型的构成"><a href="#6-5-CA模型的构成" class="headerlink" title="6.5 CA模型的构成"></a>6.5 CA模型的构成</h2><p>一个标准的细胞自动机（A）由元胞、元胞状态、邻域和状态更新规则构成。用数学表示为：</p><script type="math/tex; mode=display">A = (L, d, S, N, f)</script><p>其中，L为元胞空间；d为元胞自动机内元胞空间的维数；S是元胞有限的、离散的状态集合；N为某个邻域内所有元胞的集合；f为局部映射或局部规则。</p><p>元胞空间是元胞所分布的空间网点的集合。理论上元胞空间在各个维向上是无限延伸的，为了能够在计算机上实现，而定义了边界条件，包括周期型、反射型和定值型。</p><p>一个元胞通常在一个时刻只有取自一个有限集合的一种状态，例如{0,1}。元胞状态可以代表个体的态度，特征，行为等。在空间上与元胞相邻的细胞称为邻元，所有邻元组成邻域。</p><p>CA是由无限个有规律、坚硬的方格组成，每格均处于一种有限状态。整个格网可以是任何有限维的。同时也是离散的。每格于t时的状态由 t-1时的格的邻域状态决定。 每一格的“邻居”都是已被固定的（一格可以是自己的邻居） 。</p><p>每次演进时，每格均遵从同一规则一齐演进。</p><p>就形式而言，细胞自动机有三个特征：</p><ol><li>平行计算（parallel computation）：每一个细胞个体都同时同步的改变；</li><li>局部性（local）：细胞的状态变化只受周围细胞的影响；</li><li>一致性（homogeneous）：所有细胞均受同样的规则所支配。</li></ol><h1 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h1><ul><li>主要介绍复杂系统仿真的基本概念、微观仿真技术、Agent的基本概念、多Agent仿真的基本概念、多Agent仿真建模的方法和元胞自动机模型</li><li>简要介绍了基于Agent的仿真软件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 仿真模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统仿真笔记（五）离散事件系统仿真原理</title>
      <link href="/post/System-Simulation-5/"/>
      <url>/post/System-Simulation-5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>之前内容请回顾：<a href="/post/System-Simulation-4/">系统仿真笔记（四）离散事件系统模型</a></p><p>本节笔记主要介绍离散事件系统的形式化描述、表处理方法、离散事件系统模拟策略概述、事件调度法、活动扫描法、三阶段扫描法和进程交互法等</p><h1 id="一、离散事件系统的形式化描述"><a href="#一、离散事件系统的形式化描述" class="headerlink" title="一、离散事件系统的形式化描述"></a>一、离散事件系统的形式化描述</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><p>离散事件系统的状态是在一些不规则的时间点上发生变化，且无法用常规的数学方程描述。Zeigler提出了一种描述离散事件系统形式化的方法——离散事件系统规范（Discrete Event Specification, DEVS），它具有层次化、模块化的特点，利用该方法可以对复杂的离散事件系统进行建模、设计、分析和仿真。</p><p>DEVS有两种模型：基本模型、耦合模型。</p><ul><li>基本模型（Atomic DEVS）：描述系统的自治行为，包括状态转换、外部输入事件响应、系统输出等。</li><li>耦合模型（Coupled DEVS）：基本模型通过连接形成耦合模型。</li></ul><h2 id="1-2-DEVS基本模型："><a href="#1-2-DEVS基本模型：" class="headerlink" title="1.2 DEVS基本模型："></a>1.2 DEVS基本模型：</h2><p>一个DEVS基本模型可表示为一个七元组结构 <script type="math/tex">Atomic DEVS = <S, ta, fint, X, fext, Y, O></script></p><p>X：外部输入事件集；</p><p>Y：输出集：向外部输出事件。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/1.png" alt></p><p>模型结构说明：</p><p>$S$：系统状态集，即状态变量与参数的集合。定义系统的总状态： $Q=\{(s,e)│ s∈𝑺,𝟎≤e ≤ ta(s)\}$,其中，e表示在状态s停留的时间，(s,e)表示总状态。</p><p>$T$：模型时间基，$T ∈R$， $ta$为时间推进函数，用于控制内部转移的时间。$ta(s)$表示在没有外部时间到达时系统状态保持为s的时间；$ta(s)=0$表示瞬态，仿真钟不推进。</p><p>$fint$ ：内部转移函数。在时间推进函数给定的时间流后，系统转移到的新状态。$fint: S→S$，经过时间$ta(s)$ 后，状态s转移到$ fint(s)$, 同时$e=0$。</p><p>$fext$ ：外部转移函数。在接收到输入X后，系统如何转移新状态。$ fext ：QxX→S$，$Qx$为外部事件作用下的系统状态。若有某外部事件$x ∈ X$到达，系统在状态$s$一停留时间为$e$，则它立即转移到$fext: (s,e,x)$， 同时，$e=0$。</p><p>$O$：输出函数。在内部转移发生前产生一个外部输出。 $O ：S→Y∪\{P\}$。输出事件在系统内部状态转移时产生，且状态转移前的状态$s$用于产生输出$O(s)$，其它非内部状态转移时的输出为P。</p><h2 id="1-3-DEVS耦合模型"><a href="#1-3-DEVS耦合模型" class="headerlink" title="1.3 DEVS耦合模型"></a>1.3 DEVS耦合模型</h2><p>一个DEVS耦合模型可表示为一个七元组结构<script type="math/tex">Coupled DEVS = <X_{self}, Y_{self}, D, \{M_i\}, \{I_i\}, \{Z_{i,j}\}, select></script></p><p>其中</p><p>$\{M_i\}$：基本模型成员集，$\{M_i│i∈D\}$且<script type="math/tex">Mi = <S_i, tai, fint,i, X_i, fext,i, Y_i, O_i></script></p><p>$I_i$：内部耦合</p><p>$Z_{i,j}$：外部输入耦合</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/2.png" alt></p><h2 id="1-4-耦合模型与基本模型的关系"><a href="#1-4-耦合模型与基本模型的关系" class="headerlink" title="1.4 耦合模型与基本模型的关系"></a>1.4 耦合模型与基本模型的关系</h2><p>对任一个DEVS耦合模型，可以构造出一个与之等价的基本模型<script type="math/tex">Coupled DEVS = <X_self, Y_self, D,\{M_i\}, \{I_i\},\{Z_{i,j}\}, select></script></p><script type="math/tex; mode=display">M_i = <S_i, tai, fint,i, X_i, fext,i, Y_i, O_i></script><p>等价于基本模型<script type="math/tex">M = <S, ta, fint, X, fext, Y, O></script></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/3.png" alt></p><h2 id="1-5-DEVS模型实现"><a href="#1-5-DEVS模型实现" class="headerlink" title="1.5 DEVS模型实现"></a>1.5 DEVS模型实现</h2><p>一个DEVS耦合模型可以是一个层次结构</p><p>这个层次结构还可以嵌套</p><p>一个DEVS耦合模型的实现算法是一个递归算法（recursion algorithm）</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/4.png" alt></p><h1 id="二、表的处理方法"><a href="#二、表的处理方法" class="headerlink" title="二、表的处理方法"></a>二、表的处理方法</h1><p>由控制论可知，系统行为就是在给定时间t的系统的全部状态的变化过程形成的，而状态则是描述系统行为所需变量的最小集合。同样，离散事件系统仿真的核心问题是：如何建立描述系统行为的逻辑模型。离散事件系统某一时刻t的状态用表来表示，如下所示。</p><div class="table-container"><table><thead><tr><th>时钟</th><th>系统状态</th><th>实体和属性</th><th>集合1</th><th>集合2</th><th>…</th><th>FEL</th><th>累计统计和计数器</th></tr></thead><tbody><tr><td>t1</td><td>(x,y<em>,</em>z,…)</td><td></td><td></td><td></td><td></td><td>(3,t2):类型3事件出现在t2</td><td></td></tr><tr><td>t2</td><td>……</td><td></td><td></td><td></td><td></td><td>(1,t3):类型1事件出现在t3</td><td></td></tr><tr><td>t3</td><td>……</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>t4</td><td>……</td><td></td><td></td><td></td><td></td><td></td><td>.</td></tr></tbody></table></div><p>离散事件系统仿真模型中的数据用表(List)的结构形式表示，表处理指的是使用表和操作表的总称。</p><p>表具有<u>有序记录</u>、<u>表头</u>、<u>表尾</u>、<u>表的遍历</u>的基本性质</p><p>表的操作：</p><ul><li>顶部删除一条记录</li><li>任意位置删除记录</li><li>表顶或底部添加记录</li><li>表的任意部位添加记录，且符合排序规则</li></ul><p>表的处理：</p><ul><li>使用数组（Array）</li><li>使用动态分配和链表（常用）：单链表、双链表；</li><li>目前，主流仿真软件采用多指针链表（头、尾、中）。</li></ul><p><strong>JAVA语言表的处理方法</strong>：</p><ul><li>ArrayList：动态数组</li><li>LinkList：链表操作</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/5.png" alt></p><h1 id="三、离散事件系统模拟策略概述"><a href="#三、离散事件系统模拟策略概述" class="headerlink" title="三、离散事件系统模拟策略概述"></a>三、离散事件系统模拟策略概述</h1><h2 id="3-1-系统模拟的一般步骤"><a href="#3-1-系统模拟的一般步骤" class="headerlink" title="3.1 系统模拟的一般步骤"></a>3.1 系统模拟的一般步骤</h2><p>一般地，一个离散系统的计算机模拟过程是一个包括时间的推进、系统状态的更新等操作的迭代过程，通用过程如下：</p><p><strong>Step1</strong>:预置状态变量<script type="math/tex">X=\{x_1,…,x_m\}</script>的值为<script type="math/tex">Y=\{y_1,…,y_m\}</script>,描述变量<script type="math/tex">Y_d=\{y_{m+1},…,y_n\}</script> ；</p><p><strong>Step2</strong>:预置时标为$t=tM$；</p><p><strong>Step3</strong>:将相互关系规则f(Y)应用于状态变量<script type="math/tex">Y=\{y_1,…,y_m\}</script>，使之产生新内容，<script type="math/tex">f(Y)=Y’</script>，<script type="math/tex">Y’=\{y$1’,…,y$m’\}</script> ；同样使描述变量<script type="math/tex">Y_d’=\{y_{m+1},…,y_n\}</script>产生新内容，<script type="math/tex">g(Y_d)=Yd’</script>，<script type="math/tex">Y_d’=\{y_{m+1’},…,y_n’\}</script> ；<script type="math/tex">Y=Y’</script>, <script type="math/tex">Y_d=Y_d’</script>;</p><p><strong>Step4</strong>:推进时标$t=t+h$（h为步长）；</p><p><strong>Step5</strong>:if  $t&gt;tM+Nh$，停止计算。否则，返回Step3。</p><h2 id="3-2-常用的离散事件系统模拟策略"><a href="#3-2-常用的离散事件系统模拟策略" class="headerlink" title="3.2 常用的离散事件系统模拟策略"></a>3.2 常用的离散事件系统模拟策略</h2><p>离散事件系统属于动态系统，即与时间有关的系统，因此，离散事件系统模拟要考虑系统中时间的变化，即时间如何推进的问题。</p><p>离散事件系统的模拟<strong>算法</strong>或模拟<strong>策略</strong>要决定实体之间的逻辑联系，时间的推进，事件间的关系，活动的关系等问题。目前，比较成熟的离散事件系统模拟策略有四种，即：</p><ul><li>事件调度法（ES）</li><li>活动扫描法（AS）</li><li>三阶段扫描法（TPS）</li><li>进程交互法（PI）</li></ul><h1 id="四、事件调度法"><a href="#四、事件调度法" class="headerlink" title="四、事件调度法"></a>四、事件调度法</h1><h2 id="4-1-基本思想"><a href="#4-1-基本思想" class="headerlink" title="4.1 基本思想"></a>4.1 基本思想</h2><p>事件调度法（Event Scheduling，ES）是用“事件”的观点来抽象真实系统，即：定义事件及每一事件发生对系统状态的影响，并按事件发生时间顺序来确定每类事件发生时系统中的各实体之间的逻辑关系及其状态。事件调度法的模拟时钟的推进，是按照下一事件的发生时刻来触发。大多数发生的事件，两个相邻事件发生的时间间隔一般是随机的，因此事件调度法是变步长法。</p><h2 id="4-2-事件调度法仿真时钟的推进"><a href="#4-2-事件调度法仿真时钟的推进" class="headerlink" title="4.2 事件调度法仿真时钟的推进"></a>4.2 事件调度法仿真时钟的推进</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/6.png" alt></p><blockquote><p>仿真钟的推进:按事件发生的时间间隔进行</p></blockquote><h2 id="4-3-事件调度法具体描述"><a href="#4-3-事件调度法具体描述" class="headerlink" title="4.3 事件调度法具体描述"></a>4.3 事件调度法具体描述</h2><p>仿真模型中所有事件均按时间先后顺序存放在事件表中；</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/7.png" alt></p><p>模型中要设计一个时间控制部件实现仿真钟的管理与控制。每当处理一类事件时，它总是从事件表中选择最早发生的事件；并将仿真钟推进到该事件发生的时间；然后调用与该事件相应的事件处理模块；</p><p>事件处理模块在执行完后都必须返回到时间控制部件。这样，事件的选择与处理不断地进行，仿真钟按事件时间往前推进，直到仿真终止的条件满足为止。</p><h2 id="4-4-事件调度法的算法"><a href="#4-4-事件调度法的算法" class="headerlink" title="4.4 事件调度法的算法"></a>4.4 事件调度法的算法</h2><p>1）执行初始化操作：仿真时钟TIME、系统状态及统计量等置初始值：</p><ul><li>置初始时间<script type="math/tex">t=t_0</script>，结束时间<script type="math/tex">t_∞=te</script></li><li>事件表初始化，置系统初始事件</li><li>成分状态初始化:$S=((sa1,ta1),…,(sam,tam),sam+1,…,san)$</li></ul><p>2）操作、扫描事件表，将时钟TIME增加到下一个最早发生事件的时间上；</p><ul><li>取出具有$t(s)=min\{ta|a∈CA\}$事件记录</li><li>修改事件表</li></ul><p>3）推进仿真钟 $TIME=t(s)$</p><p>4）While($TIME&lt;=t_∞$)则执行</p><ul><li>Case 根据事件类型$i$</li><li>$i=1$执行第1类事件处理程序，处理该事件，相应的改变系统状态；</li><li>$i=2$执行第2类事件处理程序，处理该事件，相应的改变系统状态；</li><li>$……$</li><li>$i=m$执行第m类事件处理程序，处理该事件，相应的改变系统状态；</li><li>endcase </li><li>取出具有$t(s)=min\{ta|a∈CA\}$事件记录（若有若干个，则按解结规则处理）</li><li>置仿真时间$TIME=t(s)$，若仿真期间未到，返回2)，否则，执行下一步；</li><li>收集统计数据；</li><li>endwhile</li></ul><p>5）分析收集的统计数据，产生报告。</p><h2 id="4-5事件调度法流程图"><a href="#4-5事件调度法流程图" class="headerlink" title="4.5事件调度法流程图"></a>4.5事件调度法流程图</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/8.png" alt></p><h2 id="4-6-事件调度法的流程控制"><a href="#4-6-事件调度法的流程控制" class="headerlink" title="4.6 事件调度法的流程控制"></a>4.6 事件调度法的流程控制</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/9.png" alt="9"></p><h2 id="4-7-事件调度法的注意事项"><a href="#4-7-事件调度法的注意事项" class="headerlink" title="4.7 事件调度法的注意事项"></a>4.7 事件调度法的注意事项</h2><p>两个特别注意的基本问题</p><ul><li>第一是所谓“同时事件”。即具有相同发生时间的事件，模型中必须事先规定其处理顺序，亦称为规定“解结规则”，因为在任何时刻，计算机只能执行某一个事件的程序。<strong>这一般是通过定义事件的优先级来解决的。</strong></li><li>第二是所谓“<strong>条件事件</strong>”。在某些系统中，事件的发生不仅具有时间属性，还往往带有条件属性。从本质上讲，事件调度法是一种“预定事件发生时间”的策略，如果按预定时间某一事件应该发生，但发生该事件的条件（如果有的话）不满足，则必须推迟或取消该事件的发生。</li></ul><p>所有上述两方面的问题，都应在相应的模块中特别加以处理，以免产生模型的死锁。</p><p><strong>实体状态和状态转换:</strong></p><ul><li>活动状态（active）：实体被激活，处于活动状态；</li><li>挂起状态（scheduled）：实体被再次激活的时间是确定的；</li><li>阻塞状态（blocked）：实体处于等待状态，一旦满足某种条件，实体马上就会被激活。这种实体叫做条件活动实体；</li><li>锁定状态（locked）：类似于阻塞状态，实体被监控，解除锁定后进入阻塞状态。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/10.png" alt></p><h1 id="五、活动扫描法"><a href="#五、活动扫描法" class="headerlink" title="五、活动扫描法"></a>五、活动扫描法</h1><h2 id="5-1-事件调度法的弱点"><a href="#5-1-事件调度法的弱点" class="headerlink" title="5.1 事件调度法的弱点"></a>5.1 事件调度法的弱点</h2><p>事件调度法具有省时间的优点，但是它的实现和设计较复杂。</p><p>仿真钟的推进：仅依据对最早发生的事件的扫描。因此，事件调度法是一种“预订事件发生时间”的策略。</p><p>这样，仿真模型中必须预先设定系统中最先发生的事件，以便启动仿真进程。在每一类事件处理程序中，需要：①处理该事件，②相应的改变状态；③预定本类事件的下一次事件发生的时间。所以，事件调度策略对于系统活动时间的确定性较强（服从某种分布的随机变量）的系统来说，比较方便。</p><p>问题点：当事件的发生不仅与时间有关，而且其它条件也有关时，事件调度策略便会显示其弱点。原因在于，这类系统活动时间的不确定性较强，无法预定事件的下一次发生的时间。</p><h2 id="5-2-活动扫描法的基本思想"><a href="#5-2-活动扫描法的基本思想" class="headerlink" title="5.2 活动扫描法的基本思想"></a>5.2 活动扫描法的基本思想</h2><p>活动扫描法（Activity Scanning，AS）是针对系统活动时间不确定性较强的系统产生的。它的基本思想是：</p><ul><li>系统由成分组成，而成分包含着活动，这些活动的发生必须满足某些条件；每一个主动成分均有一个相应的活动子例程；仿真过程中，活动的发生时间也作为条件之一，而且是较之其他条件具有更高的优先权。</li><li>由于是采用“活动”的观点建模，活动扫描法要求定义系统中所有“活动”及相应处理“活动”的子例程，包括定义活动发生的条件，活动发生的时间也作为条件之一，但它具有最高的优先权。</li></ul><h2 id="5-3-活动扫描法的仿真钟推进策略"><a href="#5-3-活动扫描法的仿真钟推进策略" class="headerlink" title="5.3 活动扫描法的仿真钟推进策略"></a>5.3 活动扫描法的仿真钟推进策略</h2><p>AS策略包括两个控制仿真流程的基本部件：</p><ul><li>活动扫描部件：任务是在仿真的每一步对系统中定义的全部活动按优先级从高到低逐个扫描；</li><li>条件处理部件：对被扫描活动的有关条件进行测试。</li></ul><p>AS法是按照活动的开始、结束时刻来推进仿真时钟。它们不仅取决于时间，还取决于其它因素（条件因素）。</p><p>在AS法中，时间的扫描通过时间元（time-cell）进行，时间元是指各个实体的局部时钟，与仿真时钟（全局时钟）相对应。</p><p>时间元的取值方法为：</p><ul><li>绝对时间法，将时间元的时钟设在实体的确定事件发生时刻。</li><li>相对时间法，将时间元的时钟设在实体的确定事件发生的时间间隔上。</li></ul><p>如果实体处于等待服务状态，对于绝对时间法，实体的时间元应小于当前仿真时刻；对于相对时间法，实体的时间元应小于0.</p><p><strong>活动扫描法仿真时钟的推进：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/11.png" alt></p><p>ta&gt;TIME，表示该活动在将来某一时刻可能发生；</p><p>ta=TIME，表示该活动如果条件满足立即发生；</p><p>ta&lt;TIME，表示该活动按预定时间早该发生，但因条件没满足，到目前实际上没发生。当前是否发生，需要判断其发生的条件。</p><h2 id="5-4-活动扫描法的一种基本算法"><a href="#5-4-活动扫描法的一种基本算法" class="headerlink" title="5.4 活动扫描法的一种基本算法"></a>5.4 活动扫描法的一种基本算法</h2><p>执行初始化操作，包括：</p><ul><li>置初始时间和结束时间分别为<script type="math/tex">t=t_0 \quad t_ \infty=te</script></li><li>设置主动成分$a_i$的仿真钟$ta(i)(i=1,2,…,m)$</li><li>成分$a_1,…,a_n$状态$Sa_i$初始化</li><li><script type="math/tex; mode=display">S=((s_{a1},t_{a1}),…,(s_{am},t_{am}),s_{am+1},…,s_{an})</script></li><li>设置系统仿真$TIME=t_0$</li><li>While$(TIME&lt;=t_∞)$则执行扫描</li></ul><p>for j = 最高优先数 to 最低优先数</p><ul><li><p>将优先数为j的成分置成i</p></li><li><p>if <script type="math/tex">(t_a(i)<=TIME$ 且 $D_{ai}(S)=true)</script></p></li><li>执行活动子例程$i$</li><li>退出，重新开始扫描</li><li>end if</li><li>end for</li><li>$TIME=min(t_a|a∈FUTURE(S))$</li></ul><p>end while</p><h2 id="5-5-活动扫描法流程图"><a href="#5-5-活动扫描法流程图" class="headerlink" title="5.5 活动扫描法流程图"></a>5.5 活动扫描法流程图</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/12.png" alt></p><h2 id="5-6-活动扫面发的流程控制"><a href="#5-6-活动扫面发的流程控制" class="headerlink" title="5.6 活动扫面发的流程控制"></a>5.6 活动扫面发的流程控制</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/13.png" alt></p><h2 id="5-7-活动表AL-Activity-List"><a href="#5-7-活动表AL-Activity-List" class="headerlink" title="5.7 活动表AL(Activity List)"></a>5.7 活动表AL(Activity List)</h2><div class="table-container"><table><thead><tr><th><strong>活动</strong></th><th><strong>开始时间</strong></th><th><strong>结束时间</strong></th><th><strong>条件</strong></th></tr></thead><tbody><tr><td><strong>activity1</strong></td><td><strong>t11</strong></td><td><strong>t12</strong></td><td><strong>○</strong></td></tr><tr><td><strong>activity2</strong></td><td><strong>t21</strong></td><td><strong>t22</strong></td><td><strong>○</strong></td></tr><tr><td><strong>activity3</strong></td><td><strong>t31</strong></td><td><strong>t32</strong></td><td><strong>○</strong></td></tr><tr><td><strong>…</strong></td><td><strong>…</strong></td><td><strong>…</strong></td><td><strong>…</strong></td></tr></tbody></table></div><h2 id="5-8-活动扫描法小结"><a href="#5-8-活动扫描法小结" class="headerlink" title="5.8 活动扫描法小结"></a>5.8 活动扫描法小结</h2><p>活动扫描法的核心是建立活动子例程，包括：</p><ul><li>此活动发生引起的状态变化（自身的）</li><li>对其他成分的状态产生的作用等</li><li>而条件处理模块则是这种策略实现的本质，它相应于事件调度法中的定时模块</li></ul><h1 id="六、三阶段扫描法"><a href="#六、三阶段扫描法" class="headerlink" title="六、三阶段扫描法"></a>六、三阶段扫描法</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><p>活动扫描法具有以下弱点：活动扫描法将确定事件、条件事件的活动例程同等对待，都要通过反复扫描来执行，因而影响执行效率。</p><p>1963年，K.D.Tocher借鉴事件调度法的思想，对活动扫描法进行改进，提出了三阶段扫描法（Three-phase scanning）。</p><p>三阶段扫描法兼有活动扫描法程序实现简单和事件调度法时间推进高效的优点，已逐步取代了最初的活动扫描法。</p><p>下面介绍三阶段扫描法的一些基本概念。</p><ul><li>活动例程的分类</li><li>实体的三个重要属性</li></ul><h3 id="6-1-1-活动例程的分类"><a href="#6-1-1-活动例程的分类" class="headerlink" title="6.1.1 活动例程的分类"></a>6.1.1 活动例程的分类</h3><p>三阶段扫描法的基本模型单元是活动例程（同活动扫描发），但三阶段扫描法中，活动例程分为两类：</p><p>（1）B类活动例程（bound routine）：可明确预知活动的起始时间和结束时间的例程（必然会发生）；</p><p>（2）C类活动例程（condition routine）：描述条件事件的活动例程，在协同活动开始或满足其他特定条件时被执行，又称条件活动例程或合作活动例程。 C类活动例程的发生和结束时间不可事先预知；<br>执行特点：</p><p>B类活动：同事件调度法，在预定时刻直接执行；</p><p>C类活动：需要扫描。</p><h3 id="6-1-2-实体的三个重要属性"><a href="#6-1-2-实体的三个重要属性" class="headerlink" title="6.1.2 实体的三个重要属性"></a>6.1.2 实体的三个重要属性</h3><p>实体的三个重要属性：时间片、可用性、下一活动</p><p>（1）时间片（时间元）（time cell）</p><ul><li>下一状态转移时间。每一实体带有标志自身时钟值的时间片，只有该实体属于将来某时刻发生的B类活动时，该属性才有意义。</li></ul><p>（2）可用性（availability）</p><ul><li>一个布尔型的标志（True/False），表示该实体是否能属于将来某时刻发生的B类活动，或者说该实体是否可以被无条件占用。标志为True时，表明可用；否则为不可用。</li></ul><p>（3）下一活动（next activity）</p><ul><li>同“时间片”属性，仅当“可用性”为False时，该属性才有意义，它表示“时间片”所预期的B类活动。</li></ul><h2 id="6-2-三阶段扫描法策略流程图"><a href="#6-2-三阶段扫描法策略流程图" class="headerlink" title="6.2 三阶段扫描法策略流程图"></a>6.2 三阶段扫描法策略流程图</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/14.png" alt></p><p>下面是三阶段法中每个实体分配的记录表：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/15.png" alt></p><h2 id="6-3-三阶段法的基本描述"><a href="#6-3-三阶段法的基本描述" class="headerlink" title="6.3 三阶段法的基本描述"></a>6.3 三阶段法的基本描述</h2><h3 id="A阶段"><a href="#A阶段" class="headerlink" title="A阶段"></a>A阶段</h3><p>A阶段：时间扫描</p><p>扫描事件表，找出下一最早发生事件。将系统仿真时钟推进到该事件发生的时刻。系统时钟一直保持这一时刻直到下一个A阶段发生。具体做法是：</p><p>仿真控制程序搜寻出那些“可用性”属性为“False”且具有最小时间片（time cell）的实体，并将time cell 作为下一最早事件发生时刻。因为可能有多个B类活动在下一时刻发生，所以仿真控制程序必须记录在该时刻所有的不可用实体而形成一个DueNow列表。</p><h3 id="B阶段"><a href="#B阶段" class="headerlink" title="B阶段"></a>B阶段</h3><p>B阶段：执行DueNow列表（当前时刻的B类活动例程）</p><p>一旦DueNow列表形成，仿真控制程序将顺序扫描该表中的每个实体，从中挑选出可执行的实体，并对每一个可执行的实体进行如下操作：</p><ol><li>将实体从DueNow列表中删除；</li><li>将该实体的“可用性”属性置为“True”；</li><li>执行该实体的“下一活动”属性所代表的活动</li></ol><p>注意：执行一个相应的B类活动将导致同一实体或其它实体归属于当前B类活动或其它未来的B类活动。</p><h3 id="C阶段"><a href="#C阶段" class="headerlink" title="C阶段"></a>C阶段</h3><p>C阶段：扫描C类活动例程</p><p>注意对其中的事件进行条件测试，看看其条件是否满足。如果条件满足，则执行相应的操作。</p><p>在查询C事件表期间，保持当前仿真钟不变，直到C事件表中所有的事件都不满足启动条件为止。</p><h1 id="七、进程交互法"><a href="#七、进程交互法" class="headerlink" title="七、进程交互法"></a>七、进程交互法</h1><h2 id="7-1-什么是进程"><a href="#7-1-什么是进程" class="headerlink" title="7.1 什么是进程"></a>7.1 什么是进程</h2><p>进程由若干个有序事件及若干有序活动组成，一个进程描述了它所包括的事件及活动时间的相互逻辑关系及时序关系。</p><h2 id="7-2-PI的基本思想"><a href="#7-2-PI的基本思想" class="headerlink" title="7.2 PI的基本思想"></a>7.2 PI的基本思想</h2><p>进程交互法（Process Interaction，PI）采用进程描述系统，它将模型中的主动成分历经系统时所发生的事件及活动按时间顺序进行组合，从而形成进程表，一个成分一旦进入进程，它将完成该进程的全部活动。这种方法主要用于对实体活动较规则的系统建模。进程交互法是面向进程的。从用户的观点这种策略更易于使用，但较之其他两种方法要复杂得多。</p><h2 id="7-3-进程交互法的基本描述"><a href="#7-3-进程交互法的基本描述" class="headerlink" title="7.3 进程交互法的基本描述"></a>7.3 进程交互法的基本描述</h2><p>进程交互法是事件调度法与活动扫描法的结合（类似于三段扫描法）。它是以模型的各主动成分的活动为主线来调度事件生成的顺序的。这种策略要求建立两种事件表：</p><ul><li>当前事件表（CEL，Current Event List），它存放着从当前时间点开始有资格执行的事件的记录，该事件是否能发生的条件尚未判断。</li><li>将来事件表（FEL，Future Event List），它包含在将来某个仿真时刻发生的事件的事件记录。每一个事件记录中有包括该事件的若干个属性项，其中必须有一个属性，说明该事件所在进程及在该进程中所处位置的指针。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/16.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/17.png" alt></p><h2 id="7-4-进程交互法调度算法"><a href="#7-4-进程交互法调度算法" class="headerlink" title="7.4 进程交互法调度算法"></a>7.4 进程交互法调度算法</h2><p>执行初始化操作，包括：</p><p>设置开始时间$t=t_0$,结束时间$t_∞$</p><p>设置初始化事件，并置于FEL中</p><p>将FEL中有关事件记录置于CEL中</p><p>成分状态初始化： $S=((s_{a1},t_{a1}),…,(s_{am},t_{am}),s_{am+1},…,s_{an})$</p><p>设置系统仿真钟$TIME=t$</p><p>While($TIME&lt;=t_∞$)，则执行</p><p>1 CEL扫描</p><p>While(CEL中最后一个纪录未处理完) 则</p><p>While($Dai(S)=true$且当前成分为处理完) 则</p><p>执行该成分的活动</p><p>确定该成分的下一事件</p><p>end while</p><p>end while</p><p>2 推进仿真钟</p><p>TIME=FEL中安排的最早时间</p><p>if($TIME&lt;= t_∞$)则</p><p>将FEL中所在TIME时刻发生的事件记录移到CEL中</p><p>end if</p><p>end while</p><h2 id="7-5-进程交互法流程图"><a href="#7-5-进程交互法流程图" class="headerlink" title="7.5 进程交互法流程图"></a>7.5 进程交互法流程图</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/18.png" alt></p><h2 id="7-6-进程交互法的流程控制"><a href="#7-6-进程交互法的流程控制" class="headerlink" title="7.6 进程交互法的流程控制"></a>7.6 进程交互法的流程控制</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-5/19.png" alt></p><h2 id="7-7-基本描述"><a href="#7-7-基本描述" class="headerlink" title="7.7 基本描述"></a>7.7 基本描述</h2><p>进程交互法的处理过程是：</p><p>​    ① 推进系统仿真钟 TIME。</p><p>​    ② 把满足Ta&lt;=TIME 的所有事件从 FEL移动到 CEL 。</p><p>​    ③ 取出 CEL的事件，判断所属的进程及在进程中的位置。</p><p>​    ④ 判断该事件发生的条件是否满足。</p><p>​    ⑤ 如条件满足则该进程尽可能地连续推进，直到进程结束。</p><p>​    ⑥ 如该进程推进过程中，条件不满足，则记录该进程的位置，退出该进程。</p><p>​    ⑦重复③-⑥，直到 CEL事件处理完毕。</p><p>​    ⑧重复①-⑦，直到到仿真结束。</p><h2 id="7-8-四种方针策略的比较"><a href="#7-8-四种方针策略的比较" class="headerlink" title="7.8 四种方针策略的比较"></a>7.8 四种方针策略的比较</h2><div class="table-container"><table><thead><tr><th><strong>项目</strong></th><th><strong>ES</strong></th><th><strong>AS</strong></th><th><strong>TPS</strong></th><th><strong>PI</strong></th></tr></thead><tbody><tr><td><strong>系统描述</strong></td><td>主动/被动成分<br>仅主动成分施加作用<br>主动成分产生事件</td><td>主动/被动成分<br>均可施加作用<br>主动成分产生活动</td><td>主动/被动成分<br>均可施加作用<br>定义B、C类活动</td><td>主动/被动成分<br>均可施加作用<br>成分在进程中推进</td></tr><tr><td><strong>建模要点（关注点）</strong></td><td>定义全部事件<br>条件测试在时间处理过程中进行</td><td>定义全部活动<br>专用条件子例程测试条件<br>有活动扫描模块</td><td>三段法<br>DueNow事件表的维护</td><td>实体行为的进程分为若干步<br>每一步包括条件测试、执行活动两部分</td></tr><tr><td><strong>仿真钟推进</strong></td><td>事件表中下一时间时间</td><td>按最小成分仿真钟推进</td><td>可用性属性为假且最小time Cell</td><td>将来事件表中最早事件发生时间</td></tr><tr><td><strong>执行控制</strong></td><td>解结规则建模时规定<br>按事件优先级</td><td>解结规则建模时规定<br>按事件优先级</td><td>执行DueNow事件表</td><td>解结规则建模时规定<br>按当前事件优先级，一直执行</td></tr></tbody></table></div><h1 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h1><ul><li>离散事件系统的形式化描述</li><li>表处理方法</li><li>离散事件系统模拟策略概述</li><li>事件调度法、活动扫描法</li><li>三阶段扫描法</li><li>进程交互法</li><li>几种策略的比较</li></ul>]]></content>
      
      
      <categories>
          
          <category> 仿真模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统仿真笔记（四）离散事件系统模型</title>
      <link href="/post/System-Simulation-4/"/>
      <url>/post/System-Simulation-4/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>之前内容请回顾：<a href="/post/System-Simulation-3/">系统仿真笔记（三）离散事件系统仿真基础</a></p><p>本节笔记主要介绍离散事件系统的主要理论模型，如：排队模型、库存模型、Petri网模型、实体流图模型、活动循环图法和网络计划法。</p><h1 id="一、排队模型"><a href="#一、排队模型" class="headerlink" title="一、排队模型"></a>一、排队模型</h1><p>排队模型在之前的《系统工程原理》课中有涉及到一些。</p><h2 id="1-1排队模型的构成"><a href="#1-1排队模型的构成" class="headerlink" title="1.1排队模型的构成"></a>1.1排队模型的构成</h2><p>排队模型是研究排队的规律，大都用于随机服务系统中。由于在生产、经济、社会活动中许多问题都可以转化为排队问题,因此排队模型涉及范围十分广泛。排队系统解决的主要是服务与被服务的问题，是仿真的主要应用领域。排队模型的例子如下表所示。</p><div class="table-container"><table><thead><tr><th><strong>系统（System）</strong></th><th><strong>顾客（Customers）</strong></th><th><strong>服务台（Servers）</strong></th></tr></thead><tbody><tr><td><strong>银行</strong></td><td><strong>顾客</strong></td><td><strong>窗口</strong></td></tr><tr><td><strong>生产线系统</strong></td><td><strong>工件</strong></td><td><strong>机器</strong></td></tr><tr><td><strong>医院门诊</strong></td><td><strong>病人</strong></td><td><strong>医生</strong></td></tr><tr><td><strong>公路网络</strong></td><td><strong>汽车</strong></td><td><strong>交通灯</strong></td></tr><tr><td><strong>仓库</strong></td><td><strong>订单</strong></td><td><strong>订单分拣作业</strong></td></tr><tr><td><strong>飞机场</strong></td><td><strong>飞机</strong></td><td><strong>跑道</strong></td></tr><tr><td><strong>计算机系统</strong></td><td><strong>任务（Jobs）</strong></td><td><strong>CPU，disk</strong></td></tr><tr><td><strong>停车场</strong></td><td><strong>汽车</strong></td><td><strong>车位</strong></td></tr><tr><td><strong>Ticket Office</strong></td><td><strong>Customers</strong></td><td><strong>Clerk</strong></td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/1.png" alt></p><h2 id="1-2排队模型的术语"><a href="#1-2排队模型的术语" class="headerlink" title="1.2排队模型的术语"></a>1.2排队模型的术语</h2><p>两个基本单元：<strong>顾客</strong>与<strong>服务台</strong></p><p>两种服务形式：<strong>顾客到达服务台</strong>与<strong>服务台到达顾客</strong></p><p>术语介绍：</p><h3 id="1）顾客总体-（The-calling-population）"><a href="#1）顾客总体-（The-calling-population）" class="headerlink" title="1）顾客总体 （The calling population）"></a>1）顾客总体 （The calling population）</h3><p>到达的顾客总数，可设为有限（finite）、无限(infinite)。</p><ul><li>对具有大量到达数量的顾客总体，可设其为无限顾客总体</li><li>有限或无限顾客总体的区别在于如何定义顾客的到达率（单位时间到达的平均数:arrival rate: the average number of arrivals per unit of time）</li><li>对无限顾客总体模型：到达率可设为均衡的（或称constant）</li><li>对有限顾客总体：到达率可设为不均衡的（从0到某个值之间变动）</li></ul><h3 id="2）系统容量-（Server-Capacity）"><a href="#2）系统容量-（Server-Capacity）" class="headerlink" title="2）系统容量 （Server Capacity）"></a>2）系统容量 （Server Capacity）</h3><p>在许多排队系统中，系统能容纳顾客的数量是有限的，称为<strong>系统容量</strong>。</p><p>系统容量有限时，到达率及有效到达率（单位时间到达并进入系统的平均数系统effective arrival rate: the number who arrive and enter the system per time unit）是有差异的，如：一些到达的顾客又离开了系统</p><h3 id="3）到达过程-（Arrival-Process）"><a href="#3）到达过程-（Arrival-Process）" class="headerlink" title="3）到达过程 （Arrival Process）"></a>3）到达过程 （Arrival Process）</h3><p>对<strong>无限顾客总体</strong>，到达过程以相继顾客到达的时间间隔来表征的。</p><p>随机时间到达：顾客以随机时间到达。</p><ul><li>时间间隔通常用随机分布表示。最重要的随机到达过程是<strong>泊松到达（Poisson Arrival）</strong></li><li>泊松到达用于餐馆、银行、电话服务中心、服务设施等的到达过程</li></ul><p>规定时间到达（scheduled arrival）：</p><ul><li>时间间隔通常用一个固定的时间或者一个固定的时间加上一个小的随机波动因素表示。如已经预约好的病人去看医生、飞机航班等。</li></ul><p>批量到达：对批量到达，可以是固定批量也可以是随机批量。</p><blockquote><p>《概率论与数理统计》中学过泊松分布(Poisson)和指数分布(Exponential)，印象有些浅了，所以复习一下。</p><p><strong>泊松分布</strong>：</p><ul><li>概率分布函数： </li></ul><script type="math/tex; mode=display">P(X=n)=    \begin{cases}        \frac{\lambda^ne^{-\lambda}}{n!}, & \text{$\lambda>0,n=0,1,2...n$}\\        0,& \text{others}    \end{cases}</script><ul><li>累积分布函数：</li></ul><script type="math/tex; mode=display">F(X\leq n)=\displaystyle \sum_{i=0} \frac{e^{-\lambda}\lambda^i}{i!}</script><ul><li>平均值：</li></ul><script type="math/tex; mode=display">E(x)=\lambda</script><ul><li>方差：</li></ul><script type="math/tex; mode=display">D(x)=\lambda</script><p><strong>指数分布</strong>：</p><ul><li>概率密度函数：</li></ul><script type="math/tex; mode=display">f(x)=    \begin{cases}        \lambda e^{-\lambda x}, & \text{$x>0$}\\        0,& \text{$x<0$}    \end{cases}</script><p>概率分布函数：</p><script type="math/tex; mode=display">F(x)=    \begin{cases}        1-e^{-\lambda x}, & \text{$x>0$}\\        0,& \text{$x<0$}    \end{cases}</script><p>平均值：</p><script type="math/tex; mode=display">E(x)=\frac{1}{\lambda}</script><p>方差：</p><script type="math/tex; mode=display">D(x)=\frac{1}{\lambda^2}</script></blockquote><p><strong>泊松到达过程：</strong></p><p>设：</p><p>$S_n$ ：第n个顾客到达系统的时间，$s_0=0$</p><p>$A_n$ ：顾客n和n-1之间的到达时间间隔，</p><script type="math/tex; mode=display">A_n=S_n-S_{n-1}</script><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/2.png" alt></p><p>若$N(t)$为时间间隔$[0,t)$内到达的顾客数$（t&gt;0）$，则$N(t)$为随机变量，且 <strong>{</strong>$\{N(t)|t \in (0,T) \}$<strong>}</strong> 为一随机过程。该过程有：</p><p><strong>（1）</strong>对任意n个参数<script type="math/tex">(t_n>t_{n-1}>t_{n-2}>…>t_1 )≥0</script>，增量<script type="math/tex">N(t_2) -N(t_1)</script>， <script type="math/tex">N(t_3) -N(t_2)</script>，<script type="math/tex">…</script> ， <script type="math/tex">N(t_n) -N(t_{n-1})</script>分别为时间区间<script type="math/tex">[0,t_1),[t_1,t_2),…[t_{n-2,tn-1}), [t_{n-1} ,t_n)</script>区间内到达的顾客数；</p><p><strong>（2）</strong>在时间区间$[t,t+∆t]$内，到达k或k个以上顾客的概率为：</p><script type="math/tex; mode=display">P_k(t,t+∆t)=P[(N(t+∆t)-N(t))=k]=\displaystyle \sum_{k=2}^{∞}P_k(t,t+∆t)</script><p>若该过程满足下列条件：</p><ol><li>对任意不同的区间，顾客到达数相互独立；</li><li>在时间区间$[t,t+∆t]$内，$N(t +∆t) -N(t)$只与区间长度$∆$t有关，与区间起点$t$无关；</li><li>★★★对充分小的时间区间$[t,t+∆t]$，$N(t)≥2$的概率极小，可以忽略不计。</li></ol><p>则认为顾客到达的过程为泊松到达过程，有：</p><script type="math/tex; mode=display">P[N(t)=n]=\frac{(\lambda t)^n}{n!}e^{-\lambda t},n=0,1,2,...,t>0</script><script type="math/tex; mode=display">E[N(t)]=\lambda t \\ D[N(t)=\lambda t]</script><blockquote><p>定理：在排队系统中，如果到达的顾客数服从以$λ$为参数的泊松分布，则顾客相继到达的时间间隔$A_n$服从以$λ$为参数的指数分布（此时，到达率是每单位时间到达$λ$个顾客）。</p></blockquote><p>对任意时间$s , t, s&lt;t,  N(s,t) = N(t) - N(s)$ 表示在时间间隔$[s,t]$内到达的顾客数，则$N(s,t)$服从参数为$λ(t-s)$的泊松分布。对$n=0,1,2,…,$有</p><script type="math/tex; mode=display">P[N(s,t)=n]=\frac{[\lambda(t-s)]^n}{n!}e^{-\lambda(t-s)}</script><p>此概率分布的均值和方差为</p><script type="math/tex; mode=display">𝐸[𝑁(𝑡)−𝑁(𝑠)]=𝜆(𝑡−𝑠)\\D[𝑁(𝑡)−𝑁(𝑠)]=𝜆(𝑡−𝑠)</script><p>一般，在模拟过程中，需要发生在$[0, t]$间隔内第一个到达的实体作为仿真中的下一个产生的实体。可以得出：</p><script type="math/tex; mode=display">𝑃(𝐴_1≤𝑡)=1−𝑒^{−𝜆𝑡}</script><ul><li>这里，$A1$具有$E(A_1)=1/λ$的指数分布;</li><li>这里，$A1,A2,…$具有$E(A_1)=1/λ$的指数分布并互相独立。</li></ul><p><strong>这是一个例子，大学卫生所的病人到达时间</strong>：</p><p>问题描述：</p><ul><li><p>某大学卫生所，设病人到达符合泊松到达，到达的间隔时间平均值为2.4分钟或每小时到达25人 。</p></li><li><p>到达率：</p></li></ul><p>每单位时间（分钟）的到达率$λ=1/2.4 = 0.4167$</p><ul><li>该到达的指数分布表示式为:</li></ul><script type="math/tex; mode=display">𝑓(𝑡)=0.4167𝑒^{−0.4167𝑡},𝑡≥0 \\ 𝐹(𝑡)=1−𝑒^{−0.4167𝑡},𝑡≥0</script><ul><li>如果有一位病人已经到达，则在未来5分内再来一位病人的概率：</li></ul><script type="math/tex; mode=display">𝐹(5)=1−𝑒^{−0.4167×5}=1−0.124=0.876</script><h3 id="4）排队规则（Queue-Discipline-or-Rule）"><a href="#4）排队规则（Queue-Discipline-or-Rule）" class="headerlink" title="4）排队规则（Queue Discipline or Rule）"></a>4）排队规则（Queue Discipline or Rule）</h3><ul><li><p>排队过程是顾客在队列中等待服务开始的活动。顾客可能的选择为：</p><ul><li><p>离开系统（leave a too long queue, balk）</p></li><li><p>离开队列（leave a too slow queue, renege）</p></li><li><p>转移队列（move from one slow line to another, jockey）</p></li></ul></li><li><p>排队规则是顾客在队列中等待服务开始的逻辑次序，它决定当服务员空闲时哪一个顾客被选择接受服务。常用的排队规则有：先进先出first-in-first-out（FIFO）、后进先出last-in-first-out （LIFO）、随机服务（SIRO）、最短处理时间服务shorest processing time first （SPT）、按优先级服务service according to priority（PR）。</p></li></ul><h3 id="5）服务时间和服务设施（Service-Times-and-Service-Mechanism）"><a href="#5）服务时间和服务设施（Service-Times-and-Service-Mechanism）" class="headerlink" title="5）服务时间和服务设施（Service Times and Service Mechanism）"></a>5）服务时间和服务设施（Service Times and Service Mechanism）</h3><p>包括服务时间、服务结构。</p><ul><li>服务时间：为固定时间或随机时间。随机服务时间的分布有：指数、爱尔朗、正态、韦布尔、伽玛等。</li><li>服务结构：指服务台的组成情况。如多服务台、并行服务台、网络服务台等。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/3.png" alt></p><p>服务台串联布置：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/6.png" alt="6"></p><p>服务台并联布置：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/5.png" alt="5"></p><p>服务台混合布置：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/4.png" alt></p><h3 id="6）排队模型的标注方法"><a href="#6）排队模型的标注方法" class="headerlink" title="6）排队模型的标注方法"></a>6）排队模型的标注方法</h3><p>Kendall（1953）提出了一个平行排队系统的描述方法，1971年扩充为如下符号标准。</p><blockquote><p>X/Y/Z/A/B/C</p></blockquote><ul><li>X：到达间隔时间分布（interval-time distribution）</li><li>Y：服务时间分布（service-time distribution）</li><li>对X、Y，包括：M—泊松到达过程，D—固定模式，Ek—k阶Erlang模式，G—任意型或一般独立型。<br>Z：并行服务台的数目（the number of parallel servers）</li><li>A：系统容量（system capacity）</li><li>B：顾客的容量（size of calling population）</li><li>C：服务规则，如FCFS, LCFS</li></ul><blockquote><p>例：M/M/1/∞/ ∞/FCFS ：泊松到达，服务时间指数分布、单服务台、队列能力无限，潜在到达顾客无限，先到先服务。</p><p>该排队系统可简写为：M/M/1。</p></blockquote><h2 id="1-3排队系统的性能及其测度"><a href="#1-3排队系统的性能及其测度" class="headerlink" title="1.3排队系统的性能及其测度"></a>1.3排队系统的性能及其测度</h2><h3 id="（1）排队系统的稳态特性和瞬态特性"><a href="#（1）排队系统的稳态特性和瞬态特性" class="headerlink" title="（1）排队系统的稳态特性和瞬态特性"></a>（1）排队系统的稳态特性和瞬态特性</h3><p>排队系统的特性从稳态和瞬态两个方面衡量。</p><ul><li>稳态性能（long-run measures of performance）是指系统在足够长的时间后，处于稳定状态时系统的性能状态的概率</li><li>瞬态概率（steady-state measures of performance）是指系统在时间t，系统处于某种性能状态的概率。</li></ul><p>排队系统在运行的初期阶段，各项指标受初始条件的影响较显著，这一阶段为过渡阶段（瞬态阶段）。但在足够长的运行时间后，系统处于稳定状态时，各项指标不再与时间t有关。</p><p>在系统分析中，人们更关心系统的稳态特性。</p><h3 id="1-3-2排队系统的评价指标"><a href="#1-3-2排队系统的评价指标" class="headerlink" title="1.3.2排队系统的评价指标"></a>1.3.2排队系统的评价指标</h3><div class="table-container"><table><thead><tr><th><strong>指标</strong></th><th><strong>定义</strong></th><th><strong>意义</strong></th></tr></thead><tbody><tr><td><strong>系统队长</strong></td><td><strong>系统中的平均顾客数（排队等待的顾客和正在接受服务的顾客之和），系统中顾客的期望值。</strong></td><td><strong>顾客和服务机构都关心，与系统空间是否合理有关。</strong></td></tr><tr><td><strong>排队长度</strong></td><td><strong>系统中排队等待服务的顾客的平均数。</strong></td><td><strong>顾客和服务机构都关心，与系统空间是否合理有关。</strong></td></tr><tr><td><strong>逗留时间</strong></td><td><strong>顾客到达系统时刻起到结束服务止的平均时间长度。</strong></td><td><strong>顾客最为关心，反映了系统的服务水平。</strong></td></tr><tr><td><strong>等待时间</strong></td><td><strong>顾客到达系统时刻起到开始接受服务止的平均时间长度；</strong></td><td><strong>顾客最为关心，反映了系统的服务水平。</strong></td></tr><tr><td><strong>忙期</strong></td><td><strong>服务机构连续忙碌的时间；</strong></td><td><strong>服务机构关心，它与系统的服务强度有关。</strong></td></tr><tr><td><strong>闲期</strong></td><td><strong>服务机构连续空闲的时间。</strong></td><td><strong>服务机构关心，它与系统的服务强度有关。</strong></td></tr></tbody></table></div><h3 id="1-3-3系统中的顾客数L"><a href="#1-3-3系统中的顾客数L" class="headerlink" title="1.3.3系统中的顾客数L"></a>1.3.3系统中的顾客数L</h3><p>设时刻$t$系统中的顾客数（系统队长）为$L(t)$，则系统中的平均顾客数定义为（time-weighted-average number in a system）：</p><script type="math/tex; mode=display">\hat{L} = \frac{1}{T}\displaystyle \sum_i^∞iT_i=\displaystyle \sum_{i=0}^∞\frac{T_i}{T}</script><script type="math/tex; mode=display">\hat{L} = \frac{1}{T}\displaystyle \sum_i^∞iT_i=\frac{1}{T}\int_0^TL(t)dt</script><p>设上式中时刻$T$足够长时，系统中的顾客数为$L(t)$趋近于某个极限值$L$，称为long-run time-average number in a system。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/7.png" alt></p><p>上图中可以求得：$L= (0(3)+1(12)+2(4)+3(1))/20 = 23/20 = 1.15$</p><h3 id="1-3-4顾客在系统中的逗留时间"><a href="#1-3-4顾客在系统中的逗留时间" class="headerlink" title="1.3.4顾客在系统中的逗留时间"></a>1.3.4顾客在系统中的逗留时间</h3><p>设时刻$[0,T]$，顾客$i$在系统中的逗留时间为$w_i$，则顾客在系统中的平均逗留时间定义为（average time spent in system per customer）：</p><script type="math/tex; mode=display">\hat{w}=\frac{1}{N}\displaystyle \sum_{i=1}^{N}w_i</script><p>设上式中时刻$N$足够多时，顾客在系统中的稳态平均逗留时间趋近于某个极限值$w$，称为long-run average time spent in system。</p><script type="math/tex; mode=display">\hat{w}_Q=\frac{1}{N}\displaystyle \sum_{i=1}^{N}w^Q_i</script><h3 id="1-3-5守恒方程式"><a href="#1-3-5守恒方程式" class="headerlink" title="1.3.5守恒方程式"></a>1.3.5守恒方程式</h3><p>对前述系统，其$L$，$w$，与顾客到达率$λ$的关系为：</p><script type="math/tex; mode=display">\hat{L}=\hat{\lambda}\hat{w}</script><p>推导如下：</p><script type="math/tex; mode=display">\displaystyle \sum_{i=1}^{N}w_i=\int_0^TL(t)dt\\\hat{L} = \frac{1}{T}\displaystyle \sum_i^∞iT_i=\frac{N}{T}\frac{1}{N}\displaystyle \sum_{I=1}^n w_i =\hat{\lambda}\hat{w}</script><p>当$T$足够长，$N$足够多时，上述关系如下：</p><script type="math/tex; mode=display">𝐿=𝜆𝑤</script><p>该关系称作<strong>守恒方程</strong>（Conservation Equation）</p><h3 id="1-3-6服务台利用率"><a href="#1-3-6服务台利用率" class="headerlink" title="1.3.6服务台利用率"></a>1.3.6服务台利用率</h3><p>设区间$[0,T]$的服务台利用率（server utilization）为$\hat{ρ}$，其稳态服务台利用率（long-run server utilization）为$ρ$，当$T$足够长，$N$足够多时，上述关系如下：</p><script type="math/tex; mode=display">\hat{L}=\hat{\lambda}\hat{w}</script><p><strong>顾客的逗留时间及服务台利用率(例子)：</strong></p><p>本例中，可以求得：$ρ= 忙期/总时间=(\displaystyle \sum_{i=1}^{∞}T_i)/T=(T-T_0)/T=(20-3)/20=17/20$</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/8.png" alt></p><p><strong>G/G/1/∞/∞系统服务台利用率:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/9.png" alt></p><p><strong>G/G/c/∞/∞系统服务台利用率:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/10.png" alt></p><h2 id="1-4-M-M-1模型"><a href="#1-4-M-M-1模型" class="headerlink" title="1.4 M/M/1模型"></a>1.4 M/M/1模型</h2><p>顾客到达模式：平稳泊松到达</p><p>在t时刻到达$n$个顾客的概率 $P_n(t)=\frac{(\lambda t)^n}{n!}e^{-\lambda t}(n=1,2,3,…)$</p><p>两个顾客到达的时间间隔$t$的概率密度函数$f_A (t)=λe^{-λt}$</p><p>服务模式：指数服务模式，$f_s(t)=ue^{-ut}$</p><p>性能指标：</p><p>模型满足条件：</p><p>归一化条件：$\displaystyle \sum_{i=0}^{∞}p_n=1$ 其中$p_n$—顾客数为n的稳态概率</p><p>参数条件：$ρ=(λ/μ)&lt;1$ 其中</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/11.png" alt="11"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/12.png" alt="12"></p><h2 id="1-5-Jackon排队网络"><a href="#1-5-Jackon排队网络" class="headerlink" title="1.5 Jackon排队网络"></a>1.5 Jackon排队网络</h2><h3 id="1-5-1-Jackon开环排队网络"><a href="#1-5-1-Jackon开环排队网络" class="headerlink" title="1.5.1 Jackon开环排队网络"></a>1.5.1 Jackon开环排队网络</h3><p>M/M/1和M/M/c都属于单服务中心的排队模型。</p><p>多个具有M/M/c的特性的服务中心组成的网络称为Jackon排队网络。</p><p>Jackon排队网络：开环排队网络、闭环排队网络</p><p>Jackon开环排队网络的属性：</p><ul><li>网络中有M个服务中心，每个服务中心为M/M/c系统</li><li>对第i个服务中心，顾客的到达和服务是彼此独立的</li><li>所有的服务规则是FIFO</li><li>顾客在第i个服务中心接受服务后，或者以概率pij转移到第j个服务中心，或者以概率pi0离开系统</li><li>每个服务中心的缓冲容量无限制，即系统不会发生堵塞现象</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/13.png" alt></p><h3 id="1-5-2-Jackon闭环排队网络"><a href="#1-5-2-Jackon闭环排队网络" class="headerlink" title="1.5.2  Jackon闭环排队网络"></a>1.5.2  Jackon闭环排队网络</h3><p>Jackon闭环排队网络是Jackon开环排队网络的特例，在Jackon开环排队网络中，如果没有输入、输出，就变成Jackon闭环排队网络。</p><p>Jackon闭环排队网络的属性：</p><ul><li>Jackon闭环网络中，顾客总人数N保持恒定不变</li><li>各服务中心的顾客数概率分布不再是独立的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/14.png" alt></p><h2 id="1-6-排队系统的仿真分析方法"><a href="#1-6-排队系统的仿真分析方法" class="headerlink" title="1.6 排队系统的仿真分析方法"></a>1.6 排队系统的仿真分析方法</h2><p>排队网络模型的一个主要优点是：可以得到解析形式的解。但有一个很大的局限性：对系统中的随机特性有比较严格的要求，如：平稳、独立、各态经历等，且随机变量仅仅限于几类典型的随机分布。因此，难于用于一些实际的离散事件系统建模。</p><p>对于复杂、随机的实际排队系统，利用模拟仿真可以研究实际系统性能的较好的方法。可以得到一个包含随机误差的估计。</p><h1 id="二、储存模型"><a href="#二、储存模型" class="headerlink" title="二、储存模型"></a>二、储存模型</h1><p>存储系统是实际生活中常见的系统。对许多存储系统，模拟被认为是唯一的分析方法。一个简单的存储系统如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/15.png" alt></p><h2 id="2-1-储存模型的构成"><a href="#2-1-储存模型的构成" class="headerlink" title="2.1 储存模型的构成"></a>2.1 储存模型的构成</h2><h3 id="2-1-1-存储模型的五个基本要素"><a href="#2-1-1-存储模型的五个基本要素" class="headerlink" title="2.1.1 存储模型的五个基本要素"></a>2.1.1 存储模型的五个基本要素</h3><p>1）存储系统的目标</p><ul><li>利润极大化</li><li>费用极小化（如何使库存总成本最低，是库存决策的主要目标）。</li></ul><p>2）存储系统的费用组成(Cost)</p><ul><li>物品费用：购买物资花费的成本。</li><li>订货采购费用：订货时发生的各种费用。</li><li>存储保管费用：物资在库存过程中发生的成本。</li><li>缺货费用：无法满足用户的需求而产生的损失。</li><li>在需求确定的前提下，增大每次订货批量有利于减低订货成本、购置成本、缺货成本，但由于库存量的增加常常导致保管成本的上升。 </li></ul><p>3）需求(Demand)：存储系统的输出（需求率）</p><p>4）补货量或订货量：存储系统的输入（补货量，订货量）</p><p>5）存储策略：周期检查策略，连续检查策略</p><h3 id="2-1-2-存储策略1：周期检查策略"><a href="#2-1-2-存储策略1：周期检查策略" class="headerlink" title="2.1.2 存储策略1：周期检查策略"></a>2.1.2 存储策略1：周期检查策略</h3><p>将一段时间分为N个观察周期，则存储水平的观察分散在这N个离散点上。在每一个N时间周期内，检查存储状态$I_j$，如其在订货点L或以下，则进行订货试库存达到目标水平M，在第$j$个观察点上的订货量$Q_j$的确定方法为：</p><script type="math/tex; mode=display">𝑄_𝑗=\begin{cases}        M-I_j, & \text{$I_j≤L$}\\        0,& \text{$I_j>L$}    \end{cases}</script><p>得出的三参数策略表示为周期检查策略或(M, L, N)策略。</p><p>下面是周期检查 (M, L, N)策略下库存变化示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/16.png" alt="16"></p><h3 id="2-1-3-存储策略2：连续检查策略"><a href="#2-1-3-存储策略2：连续检查策略" class="headerlink" title="2.1.3 存储策略2：连续检查策略"></a>2.1.3 存储策略2：连续检查策略</h3><p>在所有时间监视库存量并当存储水平达到某个规定点时，发出订货请求。</p><p>连续检查 (M, L)策略：在任何时间t，当库存量I(t)降到订货点L或以下时，则发出订货单位为Q(t)=M－I(t) 的订货。</p><p>连续检查 (Q, L)策略或固定的订货策略：如果物品是每次需要固定件，则订货量Q=M－L。于是，每当存储水平达到L单位时，做一次Q件物品的订货。</p><p>下面来看一下连续检查连续检查 (M, L)策略下库存变化的示意图</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/17.png" alt="17"></p><h2 id="2-2-确定性存储系统与EOQ模型"><a href="#2-2-确定性存储系统与EOQ模型" class="headerlink" title="2.2 确定性存储系统与EOQ模型"></a>2.2 确定性存储系统与EOQ模型</h2><p>确定性系统模型考虑需求和提前期已知的情况，它是理解其它复杂模型的基础。</p><h3 id="2-2-1-没有缺货和零提前期的经济批量（EOQ）模型"><a href="#2-2-1-没有缺货和零提前期的经济批量（EOQ）模型" class="headerlink" title="2.2.1 没有缺货和零提前期的经济批量（EOQ）模型"></a>2.2.1 没有缺货和零提前期的经济批量（EOQ）模型</h3><p>模型假设：无缺货费用，每周期的总可变费用</p><p>$C_T=订货采购费用C_p+存储费用C_H$ 。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/18.png" alt="18"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/19.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/20.png" alt></p><h3 id="2-2-2-具有确定性提前期的EOQ模型"><a href="#2-2-2-具有确定性提前期的EOQ模型" class="headerlink" title="2.2.2 具有确定性提前期的EOQ模型"></a>2.2.2 具有确定性提前期的EOQ模型</h3><p>模型的描述</p><ul><li>此模型的最优订货量和零提前期的EOQ模型相同。</li><li><p>追加一个决策变量：最优订货水平。</p></li><li><p>最优订货水平：</p></li><li>其中，D—每周期的需求量，T—订货提前期。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/21.png" alt></p><p>模型假设：缺货费用为$C_S$，每周期的总可变费用$C_T  = 订货采购费用C_P + 存储费用C_H + 每周期的缺货费用C_S$</p><p>于是，$C_T = C_P + C_H + C_S$</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/22.png" alt></p><h3 id="2-2-3-具有延期交货和确定性提前期的EOQ模型"><a href="#2-2-3-具有延期交货和确定性提前期的EOQ模型" class="headerlink" title="2.2.3 具有延期交货和确定性提前期的EOQ模型"></a>2.2.3 具有延期交货和确定性提前期的EOQ模型</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/23.png" alt></p><h2 id="2-3-概率型存储系统"><a href="#2-3-概率型存储系统" class="headerlink" title="2.3 概率型存储系统"></a>2.3 概率型存储系统</h2><h3 id="2-3-1-概述"><a href="#2-3-1-概述" class="headerlink" title="2.3.1 概述"></a>2.3.1 概述</h3><p>实际的存储系统中，需求和订货提前期往往是随机变量，这就需要反映此不确定性环境的基础。<br>主要有三种形式的模型：</p><ul><li>单周期模型：需求出现在时间的某一点，没有补充订货。</li><li>允许延期交货的周期性检查模型：需要确定最优周期长度以及目标存储（本文从略）。</li><li>允许延期交货的连续检查模型：每笔业务后监控存储水平，若存储水平下降到订货点以下时，就发出规定数量的订货（本文从略） 。</li></ul><h3 id="2-3-2-单周期概率型存储模型"><a href="#2-3-2-单周期概率型存储模型" class="headerlink" title="2.3.2 单周期概率型存储模型"></a>2.3.2 单周期概率型存储模型</h3><h4 id="模型的背景"><a href="#模型的背景" class="headerlink" title="模型的背景"></a>模型的背景</h4><p>单周期库存模型又称单订货模型，模型假定周期末库存货物对下一个周期没有任何价值。这个问题还称为报童问题(newsboy problem)或报贩问题(newsvendor problem )，因为报童手中今天的报纸若卖不完明天就没有用了。</p><p>该模型研究的是仅有一次机会存贮起来以供需求的产品，例如海产、山货、时装、生鲜食品和报纸等短销售周期产品。换句话说，它是由于产品的特殊性质或需求的特殊情况，以致产品不能存贮的一类问题.</p><h4 id="经典报童问题的描述"><a href="#经典报童问题的描述" class="headerlink" title="经典报童问题的描述"></a>经典报童问题的描述</h4><p>一位报童从报刊发行处订报后零售，每卖出一份可获利a元，若订报后卖不出去，则退回发行处，每份将要赔钱b元。那么报童如何根据以往的卖报情况（每天报纸的需求量为份的概率为）来推算出每天收益达到最大的订报量？ </p><p>经典报童问题即单周期库存问题,研究的是面对随机需求量,零售商应该订购多少产品以获得最大的利润。</p><p>报童需决策的问题是一个关于订购量最优化的问题，优化问题的目标函数等于每天收入的期望。因此，需要考虑供过于求和供不应求的两种情况。 </p><h4 id="模型的基本假设"><a href="#模型的基本假设" class="headerlink" title="模型的基本假设"></a>模型的基本假设</h4><p>设在整个需求期内只订购一次货物，订货量为Q，订购费和初始库存量均为0，每单位产品的购价（成本）为C。</p><p>需求量X为唯一连续型随机变量，其概率密度为$f(x)$ 。当货物售出时，每单位产品的售价为U。<br>需求结束时，没有卖出的货物不存储而是折价出售，单位售价是V（V&lt;U)。<br>试求订购量Q ，以使期望利润最大。</p><h4 id="模型的求解"><a href="#模型的求解" class="headerlink" title="模型的求解"></a>模型的求解</h4><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/24.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/25.png" alt></p><p>下面再来个例题加深一下理解：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/26.png" alt></p><h3 id="2-3-3-存储系统的仿真分析"><a href="#2-3-3-存储系统的仿真分析" class="headerlink" title="2.3.3 存储系统的仿真分析"></a>2.3.3 存储系统的仿真分析</h3><p>在前述的模型中，概率需求的(M,N)模型和概率需求的(Q,L)模型和实际的存储系统中最接近。</p><p>这里虽然说明了数学求解的方法，但由于实际的存储系统的动态性和不稳定性，使得这些模型中直接得到的策略是不正确的。于是，模拟仿真成为研究实际策略的一种方法。</p><p> (M,L)策略在实际中经常发现，但策略变量通常是任意的，(M,L)策略的推导比较困难，于是，模拟仿真成为较好的方法。</p><h1 id="三、Petri网模型"><a href="#三、Petri网模型" class="headerlink" title="三、Petri网模型"></a>三、Petri网模型</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>Petri网（Petri Net）是德国人Carl Adam Petri（1926-2010）于1962年提出的离散分布并行系统或称离散事件动态系统（Discrete Event Dynamic System，DEDS ）的表示方法。</p><p>Petri网模型既有严格的形式化数学表述方式，也有直观的图形表达方式。由于Petri网能表达并发的事件，被认为是自动化理论的一种。研究领域趋向认为Petri网是所有流程定义语言之母。</p><p>Petri网模型和以此模型为基础发展出来的网论（net theory）在软件设计（尤其是模型驱动设计）、工作流管理、流程控制、协议验证、机械工程等领域都有广泛应用。 </p><h2 id="3-2-经典Petri网定义"><a href="#3-2-经典Petri网定义" class="headerlink" title="3.2 经典Petri网定义"></a>3.2 经典Petri网定义</h2><h3 id="3-2-1基本概念"><a href="#3-2-1基本概念" class="headerlink" title="3.2.1基本概念"></a>3.2.1基本概念</h3><p>经典的Petri网是简单的过程模型，由两种节点：库所（place）和变迁（transition）、有向弧以及令牌（token）等元素组成的。 </p><p>（1）库所(Place)：既状态元素，表示一个存放一定资源的场所；用圆形节点表示。</p><p>（2）变迁（Transition）：资源的消耗及对应状态元素的变化；用方形节点表示。 </p><p>（3）有向弧（Arc）：是库所和变迁之间的有向连接；</p><p>（4）令牌（Token）：是库所中的动态对象，可以从一个库所移动到另一个库所。</p><blockquote><p>这里金淳将Token直译成了令牌，感觉翻译过来怪怪的，不过就叫它令牌吧。</p></blockquote><p>Petri网示例：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/27.png" alt></p><h3 id="3-2-2-Petri的规则和行为"><a href="#3-2-2-Petri的规则和行为" class="headerlink" title="3.2.2 Petri的规则和行为"></a>3.2.2 Petri的规则和行为</h3><p><strong>Petri网的规则：</strong></p><ul><li>有向弧是有方向的</li><li>两个库所或变迁之间不允许有弧</li><li>库所可以拥有任意数量的令牌</li></ul><p><strong>Petri网的行为：</strong></p><ul><li>如果一个变迁的每个输入库所（input place）都拥有令牌，该变迁即为被允许(enable)。一个变迁被允许时，变迁将发生(fire)，输入库所(input place)的令牌被消耗，同时为输出库所(output place)产生令牌。</li><li>变迁的发生是原子的</li><li>有两个变迁都被允许的可能，但是一次只能发生一个变迁</li><li>如果出现一个变迁，其输入库所的个数与输出库所的个数不相等，令牌的个数将发生变化 </li></ul><p><strong>行为示例：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/28.png" alt></p><h2 id="3-3-Petri网的形式化定义"><a href="#3-3-Petri网的形式化定义" class="headerlink" title="3.3 Petri网的形式化定义"></a>3.3 Petri网的形式化定义</h2><p>一个Petri网PN可表示为一个六元组，$P_N=（P, T, F, W, M, M_0）$</p><p>$P=\{p_1,…,p_m \}$，是有限库所（place）节点的集合，$m≥𝟎$</p><p>$T=\{t_1,…,t_n\}$，是有限变迁（transition）节点的集合，$m≥𝟎$</p><p>$P∩𝑻=∅$（P、T不相交），$P∪T =∅$ （P、T不同时为空） </p><p>$F∈(𝑷×𝑻)∪(𝑻×𝑷)$ ：F只存在于P与T之间，为有向弧，表示由一个P元素和一个T元素组成的有序偶集合，称为流关系。</p><p>$W$：$F→\{𝟏,𝟐,…\}$为有向弧的权函数</p><p>$M$：$𝐏→\{𝟏,𝟐,…\}$（集合P到非负整数的映射）为状态标识（marking），用令牌（token）表示</p><p>$M_0$：$𝐏→\{𝟏,𝟐,…\}$（集合P到非负整数的映射）为初始状态标识（initial marking）。</p><p>对$P_N$，用$N=（P, T, F, W）$表示Petri网的结构网（N, M）为标识网，为一个二元图</p><h3 id="3-3-1-Petri网的定义方法"><a href="#3-3-1-Petri网的定义方法" class="headerlink" title="3.3.1 Petri网的定义方法"></a>3.3.1 Petri网的定义方法</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/29.png" alt></p><h3 id="3-3-2-Petri网的建模"><a href="#3-3-2-Petri网的建模" class="headerlink" title="3.3.2 Petri网的建模"></a>3.3.2 Petri网的建模</h3><p>用Petri网对一个离散事件系统建模，需要做如下抽象化处理：</p><ul><li>库所：表示系统资源、活动；</li><li>变迁：代表事件；</li><li>令牌：表示实体及其状态（人，货物，机器，信息，条件）；</li><li>弧：系统的流程。</li><li>发火（fire）：代表事件的生成。</li></ul><h3 id="3-3-3-Petri网建模示例"><a href="#3-3-3-Petri网建模示例" class="headerlink" title="3.3.3  Petri网建模示例"></a>3.3.3  Petri网建模示例</h3><p>一个由2台机器组成的工件加工系统。工件J依次由机器M1、M2加工， M1、M2之间无缓冲区。初始状态为：有1个待加工工件，机器M1、M2均为空闲。</p><p>试用Petri网建立该系统的模型。</p><ul><li>库所：J在机器M1、M2的加工活动定义为p1、p2，将机器M1、M2以及工件J定义为p3、p4、p5。</li><li>变迁：J在机器M1、M2加工的开始事件定义为变迁t1、t2，在机器M2加工的结束事件定义为变迁t3。由于M1、M2之间无缓从区，因此无需定义工件J在M1的加工结束事件。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/30.png" alt></p><p>初始状态：$M0=[M0(p1), M0(p2), ), M0(p3), M0(p4), M0(p5)]=[0,0,1,1,1]$</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/31.png" alt></p><h2 id="3-4-高级Petri网"><a href="#3-4-高级Petri网" class="headerlink" title="3.4 高级Petri网"></a>3.4 高级Petri网</h2><h3 id="3-4-1经典Petri网的局限性"><a href="#3-4-1经典Petri网的局限性" class="headerlink" title="3.4.1经典Petri网的局限性"></a>3.4.1经典Petri网的局限性</h3><ul><li>没有测试库所中零 </li><li>模型容易变得很庞大 </li><li>模型不能反映时间方面的内容 </li><li>不支持构造大规模模型，如自顶向下或自底向上 </li></ul><h3 id="3-4-2高级Petri网："><a href="#3-4-2高级Petri网：" class="headerlink" title="3.4.2高级Petri网："></a>3.4.2高级Petri网：</h3><ul><li>令牌着色：令牌具有属性</li><li>时间：变迁有延迟时间</li><li>层次化：一个变迁可以是一个子Petri网</li><li>时序：增加时序逻辑的定义，更好的描述行为过程。</li></ul><h3 id="3-4-3-Petri网的流关系图"><a href="#3-4-3-Petri网的流关系图" class="headerlink" title="3.4.3 Petri网的流关系图"></a>3.4.3 Petri网的流关系图</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/32.png" alt></p><h3 id="3-4-4-Petri网的特点"><a href="#3-4-4-Petri网的特点" class="headerlink" title="3.4.4 Petri网的特点"></a>3.4.4 Petri网的特点</h3><p>（1）能很好地表达离散事件动态系统（DEDS）建模中常遇到的平行、同步、冲突和因果依赖等关系；</p><p>（2）为系统的形式化分析提供了良好的条件；</p><p>（3）用图形进行形象化描述，提高了模型的可读性；</p><p>（4）可以方便地建立层次化Petri网模型；</p><p>（5）与系统结构关系密切，可描述信息流与物流，易于在控制模型基础上直接实现控制系统。</p><h2 id="3-5-Petri网性能分析"><a href="#3-5-Petri网性能分析" class="headerlink" title="3.5 Petri网性能分析"></a>3.5 Petri网性能分析</h2><p>Petri网主要从逻辑角度分析离散事件系统的结构、行为和参数是否满足预期的逻辑关系。</p><p>Petri网的主要指标有：</p><ul><li>可达性（Reachability）：Token可以达到表示的状态。分析方法：基于图的可达树法，矩阵方程分析法 </li><li>有界性和安全性：</li><li>有界性：对任一个$pi$，token数$𝐌(𝐩𝐢)≤K$（有限整数）（有限阻塞）</li><li>安全性：对任一个$pi$，token数$𝐌(𝐩𝐢)≤1$（有限整数）（无阻塞）</li><li>活性（liveness）：对某一$t$，可以找到一个发射序列</li><li>死锁与陷阱（deadlock and trap）：死锁是某一变迁节点t，t都不可以发射；陷阱是对某一$p$，始终有token，输出也是输入。</li><li>冲突（conflict）：多个变迁节点同时具有发射权，但其输入库所节点为共享，使得一个发射导致另一个不能发射。 </li></ul><h2 id="3-6-Petri网建模的适用性"><a href="#3-6-Petri网建模的适用性" class="headerlink" title="3.6 Petri网建模的适用性"></a>3.6 Petri网建模的适用性</h2><p>Petri网是一种基于逻辑层次的离散事件系统模型。</p><p>分析方法：基于图的可达树法，矩阵方程分析法 </p><p>Petri网是基于状态描述的，对于大规模离散事件系统来说，其模型的规模十分庞大，会产生“维数灾”问题。</p><p>对实际复杂系统：普通Pertri网难以完整建模。</p><p>对于Petri网模型，往往将其转换为仿真模型。</p><p>对于大规模离散事件系统，一般不适于Petri网模型。</p><h1 id="四、实体流图法"><a href="#四、实体流图法" class="headerlink" title="四、实体流图法"></a>四、实体流图法</h1><p>实体流图法（Entity Flow Chart, EFC）采用与计算机流程图近似的方法表示临时实体的活动过程，相对来说比较简单。来看一下之前举的例子，理发店的活动流程图</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/33.png" alt></p><h1 id="五、活动循环图法"><a href="#五、活动循环图法" class="headerlink" title="五、活动循环图法"></a>五、活动循环图法</h1><p>活动循环图法（activity cycle diagram, ACD）以直观的方式描述系统的活动过程。</p><p>基本原则</p><ol><li>交替原则：寂静、激活两种状态交替出现</li><li>闭合原则：每类实体的活动周期图都是闭合的</li></ol><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/34.png" alt></p><h1 id="六、网络计划方法"><a href="#六、网络计划方法" class="headerlink" title="六、网络计划方法"></a>六、网络计划方法</h1><p>网络计划方法是利用网络图表达计划任务的进度安排及其各项作业之间的相互关系，进而对网络图分析并计算网络图时间值，确定关键工序及关键路线，求出工期，并运用一定的技术组织优化方案的方法。</p><p>网络计划方法有如下几种类型：</p><div class="table-container"><table><thead><tr><th><strong>No</strong></th><th><strong>名称</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>节点式网络图AON（Activity-On-Node  Network）</strong></td><td><strong>节点表示活动（Activity），箭线表示事件（Event）</strong></td></tr><tr><td><strong>2</strong></td><td><strong>决策关键线路法DCPM</strong></td><td><strong>在模型中引入决策节点</strong></td></tr><tr><td><strong>3</strong></td><td><strong>综合网络技术模型GNA</strong></td><td><strong>引入概率节点或概率边线</strong></td></tr><tr><td><strong>4</strong></td><td><strong>随机网络模型GERT</strong></td><td><strong>GNA的发展。各参数都可具有随机性</strong></td></tr><tr><td><strong>5</strong></td><td><strong>关键路径法计划评审技术CPM/PERT</strong></td><td><strong>只能表示前面活动结束后，后面的活动才能开始这一类项目</strong></td></tr><tr><td><strong>6</strong></td><td><strong>风险审技术VERT</strong></td><td><strong>在模型中引入数学表达式</strong></td></tr></tbody></table></div><p>网络计划方法是用“图”建模。</p><script type="math/tex; mode=display">G = （V，E）</script><p>$V(G)$：顶点Vertex集合，$E(G)$:有向边Edge集合</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/35.png" alt></p><p>V1到V2的边称为弧。$V1$：弧的尾，$V2$：弧的头，数值：权</p><p>路径（Path）：$V1,V2,V3,…Vn-1,Vn$，则顶点序列$（ V1,V2,V3,…Vn-1,Vn ）$为$V1$到$Vn$的路径</p><p>度：与每个顶点相连的边数</p><p><strong>网络图举例:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-4/36.png" alt></p><ul><li>网络图由箭线、节点和结点与箭线连成的路径组成;</li><li>箭线（矢线）：每一条箭线代表一项活动或工作（Activity）;</li><li>节点（事项）：结点代表活动的开始和结束;</li><li>路径（通路）：从网络图的始点事项开始到终点事项为止，由一系列首尾相连的箭线和结点所代表的活动和事项所组成的通道。</li></ul><h1 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h1><p>介绍离散事件系统的主要理论模型，如：排队模型、库存模型、Petri网模型、实体流图模型、活动循环图法和网络计划法。</p>]]></content>
      
      
      <categories>
          
          <category> 仿真模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>港口建设投资项目经济评价系统V1.0</title>
      <link href="/post/software-1-dut-1/"/>
      <url>/post/software-1-dut-1/</url>
      
        <content type="html"><![CDATA[<p>《港口行业建设项目经济评价系统V1.0》是针对投资项目进行经济评价的辅助工具，适用于港口等行业，严格按照建设部与国家发展改革委颁发的《建设项目经济评价方法与参数（第三版）》的内容及国家现行的财税制度编制、开发。</p><h1 id="1、软件著作权"><a href="#1、软件著作权" class="headerlink" title="1、软件著作权"></a>1、软件著作权</h1><p>港口建设投资项目经济评价系统V1.0 (登记号: 2020SR0034750)</p><h1 id="2、软件架构"><a href="#2、软件架构" class="headerlink" title="2、软件架构"></a>2、软件架构</h1><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/software-1-dut-1/3.png" alt="3"></p><h1 id="3、软件主页面"><a href="#3、软件主页面" class="headerlink" title="3、软件主页面"></a>3、软件主页面</h1><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/software-1-dut-1/1.png" alt="1"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/software-1-dut-1/2.png" alt="2"></p><h1 id="4、开发及使用环境"><a href="#4、开发及使用环境" class="headerlink" title="4、开发及使用环境"></a>4、开发及使用环境</h1><p>开发语言：Visual Basic 6.0；</p><p>支持系统： Windows 7及以上版本；</p><p>硬件环境： Intel Pentium D或Core级处理芯片，主频1G以上，内存1G以上，建议2G，硬盘可用空间不低于50G；</p><p>软件环境： Microsoft Excel 2007及以上版本。</p><h1 id="5、软件主要功能"><a href="#5、软件主要功能" class="headerlink" title="5、软件主要功能"></a>5、软件主要功能</h1><h2 id="1-财务评价"><a href="#1-财务评价" class="headerlink" title="1 财务评价"></a>1 财务评价</h2><p>财务评价是根据国家现行财税制度和价格体系，分析计算项目的财务效益和费用，编制财务报表，计算财务指标，考察项目盈利能力、清偿能力等财务状况。<br>这部分功能是每个经济评价软件不可或缺的功能之一，通过计算用户输入的数据，将结果显示在财务评价结果工作簿中，以供用户决策。</p><h2 id="2-盈亏平衡分析"><a href="#2-盈亏平衡分析" class="headerlink" title="2 盈亏平衡分析"></a>2 盈亏平衡分析</h2><p>程序根据用户输入的数据自动进行盈亏平衡分析，并以图表的形式显示在盈亏平衡图工作簿中。</p><h2 id="3-敏感性分析"><a href="#3-敏感性分析" class="headerlink" title="3 敏感性分析"></a>3 敏感性分析</h2><p>程序提供对营业收入、建设投资以及经营成本等因素进行单因素计算分析和敏感度系数计算，并以图表的形式显示在敏感性分析工作簿中。</p><h2 id="4-保存文件"><a href="#4-保存文件" class="headerlink" title="4 保存文件"></a>4 保存文件</h2><p>单击功能区中的【保存文件】按钮，将程序中已经输入的项目基本数据、计算数据等保存，方便下一次的使用，适用于连续作业的项目。</p><h2 id="5-输出报表"><a href="#5-输出报表" class="headerlink" title="5 输出报表"></a>5 输出报表</h2><p>程序输出Excel格式的图表，包括：建设投资估算表、投资计划与资金筹措表、总成本费用估算表、营业收入与税金表、固定资产折旧表、无形资产摊销表、流动资金估算表、项目投资现金流量表、利润与利润分配表、财务计划现金流量表、资产负债表、借款还本付息计划表、投资经济费用效益流量表、财务评价结果、敏感性分析、盈亏平衡图等，用户并可以将选择需要保存的报表进行输出保存。</p><h1 id="6、软件部分截图"><a href="#6、软件部分截图" class="headerlink" title="6、软件部分截图"></a>6、软件部分截图</h1><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/software-1-dut-1/4.png" alt="4"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/software-1-dut-1/5.png" alt="5"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/software-1-dut-1/6.png" alt="6"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/software-1-dut-1/7.png" alt="7"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/software-1-dut-1/8.png" alt="8"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/software-1-dut-1/9.png" alt="9"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/software-1-dut-1/10.png" alt="10"></p>]]></content>
      
      
      <categories>
          
          <category> 程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序 </tag>
            
            <tag> 成果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统仿真笔记（三）离散事件系统仿真基础</title>
      <link href="/post/System-Simulation-3/"/>
      <url>/post/System-Simulation-3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>之前内容请回顾：<a href="/post/System-Simulation-2/">系统仿真笔记（二）建模方法概述</a></p><h1 id="一、蒙特卡罗方法"><a href="#一、蒙特卡罗方法" class="headerlink" title="一、蒙特卡罗方法"></a>一、蒙特卡罗方法</h1><h2 id="1-1蒙特卡罗方法"><a href="#1-1蒙特卡罗方法" class="headerlink" title="1.1蒙特卡罗方法"></a>1.1蒙特卡罗方法</h2><p>蒙特卡罗法（Monte-Carlo）也称随机抽样法或统计试验方法，其基本思想是：某一事件出现的<strong>频率</strong>近似于该事件发生的<strong>概率</strong>，即大数定律原理。</p><script type="math/tex; mode=display">\frac{n}{N}≈P \quad\quad（N→∞）</script><p>其中：$p$ —某一事件发生的概率，$N$—实验次数，$n $—事件出现的次数。</p><blockquote><p>大数定律简要介绍：</p><p>设随机变量$X_1$, $X_2$, …, $X_n$，…相互独立，服从同一分布且具有数学期望$E(X_k)=u（k=1,2,…）$，则序列</p><script type="math/tex; mode=display">\overline{X}=\frac{1}{n}\sum _{k=1} ^n X_k</script><p>依概率收敛于$u$，即 $\overline{X} \stackrel{p}{\longrightarrow}\mu$</p></blockquote><h2 id="1-2蒙特卡罗方法的实现"><a href="#1-2蒙特卡罗方法的实现" class="headerlink" title="1.2蒙特卡罗方法的实现"></a>1.2蒙特卡罗方法的实现</h2><ul><li>对一个随机系统，当实验次数充分多时，通过统计推断，可以求得随机变量的数字特征：数学期望值，方差，置信度和置信区间等。</li><li>但是，Monte-Carlo方法的求解过程，需要大量的独立重复试验，对于大型复杂系统，在时间上、经济上是不可行的。</li><li>以<strong>计算机仿真</strong>的方法可以实现上述目标。它是求解复杂系统问题的重要途径。</li><li>为说明Monte-Carlo法的基本思想，先介绍勃丰（Boffon）投针实验。</li></ul><h2 id="1-3勃丰投针实验"><a href="#1-3勃丰投针实验" class="headerlink" title="1.3勃丰投针实验"></a>1.3勃丰投针实验</h2><p><strong>（1）实验概述</strong><br>1773年，法国物理学家勃丰（Boffon）发现：随机投针试验结果与圆周率值之间有一定的关系。<br>试验方法：</p><p>在平面上绘制相距均为$2a$ 的平行线束，在一定的高度向平面上随机投下一枚长度为$2l$的钢针。<br>投针的结果有两种：</p><ul><li>与平行线相交</li><li>与平行线不相交</li></ul><p>为避免钢针同时与两根相邻的平行线相交，可假设：$a&gt;l&gt;0$，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/2.png" alt></p><p><strong>（2）实验的分析：一种伯努利试验</strong> </p><p>设试验<strong>E</strong>只有两种可能的结果：“A”和“非A”，则称该试验<strong>E</strong>为<strong>伯努利试验(Bernoulli experiment )</strong>。</p><ul><li>例：抛硬币，其结果有两个：若“A”表示正面，则“非A”表示反面 </li></ul><p>将<strong>E</strong>独立的重复地进行n次，则称这一重复独立试验为<strong>n重伯努利试验</strong>。n重伯努利试验是一种很重要的数学模型，它有广泛的应用。例如： 将硬币抛n次，这就是n重伯努利试验 。</p><p><strong>伯努利过程</strong>是一个由有限个或无限个的独立随机变量$X_1$, $X_2$, $X_3$ ,…, 所组成的离散事件随机过程，其中$X_1$, $X_2$, $X_3$ ,…,  满足如下条件：</p><ul><li>对每个$i$, $X_i$等于 0 或 1; </li><li>对每个$i$, $X_i$的概率等于$p$. </li></ul><p>伯努利过程是一列独立同分布的伯努利试验。每个$X_i$ 的2个结果也被称为“成功”或“失败”，用数字 0 或 1 来表示。</p><blockquote><ul><li><p>伯努利分布简要介绍：</p></li><li><p>伯努利分布（Binomial distribution  or Bernoulli distribution ）的定义：设n重伯努利试验,伯努利试验成功的概率为$p$，则该随机变量$X$服从伯努利分布，记作：<br>$X$ ~ $B(n, p)$ 。 </p></li><li><p>相关参数</p><ul><li><p>平均值：$np$</p></li><li><p>方差：$np(1-p)$ </p></li></ul></li></ul></blockquote><p><strong>伯努利分布的特点</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/3.png" alt></p><center>概率密度函数</center><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/4.png" alt="4"></p><center>概率分布函数</center><p><strong>（3）钢针与平行线相交条件</strong></p><p>取：</p><ul><li>$M$—钢针的中点</li><li>$y$—$M$点的最近平行线间的距离</li><li>$\varphi$—钢针与平行线间的夹角</li><li>$N$—投针的次数</li><li>$ν$—相交的次数</li></ul><p>由下图可以发现钢针与平行线相交的条件为：$y≤ l\sin\varphi$</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/5.png" alt></p><p>设：钢针与平行线相交的概率为$p$，则：</p><script type="math/tex; mode=display">p=\frac{1}{\pi a}\int_{0}^{\pi}{l\sin\varphi}d\varphi=\frac{2l}{\pi a}</script><p>这是一种典型的伯努利试验。当$N$充分大时，投针实验中相交的频率接近相交的概率。即：</p><script type="math/tex; mode=display">p≈\frac{ν}{N}</script><p>由上面两个式子$p=\frac{2l}{\pi a}≈\frac{ν}{N}$ 得 $\pi ≈\frac{2lN}{aν}$</p><p><strong>（4）勃丰投针实验结果</strong></p><p>历史上的随机投针实验的结果如下：</p><div class="table-container"><table><thead><tr><th><strong>试验者</strong></th><th><em>a</em>/<em>mm</em></th><th><em>l</em></th><th><em>N</em></th><th><strong>ν</strong></th><th><em>P</em></th><th><strong>π估计值</strong></th></tr></thead><tbody><tr><td><strong>Boffon（1773）</strong></td><td></td><td></td><td>2212</td><td></td><td></td><td>3.142</td></tr><tr><td><strong>Wolf（1853）</strong></td><td>45</td><td>36</td><td>5000</td><td>2532</td><td>0.5046</td><td>3.1596</td></tr><tr><td><strong>Smith（1855）</strong></td><td>50</td><td>30</td><td>3204</td><td>1218.5</td><td>0.3819</td><td>3.1554</td></tr><tr><td><strong>DeMogorgan</strong></td><td>50</td><td>50</td><td>600</td><td>382.5</td><td>0.6366</td><td>3.137</td></tr><tr><td><strong>Fox（1894）</strong></td><td>50</td><td>38</td><td>1030</td><td>489</td><td>0.4747</td><td>3.1595</td></tr><tr><td><strong>Lazzarini（1901）</strong></td><td>3</td><td>2.5</td><td>3408</td><td>1808</td><td>0.5305</td><td>3.1115929</td></tr><tr><td><strong>Reina（1925）</strong></td><td>50</td><td>27.09</td><td>2520</td><td>859</td><td>0.3480</td><td>3.1795</td></tr><tr><td><strong>裴鹿成（195？）</strong></td><td>30</td><td>25</td><td>500000</td><td></td><td></td><td>3.1422</td></tr></tbody></table></div><h2 id="1-4样本容量"><a href="#1-4样本容量" class="headerlink" title="1.4样本容量"></a>1.4样本容量</h2><p><strong>（1）u-检验法</strong></p><p>由中心极限定理，统计量 $\mu=\frac{(\overline{a}-\mu_0)}{\sigma}\sqrt{n}$ 的分布以$N(0,1)$为极限，所以当$n$相当大时（$n\geq30$），$\mu$可近似看成正态分布变量，对很小的$α$（显著性水平），可由</p><script type="math/tex; mode=display">P(|\mu|\geq\mu_\alpha)=\sqrt{\frac{2}{\pi}}\int_{\mu_0}^{\infty}e^{-\frac{t^2}{2}}dt</script><p>或：$P(|\mu|\leq\mu_\alpha)=1-\alpha$</p><p>定出$\mu_\alpha$，这时$|\mu|\geq\mu_\alpha$成立的概率为$\alpha$</p><p><strong>（2）勃丰实验的样本容量</strong></p><p>为保证Monte-Carlo方法的精度，需要一定量的样本容量支持，样本容量过小往往使试验精度下降。</p><p>勃丰投针实验的精度取决于伯努利过程的方差。如实验的精度达到0.001，置信度为95%，即$\alpha$=0.05，由正态分布数值表可以查得：$Z_{0.975}$=1.96，于是，问题定义如下：</p><p>已知：试验次数$N$，事件出现次数$v$ </p><p>假设检验：</p><script type="math/tex; mode=display">H0：E(\alpha)=0.001</script><script type="math/tex; mode=display">\mu = \frac{\overline{a}-\mu_0}{\sigma}\sqrt{n}=\frac{\frac{v}{N}-p}{\sqrt{p(1-p)}}\sqrt{N}</script><script type="math/tex; mode=display">P(|\mu|<\mu_a)=1-a</script><script type="math/tex; mode=display">Z_{1-\frac{\alpha}{2}}\sqrt{V \frac{v_N}{n}}=0.001</script><p>取$l=a$，有 $p=\frac{2l}{\pi a} = 0.6366$</p><script type="math/tex; mode=display">V \frac{v_N}{n}=\frac{1}{N}p(1-p)=\frac{1}{N}*0.6366(1-0.6366)=\frac{0.2313}{N}</script><p>带入，得：$1.96\sqrt{\frac{0.2313}{N}}=0.001$</p><p>于是$N=\frac{1.96^2*0.2313}{0.0001^2}=888562.2$</p><p>即，进行88.8万次投针实验，可以以95%的置信度，达到0.001的精度来估计π的值。</p><p>这里，样本容量的变化特点是：随所要求的精度的平方成反比，与正态分布临界值的平方成正比。</p><p>所以，要想取得高精度的实验结果，用人工方法进行投针实验几乎是不可能的。于是，人们采用计算机模拟投针过程进行实验。</p><h2 id="1-5勃丰投针实验演示"><a href="#1-5勃丰投针实验演示" class="headerlink" title="1.5勃丰投针实验演示"></a>1.5勃丰投针实验演示</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/6.png" alt="6"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/7.png" alt="7"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/8.png" alt="8"></p><h2 id="1-6-Monte-Carlo法的应用"><a href="#1-6-Monte-Carlo法的应用" class="headerlink" title="1.6 Monte-Carlo法的应用"></a>1.6 Monte-Carlo法的应用</h2><p>Monte-Carlo法目前得到了广泛的应用：</p><ul><li>几何：面积计算、积分计算。</li><li>物理：物理实验、热力学、量子力学实验</li><li>优化：随机优化、模糊分析</li><li>系统分析：元胞自动机、复杂网络分析</li><li>经济：金融风险分析、经济系统风险分析</li><li>人工智能：DeepMind 的 AlphaGo</li><li>…</li></ul><p>Monte-Carlo法的通用性、一般性特点成为后续其它模拟方法的基础。</p><p>改进思路：不同的随机分布、多变量系统、时变系统。</p><h1 id="二、离散事件系统仿真的基本概念"><a href="#二、离散事件系统仿真的基本概念" class="headerlink" title="二、离散事件系统仿真的基本概念"></a>二、离散事件系统仿真的基本概念</h1><h2 id="2-1基本定义"><a href="#2-1基本定义" class="headerlink" title="2.1基本定义"></a>2.1基本定义</h2><h3 id="2-1-1基本定义"><a href="#2-1-1基本定义" class="headerlink" title="2.1.1基本定义"></a>2.1.1基本定义</h3><p><strong>离散系统</strong>是指状态变化只在离散时刻产生的系统。离散系统的状态量在两个相邻的时间点之间是保持不变的。</p><p>由于离散系统的状态量的变化是由“事件”引起的，反映系统活动的本质属性在于那些随机、离散的“事件”，所以此类离散系统称为<strong>离散事件动态系统</strong>（discrete event dynamic system，<strong>DEDS</strong>），或<strong>离散事件系统</strong>（discrete event system），对离散系统的仿真又称<strong>离散事件系统仿真</strong>。</p><p>离散事件系统是广泛存在的一类系统，属于人造系统范畴，如：</p><ul><li>各类排队系统（银行、商店、饭店、电话交换台等服务系统）</li><li>各类制造系统、库存系统，计算机通信网络系统，各种交通控制与管理系统等。</li></ul><h3 id="2-1-2离散事件系统的建模"><a href="#2-1-2离散事件系统的建模" class="headerlink" title="2.1.2离散事件系统的建模"></a>2.1.2离散事件系统的建模</h3><p>离散事件系统的建模一般很难用数学解析方程来描述，通常采用<strong>流程图</strong>或<strong>网络图</strong>来描述。由于离散事件系统固有的随机性，经典的概率及数理统计理论、随机过程理论虽然能对一些简单系统提供解析解，==但对大量的实际系统，仍需运用模拟技术来提供较为满意的结果。==</p><p>一般地，对离散事件系统的建模的需要描述以下信息：</p><ul><li>构成组件（Component）</li><li>组件的描述变量（Descriptive Variables）</li><li>参变量（Parameter）</li><li>组件间的相互关系（Relation）</li><li>系统结构图（Diagram）</li></ul><h3 id="2-1-3离散事件系统模拟"><a href="#2-1-3离散事件系统模拟" class="headerlink" title="2.1.3离散事件系统模拟"></a>2.1.3离散事件系统模拟</h3><p>离散事件系统模拟（discrete event system simulation）是对于离散事件系统建立数学模型，并在计算机上对该模型进行试验的模拟技术。</p><h3 id="2-1-4离散事件系统建模与模拟的常见术语"><a href="#2-1-4离散事件系统建模与模拟的常见术语" class="headerlink" title="2.1.4离散事件系统建模与模拟的常见术语"></a>2.1.4离散事件系统建模与模拟的常见术语</h3><p>以下介绍离散事件系统建模与模拟的一些常见术语。</p><p><strong>1）实体(entity)</strong> </p><p>是系统中活动的部分，如库存系统中的货物、商店医院中排队等待的顾客等。系统工作过程实质上就是“实体”流动和接受服务、处理的过程。特点是仅在系统中停留一段时间。用于描述系统中的对象。<br>一种观点认为：离散事件系统中实体可分为两大类：</p><ul><li>“临时实体”，它只在系统中存在一段时间。一般这类实体由系统外部进入系统，经过系统的处理（服务）后通过系统，最终离开系统，如银行系统中的“顾客”，制造系统中的“零件”均属于临时实体。</li><li>“永久实体”，它是永久驻留在系统中的实体，如银行系统中的“服务员”，制造系统中的“设备”，只要系统处于活动状态，这些实体就存在。临时实体按一定规律不断地到达（产生），在永久实体作用下通过系统，整个系统呈现出动态过程。</li></ul><p><strong>2）属性(attribute)</strong></p><ul><li>属性反映实体的某些性质。一个实体类型可定义一组属性。如，顾客：性别、年龄、到达时间、服务需求。</li><li>一个实体属性有具体值。如：WANG：男、20、学生。</li><li>实体的状态由它的属性集合来描述。</li><li>建模时，主要选用与研究目的相关的属性。如：研究超市的服务效率时，顾客的身高、体重似乎关系不大，而到达时间、逗留时间、离开时间是研究超市服务效率的重要依据，是模型种所关心的那些属性。</li></ul><p><strong>3）资源（resource）</strong></p><p>又称设备（facility） ，是系统中固定的部分，如机床、营业员、医生，仓库等，用于对实体进入加工、处理或服务。特点是永久固定在系统中。</p><p>处理方式：一个顾客能否得到服务，取决于该顾客能否获得服务资源。</p><p>下面，一理发店的服务过程为例说明。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/9.png" alt="9"></p><p>处理步骤：</p><p>顾客到达（arrive）→顾客排队（queue）→获取/占用资源（将服务资源分配给顾客）(seize)→开始服务→服务处理（process）→结束服务—释放资源（release）→离开（depart）。</p><p><strong>4）时刻(time)</strong></p><p>在仿真过程的某个时间数值上，至少有一个实体的属性被改变的这个时间的数值。</p><p>如：8点上课，9点下课。</p><blockquote><p>注意：该时刻针对系统而言，不是计算机运行时刻。</p></blockquote><p><strong>5）间隔(interval)</strong></p><p>相邻两个时刻之间的持续时间。</p><p><strong>6）事件(event)</strong></p><p>指在一个时间点上，引起系统状态发生变化的行为。离散事件系统是由事件驱动的。它是某一时间点上的瞬间行为。</p><p>例如：“顾客到达”在服务系统中可定义为一类事件，因为由于“顾客到达”，系统的状态——某服务台的状态可能从闲变到忙（如果原来状态为闲），或是服务台前的缓冲区状态—排队长度发生变化（队列中顾客数加1）。</p><p>在一个系统中，一般有许多类事件，每一类事件的发生时间往往带有随机性；某一类事件的发生可能引起其它类事件发生，或者是另一类事件发生的条件等等。</p><p>为了实现对系统中的事件管理，仿真模型中必须建立“事件表”（Event List），表中记录每一已发生或即将发生的事件，包括其类型、发生时间及其它有关的属性，以便计算机能仿真实际系统中的并行活动。</p><p>例：理发店事件分析</p><ol><li>系统开始：相当于上班开始的状态，所有人员、设备为初始状态。</li><li>顾客到达：“顾客到达”会使服务系统的状态发生变化，某服务台的状态可能从闲变到忙（如果原来状态为闲），或是服务台前的缓冲区状态—排队长度发生变化（队列中顾客数加1）。</li><li>顾客离开：“顾客离开”会使服务系统的状态发生变化，某服务台的状态可能从忙变到闲（如果原来状态为忙），或是服务台前的缓冲区状态—排队长度发生变化（队列中顾客数减1） 。</li><li>系统结束：相当于闭店状态，所有人员、设备为结束状态。 </li></ol><p><strong>7）状态(state)</strong></p><p>在某个确定时刻，系统的状态是系统所有实体的属性的集合。</p><p>如：时刻值：9点30分，</p><p>顾客A，接受服务；顾客B，排队等待中。</p><p>资源X：忙</p><div class="table-container"><table><thead><tr><th><strong>时钟</strong></th><th><strong>状态变量x1</strong></th><th><strong>状态变量x2</strong></th><th><strong>…</strong></th><th><strong>状态变量xm</strong></th></tr></thead><tbody><tr><td><em>t1</em></td><td>x1(t1)</td><td>x2(t1)</td><td>…</td><td>xm(t1)</td></tr><tr><td><em>t2</em></td><td>x1(t2)</td><td>x2(t2)</td><td>…</td><td>xm(t2)</td></tr><tr><td><em>t3</em></td><td>x1(t3)</td><td>x2(t3)</td><td>…</td><td>xm(t3)</td></tr></tbody></table></div><p><strong>8）活动(activity)</strong></p><p>实体在两个事件之间保持一个状态的持续过程。通常用于表示两个可以区分的事件之间的过程，它标志着系统状态的转移。</p><p>如：顾客到达（arrive）→顾客排队（queue）→获取/占用资源（将服务资源分配给顾客）(seize)→开始服务→服务处理（process）→结束服务—释放资源（release）→离开（depart）。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/10.png" alt></p><p><strong>9）成分(entity)</strong></p><p>和实体是同一概念。</p><p>成分有两种：主动成分和被动成分。</p><p>主动成分：可以主动产生活动，如生产线上到达的机器零件、库存系统中的货物。</p><p>被动成分：本身不产生活动、只在主动成分作用下才产生状态变化。</p><p><strong>10）进程(process)或事务(transaction)</strong></p><p>进程（或事务）由和某类实体相关的有序的事件及活动组成。它描述了各事件活动发生的相互逻辑关系。</p><p>进程/事务是并发控制的基本单位。所谓事务,它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位（注意：与程序设计中的进程有区别）。</p><p>例1：银行转帐工作。从一个帐号扣款并使另一个帐号增款，这两个操作要么都执行，要么都不执行。所以，应该把他们看成一个事务。事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性。</p><p>例2：银行ATM机的顾客的活动过程。从插入银行卡到退出银行卡。</p><p><strong>11）仿真时钟(simulation time or clock)</strong></p><p>用于表示仿真时间的变化，作为仿真过程的时间控制。</p><p>它是实际系统运行时间在仿真种的表示，注意：不是表示计算机执行仿真程序的时间长度。</p><p>仿真过程中，仿真时钟的取值称为仿真钟的推进，两次连续取值的间隔称为仿真步长。</p><p>连续系统仿真中：仿真时钟按定步长推进。</p><p>离散事件系统仿真中，仿真时钟的推进方式（time advance mechanism）有两种：</p><ol><li>固定步长时间推进方式（fixed increment time advance）</li><li>下次事件时间推进方式（next event time advance）</li></ol><p>特点：离散事件系统仿真中的仿真钟推进方法大多采用“下次事件时间推进方式”，称为事件调度法。由于相邻两事件之间系统状态不会发生任何变化，因而仿真钟推进呈现出跳跃性，其推进长度具有随机性。这是离散事件系统仿真与连续系统仿真的重要区别之一。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/11.png" alt="11"></p><p><strong>12）规则（rule）</strong></p><p>描述实体之间、实体与仿真时钟之间相互影响的规则。</p><p>例：</p><ul><li>超市服务系统，顾客是主动实体，服务员是被动实体，两者的作用规则是：</li><li>如果服务员状态为闲，顾客到达时，使其状态变为忙；</li><li>如果服务员状态为忙，顾客到达时，其状态不变，而顾客进入排队状态。</li></ul><blockquote><p>以下是关于离散事件系统术语的说明：</p><p>Entities </p><p>having ATTRIBUTES</p><p>interact with ACTIVITIES</p><p>under certain CONDITIONS</p><p>creating EVENTS</p><p>that change the STATE</p></blockquote><h3 id="2-1-5例：医生诊所业务分析"><a href="#2-1-5例：医生诊所业务分析" class="headerlink" title="2.1.5例：医生诊所业务分析"></a>2.1.5例：医生诊所业务分析</h3><p>用离散事件系统的观点分析一个有一位医生的诊所（Clinic）的活动过程。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/12.png" alt></p><ul><li>系统的内容：为病人看病</li><li>系统的边界：诊所的从大门到诊室范围。</li><li>实体： 病人（临时实体）</li><li>设备/资源：医生（永久实体，永久固定在系统中）</li><li>实体属性：病人的性别、年龄、病症等。</li><li>时刻和间隔：病人到达，医生看病开始、结束时间等</li><li>状态：某个时刻病人被服务的状态</li><li>事件：病人到达诊所，开始看病，结束看病，离开诊所</li><li>活动：病人等待，病人看病过程。</li><li>事务：病人从到达诊所到离开诊所的全过程。</li></ul><p>诊所系统的时间和活动如下：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/13.png" alt="13"></p><p>诊所系统仿真时钟的推进：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/14.png" alt></p><h1 id="三、离散事件系统仿真过程"><a href="#三、离散事件系统仿真过程" class="headerlink" title="三、离散事件系统仿真过程"></a>三、离散事件系统仿真过程</h1><h2 id="3-1概述"><a href="#3-1概述" class="headerlink" title="3.1概述"></a>3.1概述</h2><p>前面也提到过，一般地，离散事件系统的模型难以用某种规范的形式描述，一般采用<strong>流程图</strong>或<strong>网络图</strong>的形式定义实体在系统中的活动。</p><p>由于离散事件系统属于动态系统，即与时间有关系的系统，因此要考虑系统中时间的变化，即时间如何推进。</p><p>离散事件系统的仿真算法或仿真策略要决定实体之间的逻辑联系，时间的推进，事件间的关系，活动的关系等问题。</p><p>由控制论可知，系统行为就是在给定时间t的系统的全部状态的变化过程形成的，而状态则是描述系统行为所需变量的最小集合。同样，离散事件系统仿真的核心问题是：如何建立描述系统行为的逻辑模型。</p><p>离散事件系统某一时刻t的状态用一个表来表示，如下所示。</p><div class="table-container"><table><thead><tr><th><strong>时钟</strong></th><th><strong>系统状态</strong></th><th><strong>实体和属性</strong></th><th><strong>集合1</strong></th><th><strong>集合2</strong></th><th><strong>…</strong></th><th><strong>FEL</strong></th><th><strong>累计统计和计数器</strong></th></tr></thead><tbody><tr><td><em>t1</em></td><td>(<em>x</em>,<em>y</em>,<em>z</em>,…)</td><td></td><td></td><td></td><td></td><td><strong>(3,t2):类型3事件出现在t2</strong></td><td></td></tr><tr><td><em>t2</em></td><td>……</td><td></td><td></td><td></td><td></td><td><strong>(1,t3):类型1事件出现在t3</strong></td><td></td></tr><tr><td><em>t3</em></td><td>……</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><em>t4</em></td><td>… …</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><h2 id="3-2仿真始终的推进"><a href="#3-2仿真始终的推进" class="headerlink" title="3.2仿真始终的推进"></a>3.2仿真始终的推进</h2><h3 id="3-2-1基本思想"><a href="#3-2-1基本思想" class="headerlink" title="3.2.1基本思想"></a>3.2.1基本思想</h3><p>仿真始终推进的一个重要思想是用“事件”的观点来观察系统，即：定义事件及每一事件发生对系统状态的影响，并按事件发生时间顺序来确定每类事件发生时系统中的各实体之间的逻辑关系及其状态。</p><p>事件调度法的仿真时钟的推进，是按照下一事件的发生时刻来触发。大多数发生的事件，两个相邻事件发生的时间间隔一般是随机的，因此事件调度法是变步长法。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/15.png" alt></p><h3 id="3-2-2事件表的处理"><a href="#3-2-2事件表的处理" class="headerlink" title="3.2.2事件表的处理"></a>3.2.2事件表的处理</h3><ul><li>仿真模型中所有事件均按时间先后顺序存放在事件表中；</li><li>模型中要设计一个时间控制部件实现仿真钟的管理与控制。每当处理一类事件时，它总是从事件表中选择最早发生的事件；并将仿真钟推进到该事件发生的时间；然后调用与该事件相应的事件处理模块；</li><li>事件处理模块在执行完后都必须返回到时间控制部件。这样，事件的选择与处理不断地进行，仿真钟按事件时间往前推进，直到仿真终止的条件满足为止。</li></ul><p>事件表EL(Event List)如下：</p><div class="table-container"><table><thead><tr><th><strong>时钟</strong>  <strong>Time</strong></th><th><strong>事件地址</strong>  <strong>Event Address</strong></th></tr></thead><tbody><tr><td><strong>t1</strong></td><td><strong>event1</strong></td></tr><tr><td><strong>t2</strong></td><td><strong>event2</strong></td></tr><tr><td><strong>t3</strong></td><td><strong>event3</strong></td></tr><tr><td><strong>…</strong></td><td><strong>…</strong></td></tr></tbody></table></div><h3 id="3-2-3事件表处理流程图"><a href="#3-2-3事件表处理流程图" class="headerlink" title="3.2.3事件表处理流程图"></a>3.2.3事件表处理流程图</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/16.png" alt></p><h3 id="3-2-4事件处理流程控制"><a href="#3-2-4事件处理流程控制" class="headerlink" title="3.2.4事件处理流程控制"></a>3.2.4事件处理流程控制</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/17.png" alt></p><h2 id="3-3离散事件系统仿真过程及结构"><a href="#3-3离散事件系统仿真过程及结构" class="headerlink" title="3.3离散事件系统仿真过程及结构"></a>3.3离散事件系统仿真过程及结构</h2><p>离散事件系统仿真过程主要流程和组成如下。</p><ol><li>系统状态：由系统状态变量构成，用它来描述系统在不同时刻的状态。</li><li>仿真时钟：提供仿真时间的当前时刻，描述系统内部的时间变化。</li><li>事件表：仿真过程中按时间顺序发生的事件类型和时间对应关系的表。</li><li>统计计数器：控制与存贮仿真过程中的结果的统计信息。</li><li>定时子程序（时间推进子程序）：可依据时间表来确定下一事件，并将仿真时钟推移到下一事件的发生时间。</li><li>初始子程序：在开始仿真时对系统进行初始化。</li><li>事件子程序：一个事件子程序对应于一种类型的事件，它在相应事件发生时，转入该事件子程序进行处理、更新系统状态。</li><li>仿真报告子程序：在仿真结束时，计算与打印仿真结果。</li><li>主程序：用来检查事件表、活动表，调用定时子程序，控制整个仿真过程的推进，并确定下一事件，传递控制给各事件子程序以更新系统状态。</li><li>随机数发生器：发生随机数和随机变量，是系统模拟的必备部分。</li></ol><p>离散事件系统仿真过程流程图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-3/18.png" alt></p><h1 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h1><ul><li>蒙特卡罗基本概念、方法、实现及其应用，以勃丰实验为例</li><li>离散事件系统的基本概念、建模与模拟</li><li>离散事件系统常见的术语</li><li>介绍了离散事件系统仿真的过程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 仿真模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习笔记：策略迭代与价值迭代及其代码实现</title>
      <link href="/post/ai-2-rl-policy-iteration/"/>
      <url>/post/ai-2-rl-policy-iteration/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="策略迭代"><a href="#策略迭代" class="headerlink" title="策略迭代"></a>策略迭代</h1><p>策略迭代包括<strong>策略评估(Policy Evaluation)</strong>和<strong>策略改进(Policy Improvement)</strong>。</p><p>基本过程是从一个初始化的策略出发，先进行策略评估，然后策略改进，评估改进的策略，再进一步改进策略，经过不断迭代更新，直达策略收敛。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ai-2-rl-policy-iteration/1.png" alt="策略评估和策略改进"></p><p><strong>算法的伪代码如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ai-2-rl-policy-iteration/2.png" alt="策略迭代算法伪代码"></p><p><strong>算法过程：</strong></p><p><strong>1. Initialization</strong></p><p>初始化所有状态的$v(s)$以及$π(s)$（初始化为随机策略） </p><p><strong>2. Policy evaluation</strong> </p><p>用当前的$v(s)$对当前策略$π(s)$进行评估，计算出每一个状态的$v(s)$，直到$v(s)$收敛，才算训练好了这个状态价值函数$V(s)$</p><p><strong>3. Policy improvement</strong> </p><p>上一步已经得到了当前策略的评估函数$V(s)$,那么就可以利用这个评估函数进行策略改进啦。 在每个状态$s$时，对每个可能的动作$a$,都计算一下采取这个动作后到达的下一个状态的期望价值。看看哪个动作可以到达的状态的期望价值函数最大，就选取这个动作。以此更新了$π(s) $</p><p>然后再次<strong>循环上述２、３步骤，直到$V(s)$与$π(s)$都收敛</strong>。</p><h2 id="1-策略评估"><a href="#1-策略评估" class="headerlink" title="1.策略评估"></a>1.策略评估</h2><p>策略评估就是计算任意策略的状态值函数$V_\pi$，也就是对当前策略下计算出每个状态下的状态值，这就是策略预估，我们也把它称为<strong>预测</strong>(predict)问题。</p><script type="math/tex; mode=display">v_{k+1}(s_t)=\sum_{a∈A}\pi(a|s)[R(s,a)+\gamma \sum_{s∈S}p(s'|s,a)v_t(s')]</script><p>下面介绍一个策略评估的例子：</p><p>这是一个经典的Grid World的例子。这里有一个$4*4$的的格子世界。只有左上和右下的格子是终止格子。该位置的价值固定为0，个体如果到达了该2个格子，则停止移动，此后每轮奖励都是0。个体在16宫格其他格的每次移动，得到的即时奖励$R$都是-1。注意个体每次只能移动一个格子，且只能上下左右4种移动选择，不能斜着走, 如果在边界格往外走，则会直接移动回到之前的边界格。衰减因子我们定义为$γ=1$。由于这里每次移动，下一格都是固定的，因此所有可行的的状态转化概率$P=1$。这里给定的策略是随机策略，即每个格子里有25%的概率向周围的4个格子移动。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ai-2-rl-policy-iteration/3.jpg" alt></p><p>首先我们初始化所有格子的状态价值为0，如上图k=0的时候。现在我们开始策略迭代了。由于终止格子的价值固定为0，我们可以不将其加入迭代过程。在$k=1$的时候，我们利用上面的贝尔曼方程先计算第二行第一个格子的价值：</p><script type="math/tex; mode=display">v_1^{21}=\frac{1}{4}[(−1+0)+(−1+0)+(−1+0)+(−1+0)]=−1</script><p>第二行第二个格子的价值是：</p><script type="math/tex; mode=display">v_1^{22}=\frac{1}{4}[(−1+0)+(−1+0)+(−1+0)+(−1+0)]=−1</script><p>其余的以此类推，第一轮的状态价值迭代的结果如上图$k=1$的时候。现在我们第一轮迭代完了。开始动态规划迭代第二轮了。还是看第二行第一个格子的价值：</p><script type="math/tex; mode=display">v_2^{21}=\frac{1}{4}[(−1+0)+(−1-1)+(−1-1)+(−1-1)]=−1.75</script><p>第二行第二个格子的价值是：</p><script type="math/tex; mode=display">v_2^{22}=\frac{1}{4}[(−1-1)+(−1-1)+(−1-1)+(−1-1)]=−2</script><p>最终得到的结果是上图k=2的时候。第三轮的迭代如下：</p><script type="math/tex; mode=display">v_3^{21}=\frac{1}{4}[(−1-1.7)+(−1-2)+(−1-2)+(−1+0)]=−2.425</script><script type="math/tex; mode=display">v_3^{22}=\frac{1}{4}[(−1-1.7)+(−1-1.7)+(−1-2)+(−1-2)]=−2.85</script><p>最终得到的结果是上图$k=3$的时候。就这样一直迭代下去，直到每个格子的策略价值改变很小为止。这时我们就得到了所有格子的基于随机策略的状态价值。</p><p>可以看到，动态规划的策略评估计算过程并不复杂，但是如果我们的问题是一个非常复杂的模型的话，这个计算量还是非常大的。</p><h2 id="2-策略改进"><a href="#2-策略改进" class="headerlink" title="2.策略改进"></a>2.策略改进</h2><p>上面我们讲了使用策略评估求解了<strong>预测</strong>问题，现在还有<strong>控制</strong>问题没有解决。我们计算策略的状态价值函数的原因是为了帮助找到更好的策略。因为我们上一步得到了上一个策略下的每个状态下的状态值，所以接下来计算状态-行动价值函数，对策略进行改进，计算出新的策略。</p><p>计算方式如下：</p><p>遍历每一个状态，对每个可能的动作$a$，都计算一下采取这个动作后到达的下一个状态的期望价值。用贪婪法看看哪个动作可以到达的状态的期望价值函数最大，就选取这个动作，以此更新了$π(s)$公式如下：</p><script type="math/tex; mode=display">q^{\pi_i}(s,a)=[R(s,a)+\gamma \sum_{s'∈S}p(s'|st,a)v^{\pi_i}(s')]</script><script type="math/tex; mode=display">\pi_{i+1}(s)={\underset {a}{\operatorname {arg\max} }}q^{\pi_i}(s,a)</script><h1 id="价值迭代"><a href="#价值迭代" class="headerlink" title="价值迭代"></a>价值迭代</h1><p>价值迭代就比较简单了，和策略迭代差不多，对每一个当前状态$s$ ,对每个可能的动作$a$ 都计算一下采取这个动作后到达的下一个状态的期望价值。看看哪个动作可以到达的状态的期望价值函数最大，就将这个最大的期望价值函数作为当前状态的价值函数 $V(s)$循环执行这个步骤，直到价值函数收敛。<br>期望价值计算公式：</p><script type="math/tex; mode=display">q_{k+1}(s,a)=R(s,a)+\gamma \sum_{s∈S} P(s'|s,a)v_k(s')</script><script type="math/tex; mode=display">V_{k+1}(s)={\underset {a}{\operatorname {max} }}q_{k+1}(s,a)</script><p><strong>算法的伪代码如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/rl-policy-iteration/5.png" alt></p><p><strong>价值迭代算法过程：</strong></p><p><strong>１.Initialization</strong><br>初始化所有状态的$v(s)$<br><strong>２.Finding optimal value function（找到最优的价值函数）</strong><br>注意伪代码里的$max$，对每一个当前状态$s$,对每个可能的动作$a$,都计算一下采取这个动作后到达的下一个状态的期望价值。看看哪个动作可以到达的状态的期望价值函数最大，就将这个最大的期望价值函数作为当前状态的价值函数$v(s)$循环执行这个步骤，直到价值函数收敛,就可以得到最优的价值函数了<br><strong>3.Policy extraction</strong><br>利用上面步骤得到的最优价值函数，就可得到每个状态应该采取的最优动作,这个是我们的deterministic policy。</p><p>还是以下图为例，我们如果用贪婪法调整动作策略，那么当k=3的时候，我们就已经得到了最优的动作策略。而不用一直迭代到状态价值收敛才去调整策略。那么此时我们的策略迭代优化为价值迭代。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ai-2-rl-policy-iteration/3.jpg" alt></p><p>如上面的图右边。比如当$k=2$时，第二行第一个格子周围的价值分别是0,-2,-2，此时我们用贪婪法，则我们调整行动策略为向状态价值为0的方向移动，而不是随机移动。也就是图中箭头向上。而此时第二行第二个格子周围的价值分别是-1.7,-1.7,-2, -2。那么我们整行动策略为向状态价值为-1.7的方向移动，也就是图中的向左向上。</p><p>和策略迭代相比，我们没有等到状态价值收敛才调整策略，而是随着状态价值的迭代及时调整策略, 这样可以大大减少迭代次数。此时我们的状态价值的更新方法也和策略迭代不同。可见由于策略调整，我们现在价值每次更新倾向于贪婪法选择的最优策略对应的后续状态价值，这样收敛更快。</p><h1 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h1><p>一开始没有理解策略迭代和价值迭代的区别，导致后面的学习稀里糊涂。</p><ul><li>对于价值迭代，包括<strong>ﬁnding optimal value function</strong> + <strong>one policy extraction</strong>。状态价值每更新一次，策略就更新一次。二者不存在重复，因为一旦价值函数收敛后，那么它的策略也是最优的（即收敛）。</li><li>对于策略迭代，包括策略评估和策略改进，我们只有在状态价值更新到<strong>收敛</strong>后，才会更新策略（策略改进），二者重读迭代，直到策略收敛。</li><li>策略迭代的收敛速度更快一些，在状态空间较小时，最好选用策略迭代方法。当状态空间较大时，值迭代的计算量更小一些。</li></ul><h1 id="代码-例子"><a href="#代码-例子" class="headerlink" title="代码(例子)"></a>代码(例子)</h1><p>下面给出一个具体的例子</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ai-2-rl-policy-iteration/6.jpg" alt="动态规划中价值迭代和策略迭代的例子"></p><p>MDP的五元组分别为：</p><ul><li>状态：1和2</li><li>动作：图中红色线表示动作a，蓝色线表示动作b</li><li>回报：R(1) = 0，R(2) = 1</li><li>转移概率：如图所示</li><li>折扣因子：0.9</li></ul><p>代码放在我的GitHub上了，需要的请前往查看：</p><p>价值迭代：<a href="https://github.com/smiler666/Reinforcement-Learning-Notes/blob/master/value%20iteration.py" target="_blank" rel="noopener">前往查看代码</a></p><p>策略迭代：<a href="https://github.com/smiler666/Reinforcement-Learning-Notes/blob/master/policy%20iteration.py" target="_blank" rel="noopener">前往查看代码</a></p><hr><blockquote><p>若理解有误，欢迎指正。</p></blockquote><p>参考：</p><ul><li><a href="https://www.cnblogs.com/pinard/p/9463815.html" target="_blank" rel="noopener">https://www.cnblogs.com/pinard/p/9463815.html</a></li><li><a href="https://blog.csdn.net/panglinzhuo/article/details/77752574" target="_blank" rel="noopener">https://blog.csdn.net/panglinzhuo/article/details/77752574</a></li><li>周博磊《强化学习纲要》课件</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统仿真笔记（二）建模方法概述</title>
      <link href="/post/System-Simulation-2/"/>
      <url>/post/System-Simulation-2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>之前内容请回顾：<a href="/post/System-Simulation-1/">系统仿真笔记（一）绪论及概述</a></p><h1 id="一、系统建模概述"><a href="#一、系统建模概述" class="headerlink" title="一、系统建模概述"></a>一、系统建模概述</h1><h2 id="1-系统建模任务"><a href="#1-系统建模任务" class="headerlink" title="1.系统建模任务"></a>1.系统建模任务</h2><p>系统建模是系统仿真的基础。</p><p>系统模型是系统仿真过程的首要任务。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-2/1.png" alt="1"></p><h2 id="2-系统仿真建模的过程"><a href="#2-系统仿真建模的过程" class="headerlink" title="2.系统仿真建模的过程"></a>2.系统仿真建模的过程</h2><p>（1）概念建模建模</p><ul><li>根据研究目的、系统的先验知识以及观察的数据，对系统进行分析，确定组成要素、状态变量和参数之间的逻辑关系，建立被系统的数学逻辑模型。形成概念模型。 </li></ul><p>（2）仿真模型建模</p><ul><li>根据原始数学逻辑模型的形式、计算机的类型以及仿真目的将原始数学逻辑模型转换为适合于计算机处理的仿真模型。 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-2/2.png" alt="2"></p><h2 id="3-系统模型分类"><a href="#3-系统模型分类" class="headerlink" title="3.系统模型分类"></a>3.系统模型分类</h2><div class="table-container"><table><thead><tr><th><strong>建模分类</strong></th><th><strong>任务</strong></th><th><strong>主要方法</strong></th></tr></thead><tbody><tr><td><strong>概念建模</strong></td><td><strong>对真实系统进行第一次抽象。</strong></td><td><strong>面向对象的建模</strong><br><strong>基于实体关系的建模</strong><br><strong>基于UML/XML的建模</strong>  <br><strong>基于IEDF的建模</strong></td></tr><tr><td><strong>数学建模</strong></td><td><strong>理论模型。利用数学模型描述系统活动的逻辑关系（称为系统的一次建模）。</strong></td><td><strong>基于机理的建模方法</strong>  <br><strong>基于辨识的建模方法</strong>  <br><strong>基于神经网络的建模方法</strong>  <br><strong>基于图的建模方法</strong>  <br><strong>基于数据驱动的建模方法</strong></td></tr><tr><td><strong>仿真建模</strong></td><td><strong>基于数学模型构建能在计算机上编程实现的模型（称为系统的二次建模）。</strong></td><td><strong>离散事件系统仿真</strong><br><strong>连续系统仿真</strong><br><strong>多agent仿真</strong><br><strong>定性仿真</strong></td></tr></tbody></table></div><h1 id="二、仿真概念建模方法"><a href="#二、仿真概念建模方法" class="headerlink" title="二、仿真概念建模方法"></a>二、仿真概念建模方法</h1><h2 id="1-什么是概念模型"><a href="#1-什么是概念模型" class="headerlink" title="1.什么是概念模型"></a>1.什么是概念模型</h2><p>（1）仿真概念模型是仿真用户和仿真开发人员关于仿真需求的约定。</p><p>（2）仿真概念模型是与数据库相关的数据建模、设计和实现。</p><p>（3）仿真概念模型是用知识工程建立用户知识库和知识表述规范以确保仿真用户、仿真开发人员能够清晰理解应用领域的用户知识。</p><p>（4）仿真概念模型是仿真开发人员将建模需求转换为详细设计框架的途径和方法（美国国防部VV&amp;A实践指南）。</p><ul><li>建模需求：仿真将要做什么？</li><li>详细设计框架：软件、硬件、网络、系统和设备</li></ul><h2 id="2-概念模型的组成"><a href="#2-概念模型的组成" class="headerlink" title="2.概念模型的组成"></a>2.概念模型的组成</h2><ul><li>概念模型包括仿真背景、仿真规范，定义仿真元素。</li><li>仿真元素包括：假设、算法、特性、关系（与其他元素的交互关系）、数据等。通过仿真元素，可以描述其状态、任务、事件、行为、性能、参数、属性等。 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-2/3.png" alt="3"></p><h2 id="3-仿真概念模型开发步骤"><a href="#3-仿真概念模型开发步骤" class="headerlink" title="3.仿真概念模型开发步骤"></a>3.仿真概念模型开发步骤</h2><p>仿真概念模型开发有4个步骤</p><ul><li>步骤1：收集权威的仿真背景信息。</li><li>步骤2：辨识需要表示的实体和过程（应用领域分解）。</li><li>步骤3：开发仿真元素（抽象表示）。</li><li>步骤4：明确仿真元素间的关系。</li></ul><p>上述步骤反复迭代推进。</p><p>最后，形成仿真概念模型文档（ISO/IEC 12207 - 2008:系统和软件工程 软件生命周期过程, Systems and software engineering — Software life cycle processes ）。</p><h2 id="4-概念模型的开发方法"><a href="#4-概念模型的开发方法" class="headerlink" title="4.概念模型的开发方法"></a>4.概念模型的开发方法</h2><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td><strong>实体-关系</strong></td><td><strong>用E-R图描述实体、属性和关系（1970）</strong></td><td><strong>静态系统，受传统数据模型限制。</strong></td></tr><tr><td><strong>面向对象</strong></td><td><strong>用类、对象等描述元素及其相互关系（1980）</strong></td><td><strong>适合纵向继承关系、不适合横向并行关系</strong></td></tr><tr><td><strong>本体</strong></td><td><strong>语义知识表达模型（2001）。用本体模型<C,R,Ru>表示概念集、关系集合规则集</C,R,Ru></strong></td><td><strong>与上相反。</strong></td></tr><tr><td><strong>UML</strong></td><td><strong>统一建模语言（1997）。采用9种图：类图、对象图、用例图、状态图、序列图、协作图、活动图、构建图、部署图</strong></td><td><strong>半结构、半形式化建模，描述图过多。</strong></td></tr><tr><td><strong>SysML</strong></td><td><strong>系统建模语言（2006）。采用9种图：类图、需求图、用例图、状态机图、装配图、活动图、参数图、时间图、序列图</strong></td><td><strong>UML2.0改进版，是UML的扩展和延续。</strong></td></tr><tr><td><strong>IDEF</strong></td><td><strong>1970s年代开发，包括IDEF0、IDEF1。前者开发功能模型，后者开发信息模型。</strong></td><td><strong>文档复杂，可操作性不强。</strong></td></tr></tbody></table></div><h1 id="三、系统的数学模型"><a href="#三、系统的数学模型" class="headerlink" title="三、系统的数学模型"></a>三、系统的数学模型</h1><h2 id="1-系统模型概念"><a href="#1-系统模型概念" class="headerlink" title="1.系统模型概念"></a>1.系统模型概念</h2><p>系统模型一般按数学模型的形式进行建模和分类。</p><p>相关分类包括：按时间集合、按状态变量集合。</p><p>按时间集合：</p><ul><li>连续时间模型、离散时间模型；</li><li>如果模型中不含时间因素，则称静态模型，若模型与时间有关，则称动态模型。</li></ul><p>按状态变量：</p><ul><li>连续变化模型、离散变化模型、离散-连续混合模型；</li><li>按变量情况：确定型模型、随机性模型；</li></ul><p>在仿真领域，按连续系统或离散系统来划分模型。</p><p>下面来看一下系统模型的分类及其关系：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-2/4.png" alt="4"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-2/5.png" alt="5"></p><blockquote><p>思考：Ⅰ、Ⅱ、Ⅲ、Ⅳ模型的区别与联系</p></blockquote><h2 id="2-建模方法分类"><a href="#2-建模方法分类" class="headerlink" title="2.建模方法分类"></a>2.建模方法分类</h2><div class="table-container"><table><thead><tr><th><strong>大类</strong></th><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>机理分析法</strong></td><td><strong>机理分析法</strong> <br><strong>直接相似法</strong> <br><strong>系统辨识法</strong><br><strong>神经网络法</strong><br><strong>网络图论法</strong><br><strong>模糊集法</strong>  <strong>层次分析法</strong><br><strong>定性推理法</strong></td><td><strong>利用物理、化学定律构建微分方程模型</strong><br><strong>利用相似系统的原理建模</strong><br><strong>基于输入输出数据推断一个等价模型</strong><br><strong>利用神经网络构建非算式结构的模型</strong><br><strong>利用图的结构关系进行建模</strong><br><strong>构建信息不确定下的数学模型</strong><br><strong>基于AHP法的多准则决策模型</strong><br><strong>基于不确定信息下的人工智能建模方法</strong></td></tr><tr><td><strong>实验统计法</strong></td><td><strong>回归统计法</strong>  <br><strong>概率统计法</strong><br><strong>蒙特卡罗法</strong></td><td><strong>建立回归模型</strong>  <strong>时间序列模型</strong>  <strong>利用蒙特卡罗法</strong></td></tr><tr><td><strong>混合法</strong></td><td></td><td><strong>上述方法结合起来构造模型。</strong></td></tr></tbody></table></div><h1 id="四、系统仿真建模概述"><a href="#四、系统仿真建模概述" class="headerlink" title="四、系统仿真建模概述"></a>四、系统仿真建模概述</h1><p>仿真模型主要包括以下几种：</p><ul><li>概念模型（conceptual model）</li><li>描述模型（declarative model）</li><li>功能模型（functional model）</li><li>约束模型（constraint model）</li><li>空间模型（spatial model）</li><li>多层次抽象模型（multi-model）</li></ul><h2 id="1-概念模型"><a href="#1-概念模型" class="headerlink" title="1.概念模型"></a>1.概念模型</h2><p>概念模型（conceptual model）是一种或多或少的形式化描述，描述的内容包括建立软件组件时，所用到的算法、架构、假设与底层约束。这通常是对实际的简化描述，包括一定程度的抽象，显式或隐式地按照头脑中的确切使用方式进行构建。对概念模型的验证包括确保所用的理论和假设是正确的；当考虑模型的特征时,确保所规划的用途是合理的。</p><h2 id="2-描述模型"><a href="#2-描述模型" class="headerlink" title="2.描述模型"></a>2.描述模型</h2><p>描述模型（declarative model）就是通过描述系统状态的变化序列来考察系统的方法。</p><p>描述模型包括2个主要组件：<strong>状态</strong>、<strong>事件</strong>。</p><p>描述模型适用于描述状态空间能够按时间和空间进行离散分解的问题。</p><ul><li>分解的状态空间子集用相位（phase）表示。</li><li>时间分解主要是将状态空间眼时间轴进行分解。</li></ul><p>描述模型适用于描述状态空间能够按时间和空间进行离散分解的问题。如需要表示系统的连续行为，最好采用后面的功能模型或约束模型。</p><blockquote><p>就现在我的方向来说，主要遇见的都是这类模型。</p></blockquote><p>描述模型主要有以下分类：</p><div class="table-container"><table><thead><tr><th><strong>分类</strong></th><th><strong>模型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>确定性</strong></td><td><strong>有限状态机（FSA）</strong></td><td><strong>将状态、输入、输出结合起来。</strong></td></tr><tr><td><strong>非确定性</strong></td><td><strong>Markov模型</strong></td><td><strong>类似于FSA模型，但转移有发生概率</strong></td></tr><tr><td><strong>基于事件</strong></td><td><strong>有限事件自动机FEA</strong><br><strong>事件图模型EG</strong></td><td><strong>类似于FSA模型，但节点表示事件</strong><br><strong>图形化的离散事件表示法</strong></td></tr><tr><td><strong>混合模型</strong></td><td><strong>Petri网建模</strong> <br><strong>面向活动</strong><br><strong>面向进程</strong></td><td><strong>利用Petri网的基于图形、形式化建模</strong><br><strong>实体流图、活动周期图等</strong> <br><strong>描述一个实体的全生命周期活动</strong></td></tr></tbody></table></div><h2 id="3-功能模型"><a href="#3-功能模型" class="headerlink" title="3.功能模型"></a>3.功能模型</h2><p>功能模型是一种图形化模型。基于功能的建模就是将模型对象的方法和属性展现在图中，直观给出功能间的因果关系和变量间的制约关系。</p><p>功能模型包括2个主要组件：<strong>功能</strong>、<strong>变量</strong>。</p><p>功能模型分为两类：基于功能的、基于变量的。</p><p>功能模型适用于其问题基于不同且<strong>有向连接</strong>的物理对象（如：排队系统、控制系统、人体器官），不适用于对象为无向连接的系统（如：模拟电路）。</p><ul><li>问题对象本质上表示功能：用基于功能的方法。</li><li>问题对象本质上表示能力或存量：用基于变量的方法。</li></ul><p>功能模型主要有以下分类：</p><div class="table-container"><table><thead><tr><th><strong>分类</strong></th><th><strong>建模方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>基于功能的方法</strong></td><td><strong>模块图方法</strong></td><td><strong>模型包括状态变量、功能函数、转移函数。</strong></td></tr><tr><td><strong>基于变量的方法</strong></td><td><strong>系统动力学</strong><br><strong>影响图</strong><br><strong>贝叶斯网络</strong> <br><strong>箱格建模</strong></td><td><strong>模型包括状态变量，但不存在显性函数。</strong></td></tr></tbody></table></div><h2 id="4-约束模型"><a href="#4-约束模型" class="headerlink" title="4.约束模型"></a>4.约束模型</h2><p>约束模型主要考虑自然界规律上的限制和守恒问题，常用于表现自然法则，如力、能量、位移等。</p><p>约束模型常用方程（差分/微分方程）或图进行定义。方程中的蕴含关系一般是相等和守恒关系。</p><p>约束模型适用于组件间的连接为非方向性连接的系统。可转化为功能模型求解。</p><p>约束模型分为两类：基于方程的、基于图的方法。主要采用前者进行。</p><p>约束模型的分析方法属于推理方法，不符合面向对象的分析思想。</p><p>约束模型主要又以下分类：</p><div class="table-container"><table><thead><tr><th><strong>分类</strong></th><th><strong>模型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>基于方程</strong></td><td><strong>差分方程</strong>  <strong>微分方程</strong>  <strong>时滞微分方程</strong></td><td><strong>分析系统在离散时间间隔上的变化。</strong><br><strong>分析系统在连续时间上的变化。<br></strong>  <strong>上述方程的混合。</strong></td></tr><tr><td><strong>混合图</strong></td><td><strong>电路图</strong><br><strong>Bond_Graph（1959）</strong><br><strong>Modelica（1978）</strong></td><td><strong>利用电路图描述守恒关系。</strong><br><strong>描述能量结构的图形工具，适于工程系统（水利、材料、热力学等）。<br></strong>  <strong>从物理视角支持模型开发的语言规范。</strong></td></tr></tbody></table></div><h2 id="5-空间模型"><a href="#5-空间模型" class="headerlink" title="5.空间模型"></a>5.空间模型</h2><p>空间模型就是将物理空间中的子空间分解为若干实体，这些实体间同构或几乎同构。通过描述子空间的行为，考察整个系统的行为。</p><p>空间模型可用两种方式表达：空间、实体。</p><p>空间模型可用两种方式表达空间中的对象：</p><ul><li>空间（space）本身。需要考虑实体在空间的移动。</li><li>空间中的实体（Entity）。需要考虑两类实体方法：一是实体状态的更新，一是实体随时间的生长或衰退。</li></ul><p>空间模型适用于具有明显空间分割的系统。</p><p>以下是空间模型的分类：</p><div class="table-container"><table><thead><tr><th><strong>分类</strong></th><th><strong>模型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>基于空间</strong></td><td><strong>元胞自动机</strong> <br><strong>偏微分方程</strong><br><strong>电子表格模型</strong></td><td><strong>定义离散有限的元胞空间，考察其在离散时间维上的演化。</strong><br><strong>基于EXCEL表格</strong></td></tr><tr><td><strong>基于实体</strong></td><td><strong>基于agent建模</strong><br><strong>粒子系统建模</strong>  <strong>L-System</strong><br><strong>建模（1968）</strong></td><td><strong>考察agent构成的自组织系统的演化。</strong><br><strong>基于分形几何学描述一个生物系统的演化。</strong></td></tr></tbody></table></div><h2 id="6-多层次抽象模型"><a href="#6-多层次抽象模型" class="headerlink" title="6.多层次抽象模型"></a>6.多层次抽象模型</h2><p>多层次抽象建模可以表示系统的许多方面，因而可以适应许多实际问题求解的需要。</p><p>多层次抽象建模允许在不同层次上，用不同种模型进行建模，可以在不同的聚集层次和颗粒度上实现复杂系统模型。</p><p>可按系统的输入/输出、状态、行为、结构等方面逐层对系统进行抽象。遵循自顶向下的原则进行。</p><p>多层次抽象建模（multi-modeling）包括：多层次建模（ multi-model /multi-level） 、多方法建模（ multi-method ）、多分辨率建模（ multi-resolution ）、多面向建模（ multi-faced ）等。</p><h1 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h1><ul><li>系统建模的任务、过程及其分类</li><li>概念模型的定义、组成、开发步骤、开放方式等等</li><li>介绍了常见的数学模型，在系统仿真这门课程中，主要分为离散系统模型和连续系统模型。还介绍了数学模型的常用的建模方法，如神经网络法、蒙特卡洛法等等</li><li>最后大体介绍了概念模型、莫奥数模型、功能模型、约束模型、空间模型和多层次抽象模型等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 仿真模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统仿真笔记（一）绪论及概述</title>
      <link href="/post/System-Simulation-1/"/>
      <url>/post/System-Simulation-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>《系统仿真》课程相关资料，由大连理工大学<a href="http://faculty.dlut.edu.cn/1989011023/zh_CN/index.htm" target="_blank" rel="noopener">金淳</a>教授主讲，参考其课程相关课件，内容比较基础，希望碎片化的知识可以得到融会贯通。</p><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1-课程要求"><a href="#1-课程要求" class="headerlink" title="1.课程要求"></a>1.课程要求</h2><ul><li>基础知识：概率论和数理统计，运筹学，系统分析方法</li><li>程序设计：理解C++、JAVA、VB、C#、Excel</li></ul><h2 id="2-学习方法"><a href="#2-学习方法" class="headerlink" title="2.学习方法"></a>2.学习方法</h2><ul><li>多动手实践</li><li>尽可能学习掌握一种仿真工具，如ARENA，Em_Plant，AnyLogic，Simio，FlexSim，VenSim，NetLogo，Matlab等。。。</li></ul><h2 id="3-参考书目"><a href="#3-参考书目" class="headerlink" title="3.参考书目"></a>3.参考书目</h2><ul><li>《管理系统模拟》，卫强，陈国清，高等教育出版社</li><li>《离散事件系统仿真》，[美]J.Banks ，第4版，机械工业出版社，肖田元等译</li><li>《系统仿真导论》， 肖田元等，清华大学出版社</li><li>《离散系统仿真》，冯允成，邹志红等，机械工业出版社</li><li>《系统建模与仿真》，胡斌，周明等，清华大学出版社</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-1/1.png" alt="1"></p><h1 id="二、系统仿真概述"><a href="#二、系统仿真概述" class="headerlink" title="二、系统仿真概述"></a>二、系统仿真概述</h1><h2 id="2-1-管理与决策"><a href="#2-1-管理与决策" class="headerlink" title="2.1 管理与决策"></a>2.1 管理与决策</h2><ul><li>决策是管理的职能之一；</li><li>决策是一个面向系统（组织）的决定；</li><li>仿真是来做决策支持的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-1/2.png" alt="2"></p><h3 id="管理决策的特点"><a href="#管理决策的特点" class="headerlink" title="管理决策的特点"></a>管理决策的特点</h3><p><strong>1、决策的类型</strong></p><p>​      结构性（程序性因果确定）、非结构性（需要创造性）</p><p><strong>2、不确定性和风险</strong></p><p>​      信息不确定、结果不确定—-不能确切地预测结果—-面临风险</p><p><strong>3、冲突性</strong></p><p>​      管理者所设立的目标、不同部门之间、上下级之间</p><p><strong>决策的6阶段：</strong></p><p>确认问题—-提出备选方案—-评估备选方案—-选择—-实施—评价</p><p><strong>如何评价决策的好坏？</strong></p><p>（1）结果出来以后就知道了。——管理者的失职。 </p><p>如果决策是错误的，造成的损失：时间、财产、信誉、。。。</p><p>（2）决策实施之前判断。——管理者的素质和水平</p><p>如何判断？①管理者自身的才能；②借助科学技术工具。</p><h3 id="管理决策技术的类型"><a href="#管理决策技术的类型" class="headerlink" title="管理决策技术的类型"></a>管理决策技术的类型</h3><p><strong>管理决策技术适用管理决策的问题</strong>：</p><ol><li>程序型、结构型决策</li><li>信息确定型</li><li>目标可以数量化型</li></ol><p><strong>典型管理决策问题举例（利用运筹学）</strong>：</p><ol><li>运输/库存问题</li><li>生产计划问题</li><li>排队/服务问题</li><li>网络计划问题</li></ol><h3 id="管理决策面临的挑战"><a href="#管理决策面临的挑战" class="headerlink" title="管理决策面临的挑战"></a>管理决策面临的挑战</h3><p>当前，管理决策对象的特点：</p><ol><li>管理的对象是一个系统。我们要面对日趋复杂的系统问题：生态环境、供应链网络、交通网络、社会系统、互联网系统、经济系统。。。</li><li>管理决策工作是一个复杂的系统工程。我们要面对日趋复杂的系统分析与决策问题：环境治理策略、供应链管理、交通管理、灾害对策、经济政策。。。</li><li>上述分析与决策问题对我们管理决策技术提出了挑战！</li></ol><ul><li>对复杂、庞大、随机变化系统，如何构建好的模型？<strong>准！</strong></li><li>如何快速求解这些模型？<strong>快！</strong></li><li>如何发现一个好的解决方案？<strong>好！</strong></li></ul><blockquote><p><strong>回答：采用计算机模拟方法求解</strong>。</p></blockquote><p><strong>管理决策技术方法</strong>：</p><ol><li>运筹学：一种数学分析方法</li><li>系统模拟（系统仿真）：一种系统分析方法</li></ol><p>系统模拟方法通过在计算机上建立仿真模型对系统的运行过程进行再现，求解问题的数值解。</p><p>首先，让我们从<strong>系统</strong>谈起。</p><h2 id="2-2-系统的定义和分类"><a href="#2-2-系统的定义和分类" class="headerlink" title="2.2 系统的定义和分类"></a>2.2 系统的定义和分类</h2><h3 id="系统定义"><a href="#系统定义" class="headerlink" title="系统定义"></a>系统定义</h3><p>中国著名学者钱学森是这样定义系统的：系统是由相互作用相互依赖的若干组成部分结合而成的，具有特定功能的有机整体，而且这个有机整体又是它从属的更大系统的组成部分。</p><p>在系统科学中，一个系统以其内在特征及表征而区别于其他系统。</p><ul><li>内在特征：实体的集合、实体的属性、系统的活动、由此构成系统的三大要素。 </li><li>表征：系统的环境（系统界面状态，约束和干扰等）。</li></ul><p>模型作为系统的抽象，必须能够描述系统的表征及内在特征。</p><h3 id="系统的分类"><a href="#系统的分类" class="headerlink" title="系统的分类"></a>系统的分类</h3><div class="table-container"><table><thead><tr><th><strong>分类特征</strong></th><th><strong>类别</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td><strong>物理特征</strong></td><td>工程系统  非工程系统</td><td>电气，机械、化工、热力等  经济、交通、管理、生态等</td></tr><tr><td><strong>状态变化</strong></td><td>连续系统<br> 离散系统 <br>连续离散混合系统</td><td>飞机，导弹，流体及机械的运动  生产、医院、通信、交通系统等  上述系统的混合</td></tr><tr><td><strong>自然属性</strong></td><td>自然系统<br>人造系统（社会、概念等）</td><td>天体、生物、生态  企业、计算机，</td></tr><tr><td><strong>规模状况</strong></td><td>简单小系统<br>复杂大系统</td><td>机械  生态，种群，宇宙</td></tr><tr><td><strong>时变属性</strong></td><td>静态系统（static）<br>动态系统（dynamic）</td><td>大桥、公路、房屋    交通系统</td></tr></tbody></table></div><h3 id="按状态变化分类"><a href="#按状态变化分类" class="headerlink" title="按状态变化分类"></a>按状态变化分类</h3><p>按系统中起主导作用的状态的变化是否连续，分为连续系统、离散系统，连续-离散混合系统。</p><div class="table-container"><table><thead><tr><th><strong>分类特征</strong></th><th><strong>类别</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td><strong>连续系统</strong></td><td><strong>系统的状态随时间连续变化</strong></td><td><strong>飞机，导弹，流体及机械运动</strong></td></tr><tr><td><strong>离散系统</strong></td><td><strong>系统的状态变化只在时间的离散时刻发生，且往往随机。</strong></td><td><strong>生产、医院、通信、交通系统</strong></td></tr><tr><td><strong>连续-离散混合系统</strong></td><td><strong>系统的状态既包括随时间连续变化的参量，也包括只在离散时刻发生变化的参量。</strong></td><td><strong>上述系统的混合</strong></td></tr></tbody></table></div><blockquote><p>小结：从系统建模及仿真的角度，把系统分为连续系统、离散系统，连续-离散混合系统有益于进行系统的分析和仿真建模。     </p></blockquote><h2 id="2-3-系统模型"><a href="#2-3-系统模型" class="headerlink" title="2.3 系统模型"></a>2.3 系统模型</h2><h3 id="系统模型的概念"><a href="#系统模型的概念" class="headerlink" title="系统模型的概念"></a>系统模型的概念</h3><p>系统模型是系统的一种表示，是为研究系统而开发的，对系统的内在联系及其与外界关系的一种描述。</p><p>系统模型按模型的表示方法分为：</p><ul><li>物理模型：又称实体模型，它是实际系统在尺寸上缩小或放大后的相似体。例：地图、沙盘。</li><li>数学模型：是用数学方程来描述实际系统的结构和性能的模型，如果模型中不含时间因素，则称静态模型，若模型与时间有关，则称动态模型。例：麦克斯韦方程。</li><li>半实物模型：上述两种模型的混合</li></ul><h3 id="连续系统的数学模型"><a href="#连续系统的数学模型" class="headerlink" title="连续系统的数学模型"></a>连续系统的数学模型</h3><p>连续系统是指一个系统的状态随时间连续变化。</p><p>数学模型可以用微分方程或差分方程表示。</p><p>设连续系统的状态变量为：</p><script type="math/tex; mode=display">x(t)=(x_1,x_2,......,x_n)</script><p>则系统的系统状态值可表示为：</p><script type="math/tex; mode=display">y(x,t)=(x_1,x_2,......,x_n,t)</script><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-1/3.png" alt="3"></p><h3 id="离散系统数学模型"><a href="#离散系统数学模型" class="headerlink" title="离散系统数学模型"></a>离散系统数学模型</h3><p>离散系统是指系统的状态变化只在时间的离散时刻发生，而且往往又是随机的。</p><p>设离散系统的状态变量为：</p><script type="math/tex; mode=display">x(t)=(x_1,x_2,......,x_n)</script><p>系统的状态值为在有限离散的时间点上的离散量。</p><p>其运动方程不可以用微分方程表示。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-1/4.png" alt="4"></p><h2 id="2-4-系统仿真的概念和技术特点"><a href="#2-4-系统仿真的概念和技术特点" class="headerlink" title="2.4 系统仿真的概念和技术特点"></a>2.4 系统仿真的概念和技术特点</h2><h3 id="仿真的定义"><a href="#仿真的定义" class="headerlink" title="仿真的定义"></a>仿真的定义</h3><p><strong>仿真定义1：</strong> 从技术应用角度，系统仿真是以相似原理、控制理论、计算技术、信息技术及应用领域的专业技术为基础，以计算机和各种物理效应设备为工具，利用数学模型或部分实物对实际或设想的系统进行动态实验研究的一门综合性技术。 </p><p><strong>仿真定义2：</strong>系统仿真是根据被研究的真实系统的模型，利用计算机进行实验研究的一种方法。它是建立在系统科学、系统识别、控制理论、计算技术与控制工程基础上的一门综合性很强的实验科学技术，是分析、综合各类系统，特别是大系统的一种研究方法和有力的工具。</p><p><strong>仿真定义3：</strong>从技术特征角度，系统仿真是以系统理论、形式化原理、随机过程及统计学理论、优化理论为基础，以计算机软、硬件系统为工具，对现实或未来系统进行动态实验研究的理论和方法。</p><blockquote><p>用一句话定义系统仿真的概念：<strong>系统仿真</strong>是利用计算机对系统模型进行动态实验研究的一种方法。</p></blockquote><h3 id="系统仿真的分类"><a href="#系统仿真的分类" class="headerlink" title="系统仿真的分类"></a>系统仿真的分类</h3><p>系统模拟/仿真分类可从不同的角度分为以下几类：</p><ul><li>模型的种类：物理模拟、数学模拟、半实物模拟</li><li>模拟时钟与实际时钟的比：实时、亚实时、超实时模拟</li><li>模型对象特征：连续系统、离散系统、混合系统模拟</li><li>应用领域：工程领域仿真、非工程领域仿真</li><li>功能用途：工程仿真和训练仿真。 </li><li>虚实结合程度：结构仿真、虚拟仿真、实况仿真</li></ul><p>按模拟时钟与实际时钟的比例关系分类：</p><ul><li><p>实际动态系统的时间基准为实际时钟</p></li><li><p>系统模拟时模型所采用的时钟称为模拟时钟。</p></li><li><p>根据模拟时钟与实际时钟之间的比例关系，系统模拟分为以下三种：</p><p><strong>- 实时模拟：</strong>即模拟时钟与实际时钟完全一致，一般也称为在线模拟。其意义在于可以与实际系统并行进行。如QUAKE等游戏。</p><p><strong>- 亚实时模拟：</strong>即模拟时钟慢于实际时钟。特别是在模拟速度要求不苛刻的情况下均是亚实时模拟。大多数离线研究和分析，也称为离线模拟。</p><p><strong>- 超实时模拟：</strong>即模拟时钟快于实际时钟。例如，社会经济系统模拟，气象实验预测、交通系统模拟等。</p></li></ul><p>按系统模型的特性分类：</p><ul><li><p>从模拟实现的角度看，系统模型特性可分为两大类</p><ul><li><p>连续系统</p></li><li><p>离散事件系统</p></li></ul></li><li><p>由于这两类系统固有运动规律的不同，因而描述其运动规律的模型形式就有很大的差别，相应的，系统模拟技术也分为两大类：</p><ul><li><p>连续系统模拟（自然和工程系统）</p></li><li><p>离散事件系统模拟（人造系统）</p></li></ul></li></ul><p><strong>连续系统模拟（successive event system）：</strong>是指系统状态随时间连续变化的系统的模拟。</p><p>在工程领域内连续系统的模拟可以分为4大类：</p><ul><li>数学仿真（Mathematical Simulation）</li><li>硬件在回路仿真（Hardware-in-loop Simulation）</li><li>软件在回路仿真（Software-in-loop Simulation）</li><li>人在回路仿真（Man-in-loop Simulation）</li></ul><p><strong>离散系统模拟（discrete event system）：</strong>是指系统状态在某些随机时间点上发生离散变化的系统，它与连续系统的主要区别在于：</p><ul><li>状态变化发生在随机时间点上。这种引起状态变化的行为称为“事件”，因而这类系统可以视为由事件驱动的；</li><li>而且“事件”往往发生在随机时间点上，亦称为随机事件，因而离散事件系统一般都具有随机特性；</li><li>系统的状态变量往往是离散变化的。例如，银行排队服务系统、库存系统等</li></ul><blockquote><p>许多管理领域中的问题都可视为离散事件系统。</p></blockquote><h3 id="系统仿真的特点"><a href="#系统仿真的特点" class="headerlink" title="系统仿真的特点"></a>系统仿真的特点</h3><p><strong>系统仿真具有以下技术特点：</strong></p><ul><li><p>仿真模型是实际系统的近似抽象化。</p></li><li><p>仿真是基于计算机的数值实验技术和试验环境。</p></li><li><p>仿真运行是一个对系统行为的抽样过程，它包括两个方面：</p><ul><li><p>一次仿真运行结果实际上是对系统行为的一次随机抽样</p></li><li><p>多次仿真运行结果实际上是一定样本量的随机抽样。</p></li></ul></li><li><p>仿真结果需要通过统计推断，才能得出系统真实的性能估计</p></li></ul><p><strong>系统仿真的优点：</strong></p><ol><li>经济性。系统仿真是利用计算机，对仿真模型进行试验，它具有利用模型进行试验的一系列优点，如费用低、易于进行真实系统难以实现的各种试验等。</li><li>简单性。有些系统的模型难以用一般的数学形式表达；有的虽然能用数学形式表达，但没有解析方法可求解；有的虽然有解析解，但其数学过程过于复杂、计算量过大。用计算机仿真方法则不受这些限制，从而便于仿真技术的推广。</li><li>安全性。在真实系统中要实现完全相同条件下的重复试验是很困难的，在计算机仿真试验中则很容易实现。</li><li>最优性。通过系统仿真分析复杂系统的特性，并通过方案比较得到最优方案。</li><li>预见性。对于经济、金融、社会、战争等非工程系统，直接实验是不可能的，通过计算机仿真可以研究控制的策略。</li></ol><p><strong>系统仿真的缺点：</strong></p><ul><li>工作量大：仿真试验多次重复运行，数据量大这些特点使它占用相当多的机时和存储空间，系统仿真的工作量也很大，消耗的人力和计算机费用是十分可观的。</li><li>近似求解：仿真方法得到的解是近似解而非精确解，而且其精度又不容易控制。</li><li>特殊解：仿真方法得到的解是特殊解而通解，所以需要在不同条件下大量运行模拟以求最优解。</li><li>备选性：系统仿真的方法只有在难以建立用解析方法求解的数学模型的时候，才考虑使用。在使用时要针对系统的特定情况，分析使用仿真方法的利弊。</li></ul><h3 id="系统仿真与解析法的比较"><a href="#系统仿真与解析法的比较" class="headerlink" title="系统仿真与解析法的比较"></a>系统仿真与解析法的比较</h3><div class="table-container"><table><thead><tr><th><strong>项目</strong></th><th><strong>仿真方法</strong></th><th><strong>解析法</strong></th></tr></thead><tbody><tr><td><strong>建模精度</strong></td><td><strong>用于由于随机因素而无法用准确的数学模型表示的实际系统。</strong></td><td><strong>实际系统的高度抽象化</strong></td></tr><tr><td><strong>动态系统建模</strong></td><td><strong>仿真可以分析一个长期的系统变化过程。</strong></td><td><strong>对于动态随机系统不方便</strong></td></tr><tr><td><strong>方案选优</strong></td><td><strong>在实际系统建成以前分析系统的变化规律并选择最佳方案。</strong></td><td><strong>对于动态随机系统不方便</strong></td></tr><tr><td><strong>复杂系统建模</strong></td><td><strong>系统仿真是求解复杂实际系统的重要工具</strong></td><td><strong>不方便</strong></td></tr></tbody></table></div><h3 id="系统仿真的必要性"><a href="#系统仿真的必要性" class="headerlink" title="系统仿真的必要性"></a>系统仿真的必要性</h3><p>通常在以下条件下需要采用系统仿真手段解决问题：</p><ol><li>系统太大，需要缩小。如宇宙、天体、地球等；</li><li>系统太复杂，无法描述，需要简化；</li><li>系统太贵重，需要节省。如飞机、卫星、导弹等；</li><li>系统的试验时间太长，需要方便和省时，如宇宙演化，地质变迁等；</li><li>实施太危险，需要安全，如核武器、战争等；</li><li>系统太小或无法观察，需要缩小。如原子、地球内部等；</li><li>系统作试验后，会破坏原系统，无法复原；</li><li>真实系统上需要作多次试验时，难以保证每一次的实验条件都相同，导致无法判断试验结果；</li><li>人是试验的一部分时，有时会和平时不一样，这往往影响试验结果；</li><li>系统处于设计阶段，因此不可能在真实的系统上作试验。</li></ol><h3 id="对系统仿真技术方法的认识"><a href="#对系统仿真技术方法的认识" class="headerlink" title="对系统仿真技术方法的认识"></a>对系统仿真技术方法的认识</h3><p><strong>认识新手段：</strong>是继理论分析、实物试验后，人类认识世界的新兴手段。</p><p><strong>思考方法论：</strong>在理论上体现了试验思考的方法论。</p><p><strong>求解复杂性：</strong>是求解复杂系统的重要工具。 </p><p><strong>建模简单化：</strong>系统仿真模型与实际系统的运行过程具有形式上和逻辑上的对应性。</p><p><strong>高科技：</strong>已经跻身于高科技领域，与人工智能、网络技术、优化理论、图形技术、虚拟现实技术等融为一体。</p><h2 id="2-5-系统仿真在管理系统中的应用"><a href="#2-5-系统仿真在管理系统中的应用" class="headerlink" title="2.5 系统仿真在管理系统中的应用"></a>2.5 系统仿真在管理系统中的应用</h2><h3 id="（1）应用于系统全寿命周期"><a href="#（1）应用于系统全寿命周期" class="headerlink" title="（1）应用于系统全寿命周期"></a>（1）应用于系统全寿命周期</h3><p>一个真实系统的实现从开始提出到最后实现，要经历几个阶段：方案论证、系统分析、初步设计、具体设计、系统试验、投入运行、人员培训。在上述各个阶段中，都可以应用计算机模拟技术</p><div class="table-container"><table><thead><tr><th><strong>阶段</strong></th><th><strong>应用内容</strong></th></tr></thead><tbody><tr><td><strong>方案论证</strong></td><td><strong>对各种方案进行技术经济比较、选择合理方案</strong></td></tr><tr><td><strong>系统分析</strong></td><td><strong>分析系统的特性，确立数学模型，分析系统瓶颈</strong></td></tr><tr><td><strong>初步设计</strong></td><td><strong>选择合理的系统构造，确定某些部分的合理结构</strong></td></tr><tr><td><strong>具体设计</strong></td><td><strong>优化系统参数，协调各部分功能</strong></td></tr><tr><td><strong>系统试验</strong></td><td><strong>将系统样机接入模拟系统进行模拟实验，考核系统设计效果</strong></td></tr><tr><td><strong>投入运行</strong></td><td><strong>调整、改进系统某些参数，使系统达到最佳状态</strong></td></tr><tr><td><strong>人员培训</strong></td><td><strong>对人员进行操作训练，系统控制模拟演练</strong></td></tr></tbody></table></div><h3 id="（2）在管理与经济等领域的应用"><a href="#（2）在管理与经济等领域的应用" class="headerlink" title="（2）在管理与经济等领域的应用"></a>（2）在管理与经济等领域的应用</h3><p>系统仿真技术广泛应用于如下领域的运行管理，方案论证，企业诊断，决策、策略与风险分析等。</p><ul><li>国民经济、人口、生态、能源规划</li><li>企业经营、市场，销售预测系统、供应链物流管理</li><li>企业生产及库存系统（流程、离散工业，能源矿山）</li><li>航空航天系统、交通运输系统</li><li>电力网络、计算机及通信网络结构分析、系统流程分析</li><li>医院系统、服务系统、资源分配、布局规划</li><li>军事作战</li><li>人员培训：飞行员、电厂操作、武器系统、航空航天</li></ul><h2 id="2-6-系统仿真的实施过程概要"><a href="#2-6-系统仿真的实施过程概要" class="headerlink" title="2.6 系统仿真的实施过程概要"></a>2.6 系统仿真的实施过程概要</h2><h3 id="系统仿真三要素"><a href="#系统仿真三要素" class="headerlink" title="系统仿真三要素"></a>系统仿真三要素</h3><p>系统仿真过程的三要素及其关系如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-1/5.png" alt="5"></p><h3 id="系统仿真的三个阶段"><a href="#系统仿真的三个阶段" class="headerlink" title="系统仿真的三个阶段"></a>系统仿真的三个阶段</h3><p>1、建模阶段：</p><ul><li><p>根据研究目的、系统的先验知识以及观察的数据，对系统进行分析，确定组成要素、状态变量和参数之间的逻辑关系，建立被系统的数学逻辑模型。形成概念模型。</p><p>2、模型变换阶段</p></li><li><p>根据原始数学逻辑模型的形式、计算机的类型以及仿真目的将原始数学逻辑模型转换为适合于计算机处理的仿真模型。 </p></li></ul><p>3、仿真运行阶段</p><ul><li>对模型进行装载试验，并使它在计算机上运转起来。根据运行结果对模型进行验证，最后按试验要求整理成报告输出。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-1/6.png" alt="6"></p><h3 id="系统仿真的实施步骤"><a href="#系统仿真的实施步骤" class="headerlink" title="系统仿真的实施步骤"></a>系统仿真的实施步骤</h3><p><strong>1、问题的阐述</strong></p><p>每一项研究应从说明问题开始。主要任务是问题描述与系统定义，明确仿真对象，亦即确定被仿真系统的边界，确定仿真的目标及任务。</p><p><strong>2、设置目标及总的具体计划</strong></p><p>目标表示由模拟回答问题，以便确定对所陈述的问题和所说明目标模拟是否合适。本步骤的任务在于明确项目的需求。</p><p><strong>3、建立模型</strong></p><p>构造一个系统模型为转换为仿真模型打下基础。一般用流程图的形式加以描述，重点描述临时实体的产生规律，历经系统的过程，永久实体对临时实体的作用规则、条件及结果。</p><p><strong>4、数据收集</strong></p><p>在构造模型和收集所需数据之间经常相互影响。随机变量模型的确定在离散事件系统建模中占有十分重要的地位，要搜集足够多的原始数据以便较好地确定其分布的类型及参数。</p><p><strong>5、仿真开发</strong></p><p>确定仿真方法（确定随机变量和建模策略）、系统模型的抽象（事件调度法、采用活动扫描法或进程交互法）、设计仿真程序（基于某仿真平台进行编程开发）。</p><p><strong>6、验证（Verify）</strong></p><p>验证与模拟模型的计算机程序有关。首先要校验仿真程序的正确性，然后校验仿真模型的正确性——验证经过验证是正确的仿真模型才能进行仿真试验。</p><p><strong>7、 确认（Validate）</strong></p><p>确定模型是否精确地代表实际系统。</p><p><strong>8、试验设计</strong></p><p>确定进行模拟的方案。如运行长度和次数等。仿真试验条件及运行次数与输出分析的要求有密切关系，这是与连续系统仿真的又一重要的区别。</p><p><strong>9、生产性运行和分析</strong></p><p>用于估计所模拟的系统设计的性能测度。</p><p><strong>10、 进一步运行</strong></p><p>根据已完成的运行分析，确定是否还需增加运行以及应遵循什么样的附加试验设计。</p><p><strong>11、 程序说明和报表结果</strong></p><p>仿真输出作为系统评价的依据。</p><p><strong>12、实现</strong></p><p>实现阶段是否成功取决于前面已执行的结果是否合适。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/System-Simulation-1/7.png" alt="7"></p><h1 id="三、本章小结"><a href="#三、本章小结" class="headerlink" title="三、本章小结"></a>三、本章小结</h1><ol><li>系统：系统是指互相联系又互相作用的对象的有机结合。系统可按不同方法分类。</li><li>模型：环境、实体（集合、属性）活动。</li><li>系统的数学模型：连续系统的数学模型、离散系统模型、混合系统数学模型。</li><li>系统仿真的定义：利用数学模型或部分实物对实际或设想的系统进行动态实验研究的一门综合性技术。</li><li>仿真法与解析法的比较。</li><li>系统仿真的优点、缺点。</li><li>系统仿真在管理系统中应用的必要性。</li><li>系统仿真实施的三阶段：概念模型、仿真模型、仿真运行</li></ol>]]></content>
      
      
      <categories>
          
          <category> 仿真模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代港口物流管理（四）新技术与智慧港口</title>
      <link href="/post/port-logistics-4/"/>
      <url>/post/port-logistics-4/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>上一篇：<a href="/post/port-logistics-3/">现代港口物流管理（三）自动化码头工艺与新技术应用</a></p><p>自1956年夏天在达特茅斯夏季人工智能研究会议上人工智能的概念被第一次提出以来，人工智能技术的发展已经走过了60年的历程。随着近年来数据爆发式的增长、计算能力的大幅提升以及深度学习算法的发展和成熟，我们已经迎来了人工智能概念出现以来的第三个浪潮期。</p><p>基于大数据和强大计算能力的机器学习算法已经在计算机视觉、语音识别、自然语言处理等一系列领域中取得了突破性的进展，基于人工智能技术的应用也已经开始成熟。同时，这一轮人工智能发展的影响已经远远超出学界之外，不仅政府、企业、非营利机构都开始拥抱人工智能技术，港口行业也不例外。</p><h1 id="一、人工智能等新技术"><a href="#一、人工智能等新技术" class="headerlink" title="一、人工智能等新技术"></a>一、人工智能等新技术</h1><h2 id="人工智能-AI"><a href="#人工智能-AI" class="headerlink" title="人工智能(AI)"></a>人工智能(AI)</h2><p>维基百科是这样定义人工智能的：</p><p><strong>人工智能</strong>（英语：Artificial Intelligence，缩写为<strong>AI</strong>）亦称智械、机器智能，指由人制造出来的机器所表现出来的智能。通常人工智能是指通过普通计算机程序来呈现人类智能的技术。该词也指出研究这样的智能系统是否能够实现，以及如何实现。同时，通过医学、神经科学、机器人学及统计学等的进步，常态预测则认为人类的无数职业也逐渐被其取代。</p><div class="table-container"><table><thead><tr><th>人类智能</th><th>人工智能研究领域</th></tr></thead><tbody><tr><td>语言智能</td><td>自然语言处理，如讯飞翻译、小度小度、小米小爱</td></tr><tr><td>神经控制</td><td>深度神经网络，如AlphaGo</td></tr><tr><td>人类识别</td><td>计算机视觉，如物体检测</td></tr><tr><td>逻辑判断</td><td>机器证明及符号运算</td></tr><tr><td>机器学习</td><td>广告推荐系统、流量预测、分类</td></tr><tr><td>多种智能组合</td><td>综合人工智能</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/1.jpg" alt="1"></p><h2 id="港口-人工智能"><a href="#港口-人工智能" class="headerlink" title="港口 + 人工智能"></a>港口 + 人工智能</h2><ul><li>视觉识别：车辆号牌，集装箱编号OCR识别，位置识别等</li><li>智能设备：AGV，岸桥自动装卸，自动化轨道吊，智能闸口，无人集卡等</li><li>智能调度：深度强化学习应用到港口生产调度管理</li><li>智能控制：船舶靠泊防碰撞智能控制，岸桥、AGV、龙门吊等设备的智能控制 </li><li>模式识别：港口客户业务模式识别，车辆、船舶到港模式识别等</li></ul><h2 id="物联网-Internetof-Things（IoT）"><a href="#物联网-Internetof-Things（IoT）" class="headerlink" title="物联网 Internetof Things（IoT）"></a>物联网 Internetof Things（IoT）</h2><ul><li>感知：射频识别（RFID）、红外感应器、全球定位系统、激光扫描器、图像视频采 集、温度湿度等信息传感设备</li><li>联接：按约定的协议，把物品通过物联网域名相连接，进行信息交换和通信</li><li>实现：物品智能化识别、定位、跟踪、监控和管理</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/2.png" alt="2"></p><h2 id="港口系统的物联网"><a href="#港口系统的物联网" class="headerlink" title="港口系统的物联网"></a>港口系统的物联网</h2><p>港口聚集了大量的机械设备，拥有复杂的管理流程</p><p>物联网信息：</p><ul><li>集卡位置、状态及相关信息</li><li>集装箱位置、状态（开关箱、温度、湿度，残损）等信息</li><li>港内岸桥、轨道吊、AGV、集卡等设备的状态、位置和速度等</li><li>闸口状态、车辆排队长度等</li><li>船舶状态信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/3.png" alt="3"></p><h2 id="港口系统的大数据"><a href="#港口系统的大数据" class="headerlink" title="港口系统的大数据"></a>港口系统的大数据</h2><blockquote><p>什么是大数据呢？维基百科中是这样定义的：</p><p><strong>大数据</strong>（英语：<strong>Big data</strong>），又称为<strong>巨量资料</strong>，指的是在传统数据处理应用软件不足以处理的大或复杂的数据集的术语。</p><p>大数据也可以定义为来自各种来源的大量非结构化或结构化数据。从学术角度而言，大数据的出现促成广泛主题的新颖研究。这也导致各种大数据统计方法的发展。大数据并没有统计学的抽样方法；它只是观察和追踪发生的事情。因此，大数据通常包含的数据大小超出传统软件在可接受的时间内处理的能力。由于近期的技术进步，发布新数据的便捷性以及全球大多数政府对高透明度的要求，大数据分析在现代研究中越来越突出。</p></blockquote><p> 港口作为物流链上的重要节点，沉淀了海量的数据资源，拥有明显的数据优势</p><p>港口大数据包括：</p><ul><li>货物相关数据</li><li>物流业务数据</li><li>机械设备数据</li><li>船舶相关数据</li><li>设施相关数据等</li></ul><p>大数据时代已经近在眼前，面对新的商业战场，兵临城下，港口行业不能独善其身，数据化变革势在必行。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/4.png" alt="4"></p><h1 id="二、新技术的港口应用方向"><a href="#二、新技术的港口应用方向" class="headerlink" title="二、新技术的港口应用方向"></a>二、新技术的港口应用方向</h1><h2 id="1-港口生产的自动化智能化"><a href="#1-港口生产的自动化智能化" class="headerlink" title="1.港口生产的自动化智能化"></a>1.港口生产的自动化智能化</h2><h3 id="1-1-集装箱业务智能化自动化管理"><a href="#1-1-集装箱业务智能化自动化管理" class="headerlink" title="1.1 集装箱业务智能化自动化管理"></a>1.1 集装箱业务智能化自动化管理</h3><ul><li>对集装箱业务信息资源进行整体规划、融合、利用</li><li>覆盖集装箱的运输、仓储、装卸、中转、及货代等港口业务各环节的数据信息</li><li>实现信息智能感知、系统互连互通，改善软环境</li><li>深度挖掘信息资源，为客户提供一站式集装箱业务信息服务，提高国际港 务集装箱业务整体运营与服务效率</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/5.png" alt="5"></p><p><strong>智能理货</strong>：</p><p>用视频和计算机系统替代“人眼”自动识别与核销箱号、 箱损、抓拍拖车号，BAY位等海量重复劳动。</p><p>节约人工成本： 将实施前30人工减至12人（节约18名）省去 61% 人工支出</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/6.png" alt="6"></p><p><strong>远程操控</strong>：</p><p>应用物联网、自动控制技术，实时传输作业场景，实现桥吊、龙门吊的远程操作。改善司机作业环境，减 轻劳动强度，提高作业绩效。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/7.png" alt="7"></p><h3 id="1-2-自动化码头AGV智能路径优选"><a href="#1-2-自动化码头AGV智能路径优选" class="headerlink" title="1.2 自动化码头AGV智能路径优选"></a>1.2 自动化码头AGV智能路径优选</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/8.png" alt="8"></p><blockquote><p>*Pengfei Zhou. Anisotropic Q-learning and waiting estimation based real-time Routing for Automated Guided Vehicle at Automated Container Terminal, to be pressed.</p></blockquote><p>主要利用的技术有：深度学习、强化学习</p><p>结论：</p><ul><li>WEAQM和AQM可实现AGV依环境实时变化 的路径优化选择</li><li>AQM较最短路径法节约20%行驶时间，较 JLM节约5%以上</li><li>WEAQM可节约25%和10%</li></ul><div class="table-container"><table><thead><tr><th></th><th>WEAQM / %</th><th>AQM  / %</th><th>JLM  / %</th><th>SDR/ %</th></tr></thead><tbody><tr><td>Average</td><td>115.62</td><td>119.67</td><td>125.55</td><td>142.65</td></tr><tr><td>Max</td><td>121.97</td><td>125.35</td><td>131.07</td><td>153.43</td></tr><tr><td>Min</td><td>107.07</td><td>110.08</td><td>116.13</td><td>125.57</td></tr></tbody></table></div><h2 id="2-港口业务增效与增值服务"><a href="#2-港口业务增效与增值服务" class="headerlink" title="2.港口业务增效与增值服务"></a>2.港口业务增效与增值服务</h2><h3 id="2-1-货物跟踪与综合服务"><a href="#2-1-货物跟踪与综合服务" class="headerlink" title="2.1 货物跟踪与综合服务"></a>2.1 货物跟踪与综合服务</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/9.png" alt="9"></p><h3 id="2-2-一体化智能商贸服务"><a href="#2-2-一体化智能商贸服务" class="headerlink" title="2.2 一体化智能商贸服务"></a>2.2 一体化智能商贸服务</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/10.png" alt="10"></p><h2 id="3-港口运维监控与风险识别"><a href="#3-港口运维监控与风险识别" class="headerlink" title="3.港口运维监控与风险识别"></a>3.港口运维监控与风险识别</h2><h3 id="集装箱物流安全监控与报警"><a href="#集装箱物流安全监控与报警" class="headerlink" title="集装箱物流安全监控与报警"></a>集装箱物流安全监控与报警</h3><ul><li>安全问题：防止集装箱失窃、偷 渡、走私等</li><li>关键：监控集装箱开箱</li><li>铅封弊端：无法记录开关箱时间 地点，不能及时反馈，容易伪造</li><li>实现：及时发现和全程记录安全 隐患，降低抽验箱率、加速通关</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/11.png" alt="11"></p><ul><li>报警思路：箱内及箱门上传感 器获取实时感知信息，通过有 线或无线通信模块实现信号压 缩转换并发送给报警器，实时 判断安全隐患</li><li>若非法开关箱，则报警并将时 间地点及关联信息记入电子标签</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/12.png" alt="12"></p><h1 id="三、智慧港口与案例"><a href="#三、智慧港口与案例" class="headerlink" title="三、智慧港口与案例"></a>三、智慧港口与案例</h1><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/13.png" alt="13"></p><p><strong>货畅其流</strong></p><ul><li>单证电子化</li><li>单一窗口</li><li>智能闸口</li><li>多式联运</li><li>公共物流信息平台</li></ul><p><strong>人畅其行</strong></p><ul><li>导航、票务和支付等客运全程“一站式”服务</li><li>水路客运联网售票</li><li>交通一卡通</li></ul><p><strong>物尽其用</strong></p><ul><li>港口设备设施的自动监测和优化调度</li><li>5G网络</li><li>自动化码头</li></ul><p><strong>安全高效</strong></p><ul><li>港、人、车、船、货的 全面感知和广泛互联</li><li>危险货物全程监管体系</li><li>信用体系</li></ul><hr><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/14.png" alt></p><p><strong>智慧港口内容</strong>：</p><ol><li>港口智能集疏运协同平台</li><li>多式联运服务平台</li><li>一站式网上服务大厅</li><li>大数据中心</li></ol><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/15.png" alt></p><p><strong>港口智能集疏运协同平台</strong></p><ul><li>港口信息服务从港区内延伸到客户订舱</li><li>信息全程实时采集，无纸化</li><li>与码头TOS系统对接，提供预约服务</li><li>集卡智能调度，实现车货匹配</li><li>闸口智慧化管理</li><li>移动端应用</li><li>涵盖内外贸集装箱、散杂货</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-4/16.png" alt></p><p><strong>多式联运服务平台</strong></p><ul><li>陆地港、支线港信息共享与交互</li><li>海铁联运信息跟踪</li><li>箱、货、车、船等货物运输工具全程 信息服务，全程物流跟踪</li><li>关检申报、放行信息管理</li></ul><p><strong>一站式网上服务平台</strong></p><ul><li>统一业务受理</li><li>网上金融服务</li><li>业务咨询 </li><li>公共信息查询</li><li>危险品货物申报、追踪</li></ul><p><strong>大数据中心</strong></p><ul><li>以数据集中和共享为途径，推动业务 融合、数据融合和技术融合。</li><li>对接国际贸易单一窗口，实现口岸通 关数据与港口物流数据的实时共享。</li><li>对接部级和有关港口行政管理部门数据，及时上报重点物资运输等信息， 推进跨部门间信息开放与共享。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 土木水利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水利 </tag>
            
            <tag> 港口 </tag>
            
            <tag> 现代港口物流管理 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 智慧港口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代港口物流管理（三）自动化码头工艺与新技术应用</title>
      <link href="/post/port-logistics-3/"/>
      <url>/post/port-logistics-3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>上一篇：<a href="/post/port-logistics-2/">现代港口物流管理（二）港口物流设备设施与工艺</a></p><p>《现代港口物流管理》课程知识点</p><h1 id="一、自动化码头先进工艺"><a href="#一、自动化码头先进工艺" class="headerlink" title="一、自动化码头先进工艺"></a>一、自动化码头先进工艺</h1><h2 id="0-自动化集装箱码头（ACT）发展背景"><a href="#0-自动化集装箱码头（ACT）发展背景" class="headerlink" title="0.自动化集装箱码头（ACT）发展背景"></a>0.自动化集装箱码头（ACT）发展背景</h2><ul><li>人力成本上升，甚至缺工</li><li>吞吐量增加，装卸效率提高需求</li><li>节能、环保，作业安全要求</li><li>控制、定位、自动识别等自动化技术发展</li></ul><h2 id="1-自动化集装箱码头设备"><a href="#1-自动化集装箱码头设备" class="headerlink" title="1.自动化集装箱码头设备"></a>1.自动化集装箱码头设备</h2><h3 id="1-1-船舶装卸设备"><a href="#1-1-船舶装卸设备" class="headerlink" title="1.1 船舶装卸设备"></a>1.1 船舶装卸设备</h3><p><strong>半自动集装箱岸边装卸桥</strong></p><ul><li>单吊具、双吊具、三吊具</li><li>单小车、双小车(中转平台)</li><li>跨内车道、跨后车道</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/1.png" alt="1"></p><p><strong>ACT半自动岸桥形式</strong> </p><ul><li>双小车，海侧小车双吊具，路侧小车单吊具</li><li>后小车自动化，前小车远程操控（自动化辅助）</li><li>跨后车道，中转平台设于前或后支腿侧</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/3.png" alt="3"></p><h3 id="1-2-水平运输设备"><a href="#1-2-水平运输设备" class="headerlink" title="1.2 水平运输设备"></a>1.2 水平运输设备</h3><p><strong>集装箱跨运车(Straddle carrier)</strong></p><ul><li>具有自提自放功能，减少了与岸桥和堆场设备的对位操作和作业耦合，岸桥和堆场设备的效率高</li><li>多用途设备，可以堆取箱和搬运箱，有利于设备调配</li><li>设备较复杂，投资较大，故障率较高</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/4.png" alt="4"></p><p><strong>ALV（Automated Lifting Vehicle）</strong> </p><ul><li>具有无人驾驶、自主避障、自行从地面抓取箱等功能，减少作业耦合和设备等待</li><li>速度、灵活性上较AGV更优，整体生产作业效率更高</li><li>设备较复杂，自动化技术难度较大（应用&lt;5%）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/5.png" alt="5"></p><p><strong>AGV（Automated Guided Vehicle</strong></p><ul><li>具有无人驾驶、自动导航、定位精确、路径优化以及安全避障等智能化功能</li><li>电力驱动、技术成熟、目前应用较多</li><li>与岸桥和堆场设备作业耦合，整体生产作业效率受调度管理水平影响较大</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/6.png" alt="6"></p><p><strong>AGV伴侣</strong></p><ul><li>与AGV配合，可实现AGV与堆场设备的作业解耦</li><li>需要额外的控制设备，且需与AGV协调配合</li></ul><blockquote><p>AGV在堆场装卸集装箱时有两种方式，分别是配置AGV伴侣和采用自带顶升机构。国内首个自动化码头厦门远海配置的AGV伴侣方式，18台AGV配置8台固定的AGV伴侣。优点是AGV整体自重轻，故障点减少。但是AGV伴侣同时需要维护。并且如果其出现问题，就必须人工赴堆场现场进行排查，容易干扰自动化流程。 </p><p>后期的青岛和洋山自动化码头均采用带顶升装置的AGV，整体自重将增加5吨左右，同时单机结构更加复杂，有一个最大的好处，如果出现问题，可以将AGV开出来，到指定位置进行维修，无需人员到堆场现场，最大限度减少了对自动化流程的干扰。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/7.png" alt="7"></p><p><strong>L-AGV（Lifting AGV）</strong></p><ul><li>具有自举集装箱功能，减少与堆场设备的 作业耦合</li><li>技术相对比较成熟（青岛等）</li><li>与岸桥作业未实现解耦</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/8.png" alt="8"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/9.png" alt="9"></p><p>自动化拖车（Automated Tractor）</p><ul><li>半自动化码头</li><li>自动化改造</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/10.png" alt="10"></p><h3 id="1-3-堆场堆存设备"><a href="#1-3-堆场堆存设备" class="headerlink" title="1.3 堆场堆存设备"></a><strong>1.3 堆场堆存设备</strong></h3><p><strong>自动化轮胎式龙门吊（ARTG）</strong></p><ul><li>可实现设备转场调度，灵活性好</li><li>自重轻，轮压小，堆场结构要求低</li><li>定位难度大、自动化实现较困难</li><li>效率较低、应用较少</li><li>适于箱区平行岸线布置和自动化改造项目</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/11.png" alt="11"></p><p><strong>自动化轨道式龙门吊（ARMG）</strong></p><ul><li>行车速度快，效率高，跨度大，堆箱高，堆场利用率高</li><li>轨道运行，易于定位与控制，实现自动化</li><li>作业安全性和可靠性高，电力驱动，污染小</li><li>自重大，堆场强度和坡度要求高，灵活性差</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/12.png" alt="12"></p><ul><li><ul><li>|          | 自动化轨道式龙门吊                                           | 自动化轮胎式龙门吊                                           |<br>| :———- | :—————————————————————————————- | —————————————————————————————— |<br>| 外形尺寸 | 轨距(12箱，甚至更大)，可外伸                                 | 轨距(6箱)，一般不外伸                                        |<br>| 基本投资 | 需建变电站、铺电缆、设轨道等，投资高                         | 堆场投资较低                                                 |<br>| 运行成本 | 电力驱动，成本较低                                           | 柴油为主，成本较高（油价上涨）                               |<br>| 维修成本 | 低：电缆和钢制车轮基本不用维修和更换                         | 高：柴油机定期保养，轮胎定期更换                             |<br>| 故障率   | 低                                                           | 高（柴油机为主要故障点）                                     |<br>| 自动控制 | 易实现自动化                                                 | 难度较大                                                     |<br>| 安全性   | 轨道运行，不易碰箱，安全                                     | 需设置碰箱限位                                               |<br>| 环境保护 | 电力驱动，清洁，污染小                                       | 柴油为主，污染和噪声较大                                     |<br>| 工作效率 | 1、轨道和箱的位置相对固定，容易对箱，速度快，效率高 <br>2、不易实现转场工作 | 1、车道和箱位置不易固定，对箱难， 需进行掉箱回转<br>2、容易转场工作 |</li></ul></li></ul><h2 id="2-自动化码头工艺系统与布局"><a href="#2-自动化码头工艺系统与布局" class="headerlink" title="2.自动化码头工艺系统与布局"></a>2.自动化码头工艺系统与布局</h2><p><strong>2.1 箱区平行岸线：单/双小车岸桥+AGV+ARTG/ARMG</strong></p><ul><li>箱区平行岸线布置，箱区内设置AGV通道</li><li>采用ARTG，可转场调度，有利于平衡作业负担</li><li>AGV路径较固定、调度较简单</li><li>难于分割自动作业区，线路交叉，AGV搬运距离长</li><li>适于集装箱码头自动化改造项目</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/13.png" alt="13"></p><p><strong>2.2 箱区垂直岸线：单/双小车岸桥+AGV/ALV/SC+ARMG</strong></p><ul><li>箱区垂直岸线布置，海陆侧端部分别设交接区，便于实现作业区隔离</li><li>AGV车辆行驶路径较短</li><li>箱区内水平搬运箱任务需ARMG完成，负担大，尤其集中装卸船时</li><li>堆场翻箱率高、ARMG调度难度大</li><li>自动化码头的主要布局和工艺</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/14.png" alt="14"></p><p>堆场作业瓶颈问题：</p><ul><li>同轨多ARMG：作业干扰</li><li>双轨多ARMG：堆场利用率低 </li><li>有悬臂多ARMG：水转水箱 </li></ul><p>作业解耦： </p><ul><li>L-AGV+支架：堆场设备</li><li>AGV+伴侣：堆场设备 </li><li>ALV：堆场设备+岸桥</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/15.png" alt="15"></p><blockquote><p>这两种布局各有什么优势呢？</p><p>参考上一篇文章中引用的论文：<a href="/post/port-logistics-2/#论文引用">《集装箱码头堆场布置形式比较》</a></p></blockquote><p><strong>2.3 箱区垂直岸线：单/双小车岸桥+AGV/ALV/SC+ARMG</strong></p><p>车辆搬运效率问题：</p><ul><li>柔性路径：减少拥挤等待 </li><li>网状路径：减少行车路程</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/16.png" alt></p><h2 id="3-自动化码头发展历程"><a href="#3-自动化码头发展历程" class="headerlink" title="3.自动化码头发展历程"></a>3.自动化码头发展历程</h2><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/17.png" alt="17"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/18.png" alt="18"></p><h1 id="二、新型自动化码头概念系统"><a href="#二、新型自动化码头概念系统" class="headerlink" title="二、新型自动化码头概念系统"></a>二、新型自动化码头概念系统</h1><h2 id="1-双轨轮小车回字形布置ACT"><a href="#1-双轨轮小车回字形布置ACT" class="headerlink" title="1.双轨轮小车回字形布置ACT"></a>1.双轨轮小车回字形布置ACT</h2><p><strong>工艺系统主要组成</strong></p><ul><li>岸桥系统</li><li>码头前沿多路回字形双 轨轮小车系统</li><li>堆场高架行车</li><li>堆场后方多路回字形双轨轮小车系统</li><li>集疏港低架行车</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/19.png" alt></p><p><strong>关键技术分析</strong></p><ul><li>多路回字形双轨轮小车和分拨装置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/20.png" alt="20"></p><ul><li>高低架行车</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/21.png" alt="21"></p><p><strong>特点分析</strong></p><ul><li>双轨轮小车在轨道上运行实现码头前沿与堆场以及堆场与集疏运集卡间的高 效自动化水平运输，多线路作业均衡</li><li>堆场采用无大车高架行车，集疏港衔接区采用低架行车，高低架行车系统整 体尺寸较小且质量较轻，运行速度较快</li><li>利用磁点及电子防摇设备实现吊具与双轨轮小车的快速准确对位，对位堆取 箱速度较快、能耗较低</li><li>双轨轮小车可通过吊机调离线路来减小维修对线路的干扰影响</li></ul><blockquote><p>周鹏飞等，回字形布置的双轨轮小车自动化码头仿真，系统仿真学报，2018，9</p><p>周鹏飞等，一种新型自动化集装箱码头工艺布局仿真，大连理工大学学报，2018，6</p></blockquote><p><strong>仿真分析结论</strong></p><p>结论1：</p><ul><li>相对于岸桥-AGV-ARMG-箱区平行岸线的工艺系统，装 卸船效率有明显改善</li><li>实验中，平均在港时间缩短10%+，岸桥台时效率提高 13%+ </li></ul><p>结论2：</p><ul><li>箱区宽度增加岸桥效率下降，如3箱时下降5%，箱区宽度 建议取1~2个箱位，取2箱可节约高架梁空间且岸桥效率 影响不显著</li></ul><p>结论3：</p><ul><li>建议线路上双轨轮小车配置5辆</li></ul><h2 id="2-高架轨道和高架桥式ACT"><a href="#2-高架轨道和高架桥式ACT" class="headerlink" title="2.高架轨道和高架桥式ACT"></a>2.高架轨道和高架桥式ACT</h2><p><strong>工艺系统主要组成</strong></p><ul><li>岸桥系统</li><li>高架轨道式水平搬运系统</li><li>地面集疏运系统</li><li>自动化轨道吊</li><li>闸口系统</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/22.png" alt></p><p><strong>特点分析</strong></p><ul><li><p>自行小车在高架轨道上行驶，与地面集疏运作业车流分离</p><p>减少了两种作业的干扰，提高了码头装卸船效率</p></li><li><p>高架轨道距离岸桥和龙门吊较传统作业方式更近</p><p>缩短了岸桥和龙门吊的吊具运行距离，提高了装卸船效率</p></li><li><p>高架轨道伸入堆场内部可缩短龙门吊大车移动距离</p><p>提高了龙门吊堆取箱效率，且多龙门吊可同时作业</p></li></ul><blockquote><p>*周鹏飞等，高架轨道式自动化集装箱码头仿真建模与分析，上海海事大学学报，2018</p></blockquote><p><strong>仿真分析结论</strong></p><p> 结论1：</p><ul><li>服务水平和资源利用率等指标均优于自动化轨道龙门吊码头</li><li>实验中，船舶在港时间缩短6.8%，岸桥台时效率提高 5.8%</li><li>节约码头资源占用约7%</li></ul><p>结论2：</p><ul><li>高架小车配置数量与码头指标呈近似二次关系</li><li>实验中，小车配置从3到5辆时岸桥台时效率提高25%， 当大于5时主要指标改善较小</li><li>作业线上的高架小车配置建议5-6辆</li></ul><h2 id="3-立体轨道式ACT"><a href="#3-立体轨道式ACT" class="headerlink" title="3.立体轨道式ACT"></a>3.立体轨道式ACT</h2><p><strong>工艺系统主要组成（上海振华）</strong></p><ul><li><p>岸桥系统</p></li><li><p>高低立体轨道系统</p><p>低架桥起重小车QV </p><p>低架桥平板小车PV </p><p>地面平板小车DV </p></li><li><p>自动轨道吊</p></li><li><p>闸口集疏运系统</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/23.png" alt="23"></p><p><strong>作业工艺特点</strong></p><ul><li>QC 后伸距下布置平行于岸线的立体轨道，立体轨道为独立装卸线，减少了作业线 间的干扰，QC 对应一或多条装卸线</li><li>每条立体轨道上分别布置高低2 组小车（QV和PV），可互不干涉地交叉运行</li><li>堆箱区布置DV，其轨道垂直于立体轨道并延伸至陆侧端部，可减少ARMG搬运箱 距离</li><li>全轨道运行，行车速度快</li></ul><blockquote><p>*周鹏飞等，集装箱码头先进作业工艺系统仿真与对比，水运工程，2015，7</p></blockquote><h2 id="4-高架桥式自动化集装箱码头"><a href="#4-高架桥式自动化集装箱码头" class="headerlink" title="4.高架桥式自动化集装箱码头"></a>4.高架桥式自动化集装箱码头</h2><p><strong>工艺系统主要组成</strong></p><ul><li><p>高架桥式全覆盖轨道系统</p><p>桥式大车</p><p>起重小车</p><p>吊具</p></li><li><p>闸口集疏运系统</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/24.png" alt="24"></p><p><strong>作业工艺特点</strong></p><ul><li>高架桥系统全覆盖堆场和泊位，实现岸边与堆场一体化作业</li><li><p>起重小车和大车均可实现跨轨运行，易于实现设备调度和作业平</p></li><li><p>单一机械系统，可实现多小车同时作业，作业效率高</p></li><li>堆场泊位全覆盖，无需地面车辆和车道，堆场利用率高，通过能力高</li><li>无需二次搬运装卸，运行成本较低</li><li>精确定位、自动化程度高</li><li>初始投资高</li></ul><blockquote><p>*周鹏飞等，集装箱码头先进作业工艺系统仿真与对比，水运工程，2015，7</p></blockquote><h2 id="5-超大型船舶装卸系统"><a href="#5-超大型船舶装卸系统" class="headerlink" title="5.超大型船舶装卸系统"></a>5.超大型船舶装卸系统</h2><p><strong>双大梁岸桥装卸系统</strong></p><p>大梁可移动对位，双大梁岸桥可同时装卸多个相邻舱</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/25.png" alt="25"></p><p><strong>槽型泊位双侧装卸岸桥系统</strong></p><ul><li>船舶双侧同时装卸，多吊具同时作业，大大提高船舶装卸效率</li><li>要求槽型泊位设施，适应性低</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/26.png" alt="26"></p><p><strong>浮式桥吊+驳船装卸系统</strong></p><ul><li>岸桥+浮式桥吊实现船舶双侧的同时装卸，大大提高超大型船舶的装卸效率</li><li>系统适应性高，浮式桥吊、驳船作业较复杂</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-3/27.png" alt="27"></p><p>下一篇：<a href="/post/port-logistics-4/">现代港口物流管理（四）新技术与智慧港口</a></p>]]></content>
      
      
      <categories>
          
          <category> 土木水利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水利 </tag>
            
            <tag> 港口 </tag>
            
            <tag> 现代港口物流管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代港口物流管理（二）港口物流设备设施与工艺</title>
      <link href="/post/port-logistics-2/"/>
      <url>/post/port-logistics-2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>上一篇：<a href="/post/port-logistics-1/">现代港口物流管理（一）现代港口物流绪论</a></p><p>《现代港口物流管理》课程知识点</p><h1 id="一、港口物流设施"><a href="#一、港口物流设施" class="headerlink" title="一、港口物流设施"></a>一、港口物流设施</h1><p>港口物流设施包括<strong>港口水域设施</strong>、<strong>港口码头设施</strong>、<strong>港口交通配套设施</strong>和<strong>其他辅助设施</strong></p><h2 id="1-港口水域设施"><a href="#1-港口水域设施" class="headerlink" title="1.港口水域设施"></a>1.港口水域设施</h2><h3 id="港口锚地"><a href="#港口锚地" class="headerlink" title="港口锚地"></a>港口锚地</h3><p>港口锚地——船舶停泊及水上装卸作业水域（功能位置）</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/1.png" alt="1"></p><p><strong>外港锚地</strong>：</p><ul><li>供船舶候潮、待泊、联检及避风</li><li>易燃易爆危险品停泊和水上装卸</li></ul><p><strong>内港锚地</strong>:</p><ul><li>供船队进行编解组作业</li><li>供船舶待泊和水上装卸作业 </li></ul><blockquote><p>锚地可设系船浮筒等设施或直接锚泊</p></blockquote><h3 id="港口航道"><a href="#港口航道" class="headerlink" title="港口航道"></a>港口航道</h3><p>港口航道——供船舶进出港口和靠离码头航行水域</p><p>航道要求：足够水深+ 足够宽度，保障安全便利进出港；类型：单向、双向、复合</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/2.png" alt="2"></p><h3 id="港口防波堤"><a href="#港口防波堤" class="headerlink" title="港口防波堤"></a>港口防波堤</h3><p>港口防波堤——港口水域外围的水工建筑物</p><p>作用：</p><ul><li>防御波浪(防漂沙)，保持港内水面平稳</li><li>保证船舶安全停泊和装卸作业的波稳条件</li></ul><p>形式：</p><ul><li>单堤，双堤，离岸单堤（岛堤） </li><li>大窑湾梳式防波堤</li></ul><h3 id="助航设施"><a href="#助航设施" class="headerlink" title="助航设施"></a>助航设施</h3><p>助航设施——灯塔、航标、导标、浮标和各种灯光设施</p><p>作用：指示船舶进出和保证航行安全</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/3.png" alt="3"></p><h2 id="2-港口码头设施"><a href="#2-港口码头设施" class="headerlink" title="2.港口码头设施"></a>2.港口码头设施</h2><p>包括：<strong>码头泊位</strong>，<strong>码头库场</strong>和<strong>集装箱码头</strong></p><h3 id="码头泊位"><a href="#码头泊位" class="headerlink" title="码头泊位"></a>码头泊位</h3><ul><li>供船舶停靠、装卸货物、上下旅客、补给燃料淡水或办理其他业务的水上基础设施</li><li>泊位长度根据停靠船舶船型而定，留安全距离，可供一艘船舶停泊</li><li>泊位数量：特别是深水泊位（万吨级以上），衡量港口规模和测算通过能力主要依据</li></ul><p>码头泊位建设历程：新中国成立时，我国沿海港口共75个泊位 ，总长度 11.9km，万吨级泊位只有31个 ，大部分装卸件杂货，作业方式简单。50年代末港口泊位已达到107个；60年代建成投产143个泊位；70年代，我国建成了一大批机械化、半机械化的大型专业码头泊位，包括第一个现代化原油码头（大连港原油码头）。改革开放，特别是新世纪以来我国建设了大批现代化，符合绿色港口理念要求的码头泊位。2017年沿海港口生产用码头泊位达到了5830个，其中万吨级以上泊位有1948个。港口建设领先于世界。</p><h3 id="码头库场"><a href="#码头库场" class="headerlink" title="码头库场"></a>码头库场</h3><ul><li>港区仓库、堆场的统称，货物在装船前和卸船后提供短期存放设施</li><li>作用：货物集散场所；储备、调剂、整理和缓冲</li></ul><p><strong>码头堆场</strong>：用于存放不怕雨淋、日晒和气温变化影响的货物。如集装箱、煤炭、矿石、沙石等</p><p><strong>码头仓库</strong>：用于存放不宜日晒雨淋和易于散失的贵重货物</p><p><strong>前方仓库</strong>：用于短期存放货物，加快车、船、货周转</p><p><strong>后方仓库</strong>：供货物较长时间储存及物流加工目的的储存</p><blockquote><p><strong>2015年 8·12天津滨海新区集装箱堆场爆炸事故</strong></p><p>事件造成165人遇难、8人失踪，798人受伤住院治疗，304幢建筑物、12428辆商品汽车、7533个集 装箱受损。造成直接经济损失人民币68.66亿元。</p><p><strong>直接原因</strong>：危险品港区堆场集装箱内硝化棉的湿润剂散失 出现局部干燥，在高温（天气）等因素的作用下分解放热， 积热自燃，引起相邻集装箱内的硝化棉和其他危险化学品 燃烧，导致硝酸铵等危险化学品发生爆炸。</p><p><strong>间接原因</strong>：经营公司无视安全生产主体责任，严重违反天 津市城市总体规划和滨海新区控制性详细规划，违法建设 危险货物堆场，违法经营、违规储存危险货物，安全管理 极其混乱，安全隐患长期存在。</p><p><strong>教训吸取</strong>：</p><ol><li>港口物流系统规划设计要严格按规范标准要求</li><li>港口物流运营要精细化、科学化管理、防患于未然</li><li>规划设计、经营、操作人员要责任担当</li></ol><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/4.png" alt="4"></p></blockquote><h3 id="集装箱码头"><a href="#集装箱码头" class="headerlink" title="集装箱码头"></a>集装箱码头</h3><p><strong>泊位(Berth)：</strong>停靠集装箱船舶，进行集装箱装卸的码头区域</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/5.png" alt></p><p><strong>码头前沿(Quay  Surface)：</strong>从码头岸壁到堆场前的区域</p><ul><li>作用：集装箱搬运、装卸、换装 的区域，码头作业效率的瓶颈环节之一</li><li>配备：集装箱岸桥、搬运、车道、高低压电箱、船用通讯接口等</li></ul><p><strong>码头堆场（Yard）：</strong>码头内堆存集装箱的场地，分为前方堆场和后方堆场</p><ul><li><p>前方堆场又称集装箱编组场、调度场、停转场、排列场、调配场</p><p>作用：船到港前，预先堆放装船箱；卸船时，临时堆存卸船箱，加速装卸船</p></li><li><p>后方堆场又称集装箱堆场，用于贮存和保管空、重箱场地</p><p>包括：出口重箱区、进口重箱区，空箱区、 冷藏箱区、危险品箱区等</p></li><li><p>前、后方堆场没有严格分界线，只是相对概念。实际业务中，通常出口箱放在堆场前方；进口箱、冷藏箱、危险品箱、空箱放在堆场后方 </p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/6.png" alt="6"></p></li><li><p>堆场箱位标识：场箱位号，箱位号，由贝号bay（单号20尺，双号40尺）、排号row、层号tie六位数字组成</p></li></ul><p><strong>控制室(Control Tower)</strong> 又称控制中心、中心控制室、控制塔、指挥塔(室) ，是作业指挥调度中心，作业管理的中枢机构。</p><ul><li>作用：监督、调整和指挥码头作业计划执行</li><li>配备：计算机监控系统、调度系统，远程操控系统、闭路电视、测风仪及气象预报系统等</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/7.png" alt="7"></p><p><strong>检查口(Gate House)</strong> ，又称道口、检查桥、闸口等，码头内外责任分界；单证 核对、验箱、称重等；减少车辆等待</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/8.png" alt="8"></p><p><strong>维修车间(Maintenance shop)</strong> ，码头后方，检查、修理和保养设备</p><h2 id="3-港口交通配套设施"><a href="#3-港口交通配套设施" class="headerlink" title="3.港口交通配套设施"></a>3.港口交通配套设施</h2><h3 id="港区道路"><a href="#港区道路" class="headerlink" title="港区道路"></a>港区道路</h3><p>一般布置成环行，与城市道路连接，减少与铁路线交叉或干扰装卸生产作业</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/9.png" alt="9"></p><h3 id="港内铁路"><a href="#港内铁路" class="headerlink" title="港内铁路"></a>港内铁路</h3><p>铺设在港内的铁路，有：港口车站、分区车站、码头和库场装卸线，区间正线、联络线和连接线</p><blockquote><p>布置原则：线路短捷、布置紧凑、线路运力同 港口装卸相适应，并留发展余地。一般位于码 头前沿和库场前后 布置原则：线路短捷、布置紧凑、线路运力同 港口装卸相适应，并留发展余地。一般位于码 头前沿和库场前后</p></blockquote><h2 id="4-其他配套辅助设施"><a href="#4-其他配套辅助设施" class="headerlink" title="4.其他配套辅助设施"></a>4.其他配套辅助设施</h2><h3 id="集装箱货运站、港口物流园区、内陆干港、其他港口物流服务性设施"><a href="#集装箱货运站、港口物流园区、内陆干港、其他港口物流服务性设施" class="headerlink" title="集装箱货运站、港口物流园区、内陆干港、其他港口物流服务性设施"></a>集装箱货运站、港口物流园区、内陆干港、其他港口物流服务性设施</h3><p><strong>集装箱货运站（Container Freight Station）</strong>：负责拆装箱，货物保管和收发交接等；码头后方，靠近码头外公路或铁路</p><p><strong>内陆干港（LandPort）</strong>：方便内陆地区进出口商提供进出口的国际港口服务（多式联运）</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/10.png" alt="10"></p><h3 id="信息网络和港区供电设施"><a href="#信息网络和港区供电设施" class="headerlink" title="信息网络和港区供电设施"></a>信息网络和港区供电设施</h3><ul><li>各种信息服务系统和平台，包括软硬件设施， 公用通信、EDI系统、网络系统等</li><li>满足港口动力、照明和通讯设备电力，重要配 套设施，设降压变电站和分变电所</li></ul><h1 id="二、集装箱码头设备工艺"><a href="#二、集装箱码头设备工艺" class="headerlink" title="二、集装箱码头设备工艺"></a>二、集装箱码头设备工艺</h1><h2 id="集装箱码头作业设备"><a href="#集装箱码头作业设备" class="headerlink" title="集装箱码头作业设备"></a>集装箱码头作业设备</h2><p>集装箱码头作业设备分为：集装箱装卸设备、集装箱搬运车辆和集装箱专用吊具</p><h3 id="1-集装箱装卸设备"><a href="#1-集装箱装卸设备" class="headerlink" title="1.集装箱装卸设备"></a>1.集装箱装卸设备</h3><p><strong>1.1 集装箱船舶装卸设备：</strong></p><p>岸壁式集装箱装卸桥(岸桥)，是码头前沿作业的主要设备</p><p>岸桥框架组成：</p><ul><li>带行走机构的门架</li><li>承担臂架重量拉杆</li><li>臂架</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/11.png" alt></p><p>臂架分为：</p><ul><li>海侧臂架：一般可俯仰，以便移动时与船舶上层建筑不发生碰撞</li><li>陆侧臂架：堆放舱盖板和倒箱</li><li>门中臂架：连接海和陆侧臂架</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/12.png" alt="12"></p><blockquote><p>集装箱船舶装卸设备——技术参数</p><p><strong>起重量</strong>：如65t。</p><ul><li>考虑舱盖板的重量（如28t），装卸非标准箱需要，多箱同时起吊，兼顾装卸其他重大件货需要 。</li></ul><p><strong>起重高度</strong>：地面轨顶以上和以下高度，如 25m和12m 。</p><ul><li>考虑船舶型深、吃水、潮差、甲板面上装箱层数、码头标高以及船体倾斜等因素</li></ul><p><strong>外伸距</strong>：海侧轨道中心线向外至吊具铅垂中心线之间的最大水平距离 </p><ul><li>考虑到港船宽，甲板上允许堆箱高度，当船舶向外横向倾3度时，仍能起吊甲板上外舷侧最上层箱</li></ul><p><strong>内伸距</strong>：内侧轨道中心线向内至吊具铅垂中心线之间的最大水平距离 </p><ul><li>考虑放置箱量，舱盖板</li></ul><p><strong>轨距(跨距）</strong>：行走轨道中心线间的水平距离 </p><ul><li>考虑装卸桥稳定性，交接箱车道 （3条以上）等</li></ul><p><strong>横梁下净空高度</strong>：横梁下面到轨顶之间的垂直距离，如10m </p><ul><li>取决于搬运箱机械的最大高度</li></ul></blockquote><p><strong>1.2 集装箱堆场装卸设备</strong></p><p><strong>轮胎式龙门起重机(Rubber Tired Gantry Crane)</strong> </p><ul><li>特点：机动灵活，通用性强，能前进、后退，能左右转向90度，可堆场间调度</li><li>通常横向跨6列箱和一条车道，可堆35层</li><li>灵活性强，便于箱区间调度</li><li>前期投资相对较小</li><li>跨度相对较小，堆高层数相对较小，一般跨６列和1列车道，堆高3-5层箱</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/13.png" alt="13"></p><p><strong>轨道式龙门起重机(Rail Mounted Gantry Crane) </strong></p><ul><li>比轮胎式龙门起重机跨度大，堆垛层数多，横向可达19列箱和4车道，堆高6层</li><li>沿着场地上铺设的轨道行走，位置精 度高，易实现自动化控制</li><li>跨度大，堆高层数多，堆场利用率高，可堆积4-7层箱，可跨14列甚至更多</li><li>运作精度高，便于实现自动化</li><li>节约能源，环境友好</li><li>前期投资大</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/14.png" alt="14"></p><p>龙门起重机优点：</p><ul><li>运行稳定性好，维修费用低</li><li>堆存量大，场地利用率高</li><li>起重机运行方向一致、动作单一，易自动控制</li></ul><p>龙门起重机优点：</p><ul><li>取出下层箱需经翻箱</li><li>场上配机量固定，场区作业不 平衡时调配较困难，特别是轨道式龙门吊</li><li>自重大，轮胎式轮压20t以上， 轨道式轮压更大，且堆装层数多，场地需重型铺装</li></ul><h3 id="2-集装箱搬运设备"><a href="#2-集装箱搬运设备" class="headerlink" title="2.集装箱搬运设备"></a>2.集装箱搬运设备</h3><p><strong>2.1 集卡，拖车+底盘车(chassis)</strong> </p><ul><li>集装箱搬运设备</li><li>优点：投资小、技术成熟、维修成本低、长短距离适用</li><li>缺点：需装卸设备，码头内人工，燃油污</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/15.png" alt="15"></p><p>底盘车(chassis)，作为堆场堆存设备，美国西海岸部分码头采用</p><p>底盘车堆存优点：</p><ul><li>除铁路换装作业外，无需借助于其他设备换装</li><li>装卸吊箱次数少，箱损坏率低</li><li>机动性最大，提取箱方便，易于实现“门到门”</li><li>对场地结构要求低，一般轮压6t</li></ul><p>底盘车堆存缺点：</p><ul><li>不能堆叠存放箱，需巨大场地面积</li><li>需备有大量底盘车，初始投资费用极高</li></ul><p><strong>2.2 跨运车(Straddlecarrier)</strong> </p><p>跨运车具有搬运、堆垛、换装等多功能，欧洲应用较多</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/16.png" alt="16"></p><p>跨运车的作业：</p><ul><li>岸桥与前方堆场间的装卸和搬运</li><li>前方堆场与后方堆场间的装卸和搬运</li><li>对底盘车进行换装</li></ul><p>跨运车的优点：</p><ul><li>岸桥不用对准蘑菇头，提高了效率</li><li>可堆叠存放箱，节约堆场面积</li><li>减少了堆场-岸桥间搬运的装卸次数</li><li>多用途设备，时速24km以上，方便调配</li></ul><p>跨运车的缺点：</p><ul><li>价格较贵，换装和搬运成本较高</li><li>采用液压驱动，链条传运，容易损坏，修理费高</li></ul><p><strong>2.3 集装箱叉车(container forklift)</strong></p><p>又称叉式装卸车 ，可进行集装箱装卸、堆垛、短距离搬运</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/17.png" alt="17"></p><p>主要用于：吞吐量不大的综合性码头，集装箱堆场辅助作业，搬运20ft箱或空箱</p><p>集装箱叉车按照工作方式分为：</p><ul><li>吊运方式：采用顶部专用吊具吊运箱</li><li>叉运方式：利用箱底部叉孔用货叉起运</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/18.png" alt="18"></p><p><strong>2.4 正面吊(Front-handlingmobile crane)</strong> </p><ul><li>堆箱层数较高，可堆3-4层重箱或7-9层空箱，且可多排箱作业，场地利用率高</li><li>运行方向与作业方向垂直，需要占较宽通道</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/19.png" alt="19"></p><h3 id="3集装箱专用吊具"><a href="#3集装箱专用吊具" class="headerlink" title="3集装箱专用吊具"></a>3集装箱专用吊具</h3><p><strong>3.1 固定式吊具</strong></p><ul><li>吊单一种类箱</li><li>优点：结构简单、自重轻，价格便宜</li><li>缺点：对箱型适应性较差，更换吊具需用较多时间</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/20.png" alt="20"></p><p><strong>3.2 自动式吊具</strong></p><ul><li>利用油压使吊臂能自行伸缩，以满足不同尺寸箱要求</li><li>优点：变换起吊不同箱所花时间少，使用灵活</li><li>缺点：自重较大，价格贵</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/21.png" alt="21"></p><p><strong>3.3 组合式吊具</strong></p><ul><li>将起吊不同尺寸箱的吊具组合使用</li><li>特点：结构简单，适应性强，自重较自动式小（一般为4-7t）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/22.png" alt="22"></p><p><strong>3.4 双箱吊具</strong></p><ul><li>可同时起吊2个20ft箱或1个40ft箱</li><li>大大提高装卸效率</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/23.png" alt="23"></p><h2 id="集装箱码头作业工艺"><a href="#集装箱码头作业工艺" class="headerlink" title="集装箱码头作业工艺"></a>集装箱码头作业工艺</h2><p><strong>码头作业工艺</strong></p><ul><li>在码头实现货物从一种运载工具(或库场)转移到另一种运载工具(或库场)的方法和程序（装卸和搬运货物）</li><li>针对不同货物、运输工具和装卸设备；根据码头条件，按一定操作过程，以合理和经济的原则来完成装卸和搬运任务</li><li>决定货物装卸搬运、堆存的安全、质量、效率、经济性</li></ul><p><strong>集装箱码头作业工艺组成</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/24.png" alt="24"></p><p><strong>集装箱码头装卸过程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/25.png" alt="25"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/26.png" alt="26"></p><p><strong>传统集装箱码头作业工艺设备</strong></p><p>传统岸桥</p><ul><li>通常单吊具，放箱时不易对箱，人工操作，装卸效率较低</li><li>单小车，取放箱的提升一样的高度</li></ul><p>传统龙门起重机</p><ul><li>我国传统码头普遍采用轮胎式 </li></ul><p>集卡/跨运车</p><p><strong>传统工艺及布局——箱区平行岸线布置</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/27.png" alt="27"></p><p><strong>传统工艺及布局——箱区垂直岸线布置</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/28.png" alt="28"></p><p><strong>混合式作业工艺系统</strong></p><ul><li>设备工艺各有利弊，混合系统有利于扬长避短</li><li>在不同作业环节采用合适的设备工艺</li></ul><p>一般地</p><ul><li>轮胎与轨道龙门吊混合</li><li>跨运车与轮胎龙门吊混合</li><li>跨运车与轨道龙门吊混合</li></ul><p><strong>★★★码头箱区布局★★★</strong></p><p>1、水平布置形式</p><ul><li>车辆进入箱区内部，活动范围较大，行驶路径长</li><li>堆场设备作业负担小，高峰作业时有优势</li></ul><p>2、垂直布置形式</p><ul><li>车辆不进入箱区内部，行驶路径短，搬运效率高</li><li>码头前沿行车路线较复杂，容易交通拥挤</li><li>堆场设备作业负担大，高峰期易成为瓶颈</li></ul><blockquote><p>注：我国码头大都采用箱区平行于岸线布置形式，垂直布置易于自动化作业区分离，减少干扰， 自动化码头较多采用。</p></blockquote><p><strong>振华重工与码头作业设备</strong></p><p>来一个小插曲，介绍一下振华重工。振华重工（ZPMC），公司总部在上海，长兴岛，南通，江阴等地有8个生产基地，是世界上最大的重型装备制造商，主要生产大型集装箱设备机械，散货装卸机械及大型钢桥等。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/29.png" alt="29"></p><ul><li>振华重工的岸桥产品在全球港口机 械市场连续19年位居第一，订单数 量占据全球80%。</li><li>振华重工承建厦门远海集装箱码头、 青岛港、上海港洋山港区四期自动 化码头、荷兰RWG自动化码头、意大利VADO自动化码头等的自动化 码头设备。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/30.png" alt="30"></p><h1 id="三、大宗散货码头设备工艺"><a href="#三、大宗散货码头设备工艺" class="headerlink" title="三、大宗散货码头设备工艺"></a>三、大宗散货码头设备工艺</h1><h2 id="散货码头装卸船专用设备"><a href="#散货码头装卸船专用设备" class="headerlink" title="散货码头装卸船专用设备"></a>散货码头装卸船专用设备</h2><ul><li>散货装卸船专用设备</li><li>散货装卸船通用设备</li><li>散货堆场其他设备</li></ul><h3 id="1-散货码头装卸船专用设备"><a href="#1-散货码头装卸船专用设备" class="headerlink" title="1.散货码头装卸船专用设备"></a>1.散货码头装卸船专用设备</h3><p><strong>1.1 固定转盘式装船机</strong></p><p>装船悬臂可作旋转, 上下俯仰，可伸缩（7m以上），适于装载1000-5000吨级驳船</p><p>作业流程：空船就位 =&gt; 装船机头正位 =&gt; 顺序开启皮带 =&gt; 送料</p><blockquote><p>作业注意：</p><p>I.为平衡船舶，悬臂要经多次水平摆动和伸缩， 将物料均匀分配到船舱内 </p><p>II.低水位时，应将悬臂降下，避免物料冲击和粉 尘飞扬 </p><p>III.高水位时，为避免悬臂碰撞驳船上层建筑和拖 船桅柱，驳船靠离时应将悬臂转离</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/31.png" alt="31"></p><p><strong>1.2 摆动式装船机</strong></p><p>摆动式装船机由转动桥架和可前后移动的臂架构成</p><p>桥架</p><ul><li>位于前端回转台车和后端墩座间</li><li>回转台车沿轨道运行，桥架绕后端墩往的支承中心回转而摆动</li></ul><p>臂架</p><ul><li>臂架可随回转台机沿轨道转动，内设皮带机</li><li>臂架下轨轮可沿桥架轨道移动，进行伸缩</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/32.png" alt="32"></p><p><strong>1.3 直线式装船机</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/33.png" alt="33"></p><p><strong>1.4 移动式装船机</strong></p><p>移动式装船机整机可沿泊位前沿轨道行走 </p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/34.png" alt></p><p><strong>1.5 卸船桥(桥式卸船机)</strong></p><ul><li>大型散货码头主要卸船机械</li><li>抓斗行程路线简单，起重量大</li><li>装卸桥可承受较大动载荷，装卸小车速度快，卸船效率</li></ul><p><strong>1.6 链斗式卸船机</strong></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/35.png" alt="35"></p><p><strong>1.7 斗轮卸船机</strong></p><ul><li>作业过程：由斗轮取料，物料落入到链斗提升机，将物料提升到悬臂 皮带机，转送到岸上</li><li>特点：卸船效率高、避免扬尘污染小、作业范围大等</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/36.png" alt="36"></p><h3 id="2-散货装卸船通用设备"><a href="#2-散货装卸船通用设备" class="headerlink" title="2.散货装卸船通用设备"></a>2.散货装卸船通用设备</h3><p><strong>2.1 双索抓斗，散货装卸吊具</strong></p><p>作业过程：</p><ol><li>开闭绳支 持绳皆松 </li><li>抓斗张开 准备抓货</li><li>开闭绳收 紧，抓斗 抓货</li><li>开闭绳和 支持绳皆 紧，抓斗 升</li><li>吊臂旋转 至卸货点</li><li>支持绳紧 开闭绳松， 抓斗张开， 卸货结束</li></ol><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/37.png" alt="37"></p><p><strong>2.2 液压抓斗（装卸船）</strong></p><ul><li>利用液压装置开闭</li><li>自重较大</li><li>投资成本较高 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/38.png" alt></p><p><strong>2.3 船舶吊杆（装卸船）</strong></p><p>特点：</p><ul><li>起重量较小，起升高度不高，卸货效率较低</li><li>清舱量大(约50％)</li><li>采用船舶吊杆卸船，不需在码头上配置卸船机械，可节约码头建设费用和装卸成本</li></ul><p><strong>2.4 带斗门机（装卸船）</strong></p><ul><li>门机架下设置可伸缩漏斗</li><li>外伸臂可根据抓斗行程调节伸缩</li><li>起升、变幅速度比普通门机高40％-50％ </li><li>卸船效率高</li></ul><p><strong>2.5 自卸船</strong></p><p>卸船作业过程：物料由货舱或料斗经可控斗门流入舱底纵向输送带上，将物料输送至船首或船尾，由提升机构将物料提升，由输送机投送上岸</p><ul><li>优点：船舶可机械化高效率卸货，可消除船舶清舱作业 </li><li>缺点：造价较高，船舶结构复杂，维修困难</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/39.png" alt></p><h3 id="3-散货堆场其他设备"><a href="#3-散货堆场其他设备" class="headerlink" title="3.散货堆场其他设备"></a>3.散货堆场其他设备</h3><p><strong>输送机械和辅助机械</strong></p><ul><li>皮带输送机—联接装卸车船、堆场机械等作业环节运输工具</li><li>清舱平舱机械：舱口四周甲板下物料清理或水平方向平整</li><li>输送效率要与装、卸船机相适应，取决于带宽和带速</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-2/40.png" alt></p><p>下一篇：<a href="/post/port-logistics-3/">现代港口物流管理（三）自动化码头工艺与新技术应用</a></p>]]></content>
      
      
      <categories>
          
          <category> 土木水利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水利 </tag>
            
            <tag> 港口 </tag>
            
            <tag> 现代港口物流管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代港口物流管理（一）现代港口物流绪论</title>
      <link href="/post/port-logistics-1/"/>
      <url>/post/port-logistics-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>《现代港口物流管理》</p><h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h1><h2 id="为什么学？"><a href="#为什么学？" class="headerlink" title="为什么学？"></a>为什么学？</h2><ul><li>港口是交通运输枢纽和重要的物流供应链节点</li><li>综合交通运输规划管理相关行业执业的重要知识和能力储备</li><li>港口、交通、物流等领域的重要研究方向，是从事相关科研必要的背景知识、理论方法和技能</li></ul><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><p>Part I：现代港口物流的基础知识</p><p>Part II：港口物流管理主要理论和技术方法</p><p>Part III：集装箱码头生产调度管理应用</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《不确定生产调度管理及其应用》，周鹏飞著，电子工业出版社，2012 </li><li>《港口物流前沿技术研究与实践》，包起帆, 罗文斌 编著，人民交通出版社，2009 </li><li>《现代集装箱码头的建设与运营技术》，包起帆, 罗文斌 编著，人民交通出版社，2006 </li><li>其他相关的论文资料</li></ul><h1 id="二、物流基础知识"><a href="#二、物流基础知识" class="headerlink" title="二、物流基础知识"></a>二、物流基础知识</h1><h2 id="基本概念内涵"><a href="#基本概念内涵" class="headerlink" title="基本概念内涵"></a>基本概念内涵</h2><h3 id="物流按作用分类"><a href="#物流按作用分类" class="headerlink" title="物流按作用分类"></a>物流按作用分类</h3><p>物流按作用分为：<strong>供应物流</strong>、<strong>销售物流</strong>、<strong>生产物流</strong>、<strong>回收废弃物流</strong>。</p><p>供应物流：</p><p>​        • 企业购入原材料或商品的物流过程 </p><p>​        • 购入品占用大部分流动资金，供应物流对成本影响大</p><p>销售物流：</p><p>​        • 企业售出产品或商品的物流过程</p><p>​        • 通过销售物流回收资金进行再生产 </p><p>​        • 销售物流合理化与企业市场竞争力有密切关系</p><p>生产物流：</p><p>​        • 原材料进厂到产成品出厂，伴随生产全程、与生产同步 物流过程 </p><p>​        • 生产物流停顿，生产中断；物流均衡，生产稳定 </p><p>​        • 对在制品库存、生产周期、生产成本影响重大 </p><p>回收废弃物流：</p><p>​        • 有用废弃物回收，对资源综合利用具有经济和社会价值 </p><p>​        • 无用废弃物处理，是环境保护和社会持续发展要求</p><p>关系如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-1/1.png" alt="1"></p><h3 id="物流按活动空间范围分类"><a href="#物流按活动空间范围分类" class="headerlink" title="物流按活动空间范围分类"></a>物流按活动空间范围分类</h3><p>物流按活动空间范围分为<strong>地区物流</strong>、<strong>国内物流</strong>和<strong>国际物流</strong>。</p><p>地区物流：按行政区域、地理位置、经济圈划分，根据地区特点规 划和发展物流系统</p><p>国内物流：从国家角度制定物流中长期发展规划、实施计划、政策法令</p><p>国际物流：经济全球化过程中，国家和企业都要在国际交流与合 作中发展经济</p><h3 id="物流科学的产生"><a href="#物流科学的产生" class="headerlink" title="物流科学的产生"></a>物流科学的产生</h3><p><strong>1、萌芽阶段</strong></p><ul><li>二战末期，军事后勤的需求</li><li>以系统观念研究物流活动， 借助当时有关学科研究成果，进行战争预测、基地布置、运输规划等工作 </li><li>完成军事后勤系统保障任务 </li></ul><p><strong>2、产生阶段</strong></p><ul><li>50年代大批量生产的发展，导致生产成本下降，流通成本相对上升</li><li>为降低物流成本，引进军事后勤研究成果，开始从整体 研究物流系统 </li></ul><blockquote><p><strong>后进原因</strong>：</p><p>生产发展到一定水平，才能显示物流的重要性，提出研究课题</p><p>物流学是综合学科，需要相邻学科如运筹学、系统工程的成果为基础，才具备形成一门学科的条件</p></blockquote><h3 id="物流科学的发展"><a href="#物流科学的发展" class="headerlink" title="物流科学的发展"></a>物流科学的发展</h3><p><strong>1、P.D命名的物流科学时代</strong></p><ul><li>大批量生产导致流通成本相对上升，物流系统概念形成，发现运输 、仓储、搬运装卸以及包装等物流活动相互关联和制约，是物流系 统的子系统。界定：解决空间和时间物态变化的活动；系统优化： 从全局解决物流成本下降问题。 </li><li>NCPDM：P.D是把完成品从生产线的终点有效地移动到消费者手里 的活动，有时也包括从原材料的供给源到生产线的始点的移动。不 包含生产过程（当时有包装是物流起点的说法）。 </li><li>日本，P.D物的流通（物流）。林周二：物流是包含物质资财的废弃 与还原，连接供给与需要主体，克服空间与时间距离，并且创造部 分形质效果的物理性经济活动。具体包括运输、保管、包装、装卸 搬运、流通加工等活动以及有关信息活动。 </li><li>1980年左右，中国从日本引进‘物流’词语及P.D概念。</li></ul><p><strong>2、Logistics命名的物流科学时代</strong></p><ul><li>物流成为企业战略的重要组成部分，其领域扩展到供应、生产、销 售全过程。个性化消费的时代，对物流的服务水平要求提高。P.D概 念不适应，改用LOGISTICS（1980年代中期）。</li><li>NCPDM：Logistics是对货物及相关信息从起源地到消费地的有效 率、有效益的流动和储存进行计划、执行和控制，以满足顾客要求 的过程。该过程包括进向、去向、内部外部的移动以及以环境保护 为目的的物料回收。 </li><li>R.尤尼曼：物流(Logistics)是研究对系统（企业、地区、国家和国 际）的物料流(Material  Flow)及有关的信息流进行规划与管理的科 学理论。 </li><li>物流团体改名，美国物流管理协议会：NCPDM—CLM。 </li><li>中国：开始 Logistics后勤，1989年Logistics 物流， 2000年国家 标准规定 物流 对应词Logistics</li></ul><p>3、供应链管理时代的物流科学</p><ul><li>供应链管理中物流起主导作用，物流系统范围延伸到供应链的上下游企业。 </li><li>1998年CLM：物流是供应链流程的一部分，是为了满足客户的 需求而对商品、服务及相关信息从原产地到消费地的高效率、高 效益的正向和反向流动及储存进行的计划、实施与控制的过程。 </li><li>2005年CLM更名为美国供应链管理专业协会（Council of Supply Chain Management Professionals，CSCMP）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-1/2.png" alt="2"></p><h2 id="物流活动及其合理化"><a href="#物流活动及其合理化" class="headerlink" title="物流活动及其合理化"></a>物流活动及其合理化</h2><h3 id="物流活动合理化意义"><a href="#物流活动合理化意义" class="headerlink" title="物流活动合理化意义"></a>物流活动合理化意义</h3><p>降低物流费用，减少产品成本</p><ul><li>可以减少运输、仓储以及包装等费用 </li></ul><p>缩短生产周期，提高生产效率</p><ul><li>物流高效可以减少中间环节、缩短生产周期、提高效率 </li></ul><p>压缩库存，减少流动资金占用</p><ul><li>物流均衡可以减少库存，较少材料等费用（70%以上） </li></ul><p>改善物流，提高企业综合素质和服务水平</p><ul><li>物流改善和管理服务水平的提高有密切关系 </li></ul><h3 id="物流合理化的途径"><a href="#物流合理化的途径" class="headerlink" title="物流合理化的途径"></a>物流合理化的途径</h3><ol><li>在生产物流空间中合理布置各种设施合理规划物流路线</li><li>合理控制库存 减少资金占用和生产周期</li><li>均衡物流流量，均衡生产，JIT</li><li>合理配置和使用物流设施、机械设备，提高 系统的效率和水平</li><li>完善物流信息系统</li></ol><h3 id="运输"><a href="#运输" class="headerlink" title="运输"></a>运输</h3><p><strong>含义作用：</strong>物体借助运力在空间位置上产生的位置移动</p><p><strong>方式特点：</strong> 铁路运输；公路运输；水路运输；航空运输；管道运输</p><p><strong>合理化途径：</strong></p><p>​        • 运输网络（物流网点）的合理规划布置 </p><p>​        • 选择最佳运输方式，提高运行效率 </p><p>​        • 推进共同运输（合作运输）</p><p>​         • 采用现代运输方法（多式联运、托盘化、集装箱、门 到门）</p><h3 id="仓储、储存"><a href="#仓储、储存" class="headerlink" title="仓储、储存"></a>仓储、储存</h3><p><strong>作用意义：</strong>仓储的必要性，时间效用；其他物流活动服务</p><p><strong>主要功能：</strong></p><p>​        1）储存和保管的功能（最基本的传统功能）；</p><p>​        2）调 节供需功能；</p><p>​        3）协调货物运输能力的功能（不同方 式的运输能力差异）；</p><p>​        4）辅助配送和流通加工 </p><p><strong>合理化：</strong></p><p>​        • 实行ABC管理 </p><p>​        • 科学的库存控制：1）降低采购费用等成本；2）减少流动资金占用；3）提高服务水平，防止缺货</p><p>​        • 应用预测技术：准确预测销售量和出库量是关键</p><h3 id="装卸搬运"><a href="#装卸搬运" class="headerlink" title="装卸搬运"></a>装卸搬运</h3><p><strong>内涵含义：</strong></p><p>​        • 在同一地域范围内进行的、以改变物体的存放状态和空间位置为主要内容和目的的活动。</p><p>​        • 意义：1）在物流活动转换中起到承上启下的作用；2）在物流成本中占有重要地位；3）提高物流系统效率的关键。</p><p><strong>作业构成：</strong></p><p>​        • 装卸、堆放、拆垛；分拣配货；搬送、移动；其他作业</p><p><strong>合理化原则：</strong></p><p>​        • 消除无效搬运、连续化、集装单元化、人格化 </p><p>​        • 合理利用机械、保持物流的均衡顺畅、提高综合效果</p><h3 id="包装"><a href="#包装" class="headerlink" title="包装"></a>包装</h3><p><strong>内涵含义：</strong></p><ul><li>保护产品、便于储运、促进销售</li><li>注意工业包装和商业包装的不同</li></ul><p><strong>包装材料：</strong></p><ul><li>纸和纸板、木质、金属、塑料、玻璃、陶瓷包装</li><li>包装用的辅助材料（黏合剂，粘合带、捆扎材料）</li></ul><p><strong>合理化：</strong></p><ul><li>包装的轻薄化、包装的单纯化、符合集装单元化和标准化的要求</li><li>机械化与自动化、注意与其他环节的配合、有利于环保</li></ul><h3 id="流通加工"><a href="#流通加工" class="headerlink" title="流通加工"></a>流通加工</h3><p><strong>组成内涵：</strong>在流通中的辅助性加工活动 </p><p><strong>目的：</strong>方便运输；方便用户（销售）；便于综合利用 </p><p><strong>内容形式：</strong>钢板剪切加工；自行车、助力车分类组装；酒类分装；水产品、肉类、蔬类、水果等食品的清洗加工 </p><h3 id="配送"><a href="#配送" class="headerlink" title="配送"></a>配送</h3><p><strong>内涵：</strong></p><ul><li>在经济合理区域范围内，根据用户需求，对物品进行拣选、加工、包装、分割、组配等作业，并按时送达指定地点的物流活动</li></ul><p><strong>作用意义：</strong></p><ul><li>完善运输及整个物流系统、提高末端物流的经济效益</li><li>实现低或零库存、方便用户、提高供应保证程度</li></ul><p><strong>特点：</strong></p><ul><li>配送是从物流据点到用户一种送货形式，短距离少批量多批次</li><li>配送不是单纯的运输，而是运输与其他活动共同构成的组合体</li><li>配送是以供给者送货到户式的服务性供应，是一种门到门的服务</li><li>配和送的有机结合 </li></ul><h3 id="配送作业合理化"><a href="#配送作业合理化" class="headerlink" title="配送作业合理化"></a>配送作业合理化</h3><p>配货作业：</p><ul><li>分货方式</li><li>拣选方式</li></ul><p>货物装卸：</p><ul><li>车辆载重，车辆容积</li><li>轻重配装</li></ul><p>配送路线选择：</p><ul><li>确定目标：以效益最高；以成本最低；以路程最短 标；以准确性最高</li><li>约束条件：满足所有收货人对品种、规格、数量的要求；满足收货人时间要求；在道路允许通行的时间内进行配送；各配送路线的货物量不得超过车辆容积和载重量的限制</li></ul><h3 id="物流信息"><a href="#物流信息" class="headerlink" title="物流信息"></a>物流信息</h3><ul><li>概念：物流活动内容的知识、资料、图像、数据、文件的总称</li><li>分类：操作管理信息、知识管理信息、战术管理信息、战略管理信息</li><li>特点：量大、分布广；动态性强；种类多</li><li>作用：优化物流系统；提高物流服务水平</li><li>供物流系统运作的有关平台：物流运作协同平台；信息共享平台；决策支 持平台</li><li>功能：信息的采集、传播、处理、储存、运用输出</li><li>结构：垂直，管理层、控制层和作业层；水平，供应、生产、销售、回收和废弃物流的运输、仓储、搬运装卸、包装、流通加工等环节的信息。</li><li>应具有数据层、业务、运用、控制和计划等层次</li></ul><h3 id="信息系统与技术应用"><a href="#信息系统与技术应用" class="headerlink" title="信息系统与技术应用"></a>信息系统与技术应用</h3><ul><li>EDI：电子信息交换</li><li>ITS：智能交通系统</li><li>VSS：车辆调度系统</li><li>OCR、图像识别技术</li><li>FRID：射频识别技术</li><li>Citops：PSA</li><li>TOPS+：上海海勃</li><li>SPARCS：Navis</li><li>COSMOS：比利时</li><li>iTOPs：大连</li></ul><h1 id="三、港口物流及其组成"><a href="#三、港口物流及其组成" class="headerlink" title="三、港口物流及其组成"></a>三、港口物流及其组成</h1><h2 id="基本概念内涵-1"><a href="#基本概念内涵-1" class="headerlink" title="基本概念内涵"></a>基本概念内涵</h2><h3 id="港口概念及分类"><a href="#港口概念及分类" class="headerlink" title="港口概念及分类"></a>港口概念及分类</h3><p><strong>港口</strong>，具有一定设备设施条件，供船舶安全进出、停泊和避风，进行货物或旅 客转载作业的场所。</p><p><strong>按用途分：</strong>商港、军港、 渔港、工业港、 避风港和旅游 港</p><p><strong>按规模作用分：</strong></p><ul><li>世界性港口：大洲枢纽</li><li>国际区域性港口 ：国家周边区域</li><li>地区性港口 ：国内或更小区域</li></ul><p><strong>按航线作用：</strong></p><ul><li>干线港：大型枢纽港，水水中转</li><li>支线港：相对干线港而言</li><li>地区性港 ：国内或更小区域服务</li></ul><h3 id="发展背景"><a href="#发展背景" class="headerlink" title="发展背景"></a>发展背景</h3><ul><li>现代（国际）贸易和物流要求：流通与资源配置的高效率、运作低成本、增值服务</li><li>第三方（港口）物流迅速发展</li></ul><h3 id="港口物流"><a href="#港口物流" class="headerlink" title="港口物流"></a>港口物流</h3><ul><li><p>以港口为平台，利用港口区位、资源、交通等优势</p></li><li><p>以港口运输和中转服务为主，提供运输、仓储、配送、流通加工、包装、通关、商检、保险和信息交换等服务</p></li><li><p>发挥港口对周边区域辐射能力的多功能一体化的综合物流活动</p><blockquote><p>严格意义上说，港口物流 不是现代物流的基本类型</p></blockquote></li></ul><h2 id="港口物流系统组成"><a href="#港口物流系统组成" class="headerlink" title="港口物流系统组成"></a>港口物流系统组成</h2><p>港口物流系统组成分为：区位自然条件、基础设施设备、物流信息、物流运营、协调系统、相关产业</p><h3 id="1-区位自然条件"><a href="#1-区位自然条件" class="headerlink" title="1.区位自然条件"></a>1.区位自然条件</h3><ul><li>港口物流运作的前提和基础，为港口物流系统提供环境基础</li><li>由港口区位条件和自然地理条件组成 </li></ul><p>主要包括： </p><ul><li>港口地理区位、腹地经济等条件 </li><li>位置环境条件，港区陆域，岸线，锚地等 条件 </li><li>气象水文条件（气候，波浪，潮汐，泥沙 等），地质条件 </li><li>其他综合自然条件</li></ul><h3 id="2-基础设施设备"><a href="#2-基础设施设备" class="headerlink" title="2.基础设施设备"></a>2.基础设施设备</h3><ul><li>为港口物流运作提供配套技术装备和基础设施</li><li>由物流设施和物流技术装备组成</li></ul><p>主要包括：</p><ul><li>港口航道锚地设施与设备</li><li>码头及库场生产设施与设备</li><li>辅助库场设施与设备</li><li>集疏运设施与设备（公路、铁 路、车辆等）</li></ul><h3 id="3-港口物流信息系统"><a href="#3-港口物流信息系统" class="headerlink" title="3.港口物流信息系统"></a>3.港口物流信息系统</h3><ul><li>港口物流系统及相关部门的信息支持系统</li><li>利用信息和通讯技术，保障港口物流相关部门的有机联系，使信息在各环节交互和传递畅通，以及高效、及时和准确的信息处理和应用</li></ul><p>主要功能：</p><ul><li>信息采集、传递 </li><li>存储、加工处理</li><li>统计、分析、应用等</li></ul><blockquote><p>“神经系统”—管理效率和协调能力 提高的关键</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-1/3.png" alt="3"></p><h3 id="4-港口物流运营系统——核心（运作中心环节）"><a href="#4-港口物流运营系统——核心（运作中心环节）" class="headerlink" title="4.港口物流运营系统——核心（运作中心环节）"></a>4.港口物流运营系统——核心（运作中心环节）</h3><p>主要组成：</p><ul><li>港口物流业务、经营组织系统——提供直接港口物流服务，决定系统 </li><li>设施设备管理、生产调度系统——运作能力及效率 </li><li>质量管理监督等系统——提高服务质量和增强竞争力的核心</li></ul><h3 id="5-港口物流协调支持系统"><a href="#5-港口物流协调支持系统" class="headerlink" title="5.港口物流协调支持系统"></a>5.港口物流协调支持系统</h3><p>主要职能：</p><ul><li>系统运作监督与协调后勤管理、市场信息管理、人才培养等</li><li>创造良好政策环境、市场环境以及人文环境等，通过政策引导监督和人才支持等来保障系统高效和畅通</li></ul><p>组成：</p><ul><li>政府行政管理部门</li><li>系统监督协调部门</li><li>海关联检部门</li><li>行业协会等</li></ul><h3 id="6-港口物流相关产业系统"><a href="#6-港口物流相关产业系统" class="headerlink" title="6.港口物流相关产业系统"></a>6.港口物流相关产业系统</h3><p>主要组成：</p><ul><li>物流增值、配套服务系统</li><li>临港加工贸易系统</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-1/4.png" alt="4"></p><h1 id="四、港口物流功能与实施"><a href="#四、港口物流功能与实施" class="headerlink" title="四、港口物流功能与实施"></a>四、港口物流功能与实施</h1><h2 id="港口物流功能与业务"><a href="#港口物流功能与业务" class="headerlink" title="港口物流功能与业务"></a>港口物流功能与业务</h2><h3 id="港口的现代物流地位与作用"><a href="#港口的现代物流地位与作用" class="headerlink" title="港口的现代物流地位与作用"></a>港口的现代物流地位与作用</h3><p><strong>海陆物流通道枢纽：</strong></p><ul><li>运输链中（尤其国际）综合运输系统中心</li><li>业务向内陆扩展，提高联运效率，发挥系统整体功能， 达到“1+1&gt;2”</li></ul><p><strong>生产流通要素结合点和聚集地：</strong></p><ul><li>汇集了商品流、资金流、技术流、信息流与人才</li><li>便利的流通条件，可减少生产运作成本，提高效率</li><li>港口商务中心功能，集聚和规模效应，便于商业金融等服务</li></ul><p><strong>增值服务中心：</strong></p><ul><li>具有突出的区位和资源优势</li><li>物流增值服务：流通加工，配送，信息处理，代理，保税通关等</li></ul><p><strong>物流信息中心：</strong></p><ul><li>多运输方式、供应链参与方、商业活动、金融活动、口岸活动等信息的汇集、处理与发布</li></ul><h3 id="现代港口物流基本功能"><a href="#现代港口物流基本功能" class="headerlink" title="现代港口物流基本功能"></a>现代港口物流基本功能</h3><p>1.运输、中转，装卸搬运功能 </p><ul><li>水运、集疏运（公路、铁路和管道）</li></ul><p>2.仓储功能</p><ul><li>集装箱、大宗货物-石油、矿石、粮食等储备、中转仓储功能</li></ul><p>3.加工、包装、分拣、配送等功能</p><ul><li>降低运输成本，减少装卸和运输的损坏为生产提供后勤服务</li></ul><p>4.信息收集、处理与发布功能</p><ul><li>收集整合，加工处理，发布应用</li></ul><p>5.保税口岸功能</p><ul><li>保税仓储、保税生产与加工，转口 进出口、通关等</li></ul><p>6.其他服务功能</p><ul><li>商检、保险、金融、商贸代理、咨询等资源整合等</li></ul><h3 id="现代港口物流业务"><a href="#现代港口物流业务" class="headerlink" title="现代港口物流业务"></a>现代港口物流业务</h3><p>运输相关</p><ul><li>运输业务：水上长途运输、路上分拨运输</li><li>船舶进出港业务：船舶拖轮、引航、联检、物料供给</li><li>货物进出港、通关报检业务</li><li>集装箱业务：整箱、拼箱业务</li></ul><p>仓储相关</p><ul><li>进出口分拨（保税）：进口保税分拨、出口聚集分运</li><li>转口、收购出口（保税）：出口经营权</li><li>大宗货物仓储、集装箱货运站等（非保税）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-1/5.png" alt="5"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-1/6.png" alt="6"></p><h2 id="基本组织实施"><a href="#基本组织实施" class="headerlink" title="基本组织实施"></a>基本组织实施</h2><h3 id="港区内的物流作业"><a href="#港区内的物流作业" class="headerlink" title="港区内的物流作业"></a>港区内的物流作业</h3><ul><li>船舶相关：船舶到港、待泊、联检、 进航道、靠泊、装卸准备、装卸、船舶补给、船舶进航道、离港</li><li>车辆相关：车辆进港、车辆装卸、车辆离港等、港内搬运</li><li>货物相关：货物进港（卸船），库场储存或拼装，放行装船， 货物离港（货主提货）</li></ul><p>港区配套作业：生产准备（计划编制、设备工器具准备）、辅助生产（维修、库场整理等）、增值服务（包装、加工、信息等）、其他（联检、海关等）<br><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-1/7.png" alt="7"></p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-1/8.png" alt="8"></p><h1 id="五、港口物流现状与趋势"><a href="#五、港口物流现状与趋势" class="headerlink" title="五、港口物流现状与趋势"></a>五、港口物流现状与趋势</h1><h2 id="发展历程和现状"><a href="#发展历程和现状" class="headerlink" title="发展历程和现状"></a>发展历程和现状</h2><h3 id="港口建设发展历程"><a href="#港口建设发展历程" class="headerlink" title="港口建设发展历程"></a>港口建设发展历程</h3><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-1/9.png" alt="9"></p><p>1978年改革开放以来，我国在港口建设和港口物流方面取得了巨大的成就。不仅在量上取得了多个世界第一，在质上也赶上甚至超过了西方发达国家，在多个领域取得了领先的优势。我国建成了世界最大的全自动化集装箱码头（2017年上海洋山自动化集装箱码头）。中国港 口的货物和集装箱吞吐量长期保持高速增长。2019年，排名前10名的集装箱港，中国占7个，全国集装箱吞吐量达到1.76亿TEU。全球前10大港口货物吞吐量累计中中国占比80%以上。目前中国的港口建设已经实现了全产业链、全要素的比较优势，在多个技术领域已经是当之无 愧的全球第一，为国际贸易提供物流支点，成为一张闪亮的“中国名片”。</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-1/10.png" alt="10"></p><p>中国五大港口群：</p><ul><li>长江三角洲港口群，重点：集装箱、进口铁矿 石、进口原油中转运输和煤炭卸船中转运输</li><li>珠江三角洲港口群，重点：集装箱、进口原油 中转运输和煤炭卸船中转运输</li><li>渤海湾港口群，重点：集装箱、进口铁矿石、 进口原油和煤炭装船中转运输</li><li>东南沿海港口，重点：集装箱、煤炭接卸系统 、进口石油、天然气接卸以及陆岛滚装运输</li><li>西南沿海港口，重点：集装箱、进口石油、天 然气中转储运、矿石转运 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/port-logistics-1/11.png" alt="11"></p><blockquote><p><strong>港口建设中的大工人</strong></p><p>1952年，新中国第一个海港工程专业在我校创立，我校师生在港口建设领域做出了多 项重要贡献。比如：1958年邱大洪受命承担了大连渔港海上工程的设计任务，并担任技术 总负责人。这是由中国人第一次自己设计建造现代化渔港，也是当时亚洲最大的渔港。 1973年，邱大洪担任中国第一座现代化的原油输出港——大连新港的主要技术负责人。</p></blockquote><h2 id="未来发展趋势"><a href="#未来发展趋势" class="headerlink" title="未来发展趋势"></a>未来发展趋势</h2><h3 id="港口物流发展趋势"><a href="#港口物流发展趋势" class="headerlink" title="港口物流发展趋势"></a>港口物流发展趋势</h3><p><strong>1.从单一功能向多功能的物流园区或物流中心发展</strong></p><p>借助现代化交通运输工具，各类先进的物流仓储技术、自动化装卸设备，形成综合 功能的物流园区或物流中心；汇聚仓储、包装、运输、信息服务，使之成为层次更高、 服务更优的物流网络节点。不仅满足了顾客个性化需求，也可以延长服务链，增加货物 在港口中转过程中的价值，提升港口物流功能。</p><p><strong>2.构建多元化、智能化的港口物流信息系统（智慧港口）</strong></p><p>将电子商务、人工智能、物联网、大数据等深度融入现代港口物流行业，进一步建立 多元化、智能化的物流信息服务系统；构建具有管理信息化、办公自动化、物流供应链一 体化特征的辅助决策体系，不断促进港口物流系统更加完善与便利。 </p><p><strong>3.构建“公铁水”多式联运的运营方式</strong></p><p>加强港城、港区之间的物流网络的合理规划设计与建设，科学布局港口物流业态，实施高效的多式联运工程。 </p><p><strong>4.构建区域协同发展的港口物流体系</strong></p><p>自2015年2月交通运输部印发《区域港口发展一体化试点方案》以来，区域港口整合成为 我国推进区域港口协调发展和促进港口转型升级的关键举措。沿海沿江数十个省市自治区先 后出台相关的整合方案对省级辖区的多个港口予以实质性整合，在省级层面成立了港口集团 。未来区域协同发展的港口物流体系将逐步形成。</p><p>例如：浙江省海港投资运营集团有限公司、江苏省港口集团有限公司、安徽省港航集团 有限公司、湖南省港务集团有限公司、辽宁港口集团有限公司等。2019年8月6日，山东省港 口集团有限公司也在青岛正式成立。2020年1月18日，江西省港口集团有限公司在南昌成立 。 </p><h3 id="一带一路-合作共赢"><a href="#一带一路-合作共赢" class="headerlink" title="一带一路 合作共赢"></a>一带一路 合作共赢</h3><p>中国国际贸易不断发展且高度依赖海上运输，为了适应“一带一路”战略的发展，中国 参与海外港口项目合作，逐渐成为中国与港口所在国家交往的一种重要方式。</p><p>例如位于中巴经济走廊最南端的瓜达尔港，中国援建并参与运营的瓜达尔港有利于该国人 民的经济发展，有利于实现共同繁荣。</p><p>此外，中国参与建设皇京港、汉班 托塔港、科伦坡港口城项目、也门的亚 丁港扩建项目、沙特的吉赞经济城港口 项目…… 等。中国为项目提供了大部分 资金，帮助发展中国家发展经济，为实 现“人类命运共同体”不断做出贡献。</p><p>下一篇：<a href="/post/port-logistics-2/">现代港口物流管理（二）港口物流设备设施与工艺</a></p>]]></content>
      
      
      <categories>
          
          <category> 土木水利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水利 </tag>
            
            <tag> 港口 </tag>
            
            <tag> 现代港口物流管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强化学习Q-learning走迷宫小例子（附Python代码）</title>
      <link href="/post/ai-2-rl-q-learning/"/>
      <url>/post/ai-2-rl-q-learning/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><div style="display: flex; justify-content: center;"><video width="600" height="500" controls controlslist="nodownload">  <source src="/post/ai-2-rl-q-learning/1.mp4" type="video/mp4">  Your browser does not support the video tag.</video></div><p>Q学习（Q-learning）是一种基于模型的强化学习算法，由Watkins在1992年首次提出。它通过迭代更新价值函数来学习最优的策略。在Q学习中，策略是指如何选择动作以达到最大的奖励。</p><p>具体来说，Q学习的核心思想是维护一个Q表格，其中每个状态-动作对都对应着一个Q值，表示在该状态下执行该动作获得的长期奖励。初始时，Q表格中所有的Q值都被初始化为0。在每一步操作中，智能体会观察当前状态，并根据一定的策略选择一个动作执行。执行完动作后，智能体会观察新的状态和获得的即时奖励，并根据Q学习算法更新Q表格中相应的Q值。这个过程一直持续到智能体找到了最优的策略。在实践中，Q学习通常使用ε-贪心策略以平衡探索与利用的关系。</p><p>Q学习是一种简单而高效的强化学习算法，适用于状态空间较小、动作空间离散且可枚举的问题。它已经被广泛应用到各种领域，例如机器人控制、游戏设计等。同时，Q学习也是众多强化学习算法中最具代表性的一种，并为深度强化学习算法的发展提供了很好的基础。</p><p>Q-learning更新：</p><script type="math/tex; mode=display">Q(S_t,A_t)\leftarrow Q(S_t,A_t)+\alpha\left[R_{t+1}+\gamma  \max\limits_aQ(S_{t+1},a)-Q(S_t,A_t)\right]</script><p>易分析知，我们是从所有的 $Q(S_{t+1},a)$ 中直接选取了最大值来更新，更新之后，我们可以任意采取其他策略来做 exploration actions ，所以 Q-learning 是 Off-policy 方法。</p><p>Q-learning伪代码：</p><p><img src="https://cdn.jsdelivr.net/gh/smiler666/smiler666.github.io/post/ai-2-rl-q-learning/q-learning.png" alt></p><p>走迷宫的Python代码例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame       <span class="comment"># 导入Pygame库用于游戏开发</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np   <span class="comment"># 导入Numpy库用于数字计算</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义常量</span></span><br><span class="line">SCREEN_SIZE = [<span class="number">600</span>, <span class="number">600</span>]        <span class="comment"># 定义屏幕大小</span></span><br><span class="line">BLOCK_SIZE = SCREEN_SIZE[<span class="number">0</span>] // <span class="number">6</span>    <span class="comment"># 定义方块大小</span></span><br><span class="line">NUM_ACTIONS = <span class="number">4</span>     <span class="comment"># 定义动作数量为4（上下左右移动）</span></span><br><span class="line">NUM_STATES = <span class="number">6</span> * <span class="number">6</span>    <span class="comment"># 定义状态数量为36（在6*6的地图中）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化Pygame</span></span><br><span class="line">pygame.init()       <span class="comment"># 初始化Pygame库</span></span><br><span class="line">screen = pygame.display.set_mode(SCREEN_SIZE)  <span class="comment"># 将Pygame库中的屏幕设置为指定的大小</span></span><br><span class="line">font = pygame.font.SysFont(<span class="literal">None</span>, <span class="number">30</span>)       <span class="comment"># 设置字体为默认字体，大小为30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_block</span><span class="params">(screen, color, position)</span>:</span></span><br><span class="line">    <span class="comment"># 绘制方块</span></span><br><span class="line">    block = pygame.Surface((BLOCK_SIZE, BLOCK_SIZE))     <span class="comment"># 创建Surface对象，大小为方块大小</span></span><br><span class="line">    block.fill(color)      <span class="comment"># 设置颜色</span></span><br><span class="line">    rect = block.get_rect()     <span class="comment"># 获取矩形区域</span></span><br><span class="line">    rect.topleft = (position[<span class="number">1</span>]*BLOCK_SIZE, position[<span class="number">0</span>]*BLOCK_SIZE)   <span class="comment"># 设置位置</span></span><br><span class="line">    screen.blit(block, rect)        <span class="comment"># 绘制方块到屏幕上</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_maze</span><span class="params">(maze, position)</span>:</span></span><br><span class="line">    <span class="comment"># 绘制地图和智能体位置</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(maze)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(maze[i])):</span><br><span class="line">            <span class="keyword">if</span> maze[i][j] == <span class="number">0</span>:</span><br><span class="line">                color = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)     <span class="comment"># 如果格子是0，设置颜色为白色</span></span><br><span class="line">            <span class="keyword">elif</span> maze[i][j] == <span class="number">1</span>:</span><br><span class="line">                color = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)           <span class="comment"># 如果格子是1，设置颜色为黑色</span></span><br><span class="line">            <span class="keyword">elif</span> maze[i][j] == <span class="number">2</span>:</span><br><span class="line">                color = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)         <span class="comment"># 如果格子是2，设置颜色为红色</span></span><br><span class="line">            draw_block(screen, color, (i, j))   <span class="comment"># 将方块绘制到屏幕上</span></span><br><span class="line">    draw_block(screen, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), position)   <span class="comment"># 将智能体位置绘制到屏幕上</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_reward</span><span class="params">(maze, state)</span>:</span></span><br><span class="line">    <span class="comment"># 计算奖励值</span></span><br><span class="line">    x, y = state // <span class="number">6</span>, state % <span class="number">6</span>      <span class="comment"># 将状态转换成坐标</span></span><br><span class="line">    <span class="keyword">if</span> maze[x][y] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>                        <span class="comment"># 如果当前格子是0，返回0</span></span><br><span class="line">    <span class="keyword">elif</span> maze[x][y] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-100</span>                     <span class="comment"># 如果当前格子是1，返回-100（表示撞墙了）</span></span><br><span class="line">    <span class="keyword">elif</span> maze[x][y] == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span>                      <span class="comment"># 如果当前格子是2，返回100（表示到达终点了）</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"Invalid maze state"</span>)  <span class="comment"># 如果当前格子的值不是0、1或2，抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_next_state</span><span class="params">(state, action)</span>:</span></span><br><span class="line">    <span class="comment"># 获取下一个状态</span></span><br><span class="line">    x, y = state // <span class="number">6</span>, state % <span class="number">6</span>      <span class="comment"># 将状态转换成坐标</span></span><br><span class="line">    <span class="keyword">if</span> action == <span class="number">0</span>:     <span class="comment"># 如果动作是向上移动</span></span><br><span class="line">        x = max(x<span class="number">-1</span>, <span class="number">0</span>)     <span class="comment"># 向上移动，y不变，x最小为0</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="number">1</span>:   <span class="comment"># 如果动作是向下移动</span></span><br><span class="line">        x = min(x+<span class="number">1</span>, <span class="number">5</span>)     <span class="comment"># 向下移动，y不变，x最大为9</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="number">2</span>:   <span class="comment"># 如果动作是向左移动</span></span><br><span class="line">        y = max(y<span class="number">-1</span>, <span class="number">0</span>)     <span class="comment"># 向左移动，x不变，y最小为0</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="number">3</span>:   <span class="comment"># 如果动作是向右移动</span></span><br><span class="line">        y = min(y+<span class="number">1</span>, <span class="number">5</span>)     <span class="comment"># 向右移动，x不变，y最大为9</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">6</span> + y     <span class="comment"># 将新的坐标转换成状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化Q表格</span></span><br><span class="line">Q = np.zeros([NUM_STATES, NUM_ACTIONS])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义超参数</span></span><br><span class="line">alpha = <span class="number">0.1</span>     <span class="comment"># 学习率</span></span><br><span class="line">gamma = <span class="number">0.9</span>     <span class="comment"># 折扣因子</span></span><br><span class="line">epsilon = <span class="number">0.1</span>   <span class="comment"># 探索概率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化迷宫</span></span><br><span class="line">maze = [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> iii <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">    <span class="comment"># 循环10000次进行训练</span></span><br><span class="line">    state = <span class="number">0</span>    <span class="comment"># 初始化状态为0（起点）</span></span><br><span class="line">    position = (<span class="number">0</span>, <span class="number">0</span>)    <span class="comment"># 初始化位置为左上角</span></span><br><span class="line">    i = <span class="number">0</span>       <span class="comment"># 记录步数，初始为0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 处理事件</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                quit()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新Q值</span></span><br><span class="line">        action = np.argmax(Q[state, :] + np.random.randn(<span class="number">1</span>, NUM_ACTIONS)*(<span class="number">1.</span>/(i+<span class="number">1</span>)))</span><br><span class="line">        <span class="comment"># 根据当前状态选择一个动作，其中np.argmax()用于获取当前状态下Q值最大的动作，</span></span><br><span class="line">        <span class="comment"># 这里加上一个噪声项，用于控制探索，当i越大时，探索概率越小。</span></span><br><span class="line">        next_state = get_next_state(state, action)    <span class="comment"># 获取下一个状态</span></span><br><span class="line">        reward = get_reward(maze, next_state)     <span class="comment"># 获取奖励值</span></span><br><span class="line">        Q[state, action] += alpha*(reward + gamma*np.max(Q[next_state, :]) - Q[state, action])</span><br><span class="line">        <span class="comment"># 根据公式更新Q值，其中alpha为学习率，gamma为折扣因子，np.max(Q[next_state, :])用于获取下一个状态的最大Q值</span></span><br><span class="line"></span><br><span class="line">        state = next_state   <span class="comment"># 更新当前状态为下一个状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 画图像</span></span><br><span class="line">        position = (state // <span class="number">6</span>, state % <span class="number">6</span>)       <span class="comment"># 将状态转换成坐标</span></span><br><span class="line">        screen.fill((<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))       <span class="comment"># 填充颜色为白色</span></span><br><span class="line">        draw_maze(maze, position)       <span class="comment"># 绘制地图和智能体位置</span></span><br><span class="line">        text = font.render(<span class="string">"Step: &#123;&#125;"</span>.format(i), <span class="literal">True</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))      <span class="comment"># 显示步数</span></span><br><span class="line">        screen.blit(text, (<span class="number">10</span>, <span class="number">10</span>))     <span class="comment"># 将步数绘制到屏幕上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 显示图像</span></span><br><span class="line">        pygame.display.update()     <span class="comment"># 更新显示</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否到达终点</span></span><br><span class="line">        <span class="keyword">if</span> maze[position[<span class="number">0</span>]][position[<span class="number">1</span>]] == <span class="number">2</span>:    <span class="comment"># 如果智能体到达终点</span></span><br><span class="line">            <span class="keyword">break</span>       <span class="comment"># 结束循环</span></span><br><span class="line">        </span><br><span class="line">        i += <span class="number">1</span>      <span class="comment"># 步数加一，用于控制探索概率的变化</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 探索 </tag>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
